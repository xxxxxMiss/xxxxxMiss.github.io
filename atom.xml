<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青史成灰</title>
  
  <subtitle>Every journey begins with the first step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xxxxxmiss.github.io/"/>
  <updated>2018-11-18T08:33:56.933Z</updated>
  <id>https://xxxxxmiss.github.io/</id>
  
  <author>
    <name>xxxxxMiss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http-redirection</title>
    <link href="https://xxxxxmiss.github.io/2018/11/18/http-redirection/"/>
    <id>https://xxxxxmiss.github.io/2018/11/18/http-redirection/</id>
    <published>2018-11-18T06:51:13.000Z</published>
    <updated>2018-11-18T08:33:56.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Permanent-Redirection-永久重定向"><a href="#Permanent-Redirection-永久重定向" class="headerlink" title="Permanent Redirection(永久重定向)"></a>Permanent Redirection(永久重定向)</h2><table><thead><tr><th>statusCode</th><th>含义</th><th>处理方法</th><th>场景</th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>GET 方法不会发生变更，其他方法有可能会变更为 GET 方法</td><td>-</td></tr><tr><td>308</td><td>Permanent Redirect</td><td>方法和消息主体都不发生变化</td><td>-</td></tr></tbody></table><h2 id="Temporary-Redirection-临时重定向"><a href="#Temporary-Redirection-临时重定向" class="headerlink" title="Temporary Redirection(临时重定向)"></a>Temporary Redirection(临时重定向)</h2><table><thead><tr><th>statusCode</th><th>含义</th><th>处理方法</th><th>场景</th></tr></thead><tbody><tr><td>302</td><td>Found</td><td>GET 方法不会发生变更，其他方法有可能会变更为 GET 方法</td><td>-</td></tr><tr><td>303</td><td>See Other</td><td>GET 方法不会发生变更，其他方法会变更为 GET 方法（消息主体会丢失)</td><td>-</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>方法和消息主体都不发生变化</td><td>-</td></tr></tbody></table><h2 id="Special-Redirection-特殊重定向"><a href="#Special-Redirection-特殊重定向" class="headerlink" title="Special Redirection(特殊重定向)"></a>Special Redirection(特殊重定向)</h2><table><thead><tr><th>statusCode</th><th>含义</th><th>场景</th></tr></thead><tbody><tr><td>300</td><td>Multiple Choice</td><td>不会太多：所有的选项在消息主体的 HTML 页面中列出。也可以返回 200 OK 状态码。</td></tr><tr><td>304</td><td>Not Modified</td><td>缓存刷新：该状态码表示缓存值依然有效，可以使用。</td></tr></tbody></table><h2 id="重定向的3种方法"><a href="#重定向的3种方法" class="headerlink" title="重定向的3种方法"></a>重定向的3种方法</h2><blockquote><p>当这3种方式同时存在时，优先级由高到低：http &gt; html meta &gt; js。</p></blockquote><ul><li>使用http协议重定向（上面介绍的3种重定向）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">res.statusCode = <span class="number">307</span></div><div class="line">res.setHeader(<span class="string">'Location'</span>, <span class="string">'/doc-new'</span>)</div></pre></td></tr></table></figure><ul><li>使用html<code>meta</code>标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;URL=http://www.example.com/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p><code>content</code> 属性的值开头是一个数字，指示浏览器在等待该数字表示的秒数之后再进行跳转。建议始终将其设置为 0 来获取更好的可访问性。</p></blockquote><ul><li>使用js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.location.href = <span class="string">'http://www.example.com/'</span></div></pre></td></tr></table></figure><h2 id="对于不安全请求的临时响应节"><a href="#对于不安全请求的临时响应节" class="headerlink" title="对于不安全请求的临时响应节"></a>对于不安全请求的临时响应节</h2><p>不安全请求会修改服务器端的状态，应该避免用户无意的重复操作。一般地，你并不想要你的用户重复发送 <code>PUT</code>、<code>POST</code> 或 <code>DELETE</code> 请求。假如你仅仅为该类请求返回响应的话，简单地点击刷新按钮就会（可能会有一个确认信息）导致请求的重复发送。</p><p>在这种情况下，服务器可以返回一个 303 (See Other) 响应，其中含有合适的响应信息。如果刷新按钮被点击的话，只会导致该页面被刷新，而不会重复提交不安全的请求。</p><h2 id="对于耗时请求的临时响应节"><a href="#对于耗时请求的临时响应节" class="headerlink" title="对于耗时请求的临时响应节"></a>对于耗时请求的临时响应节</h2><p>一些请求的处理会需要比较长的时间，比如有时候 DELETE 请求会被安排为稍后处理。在这种情况下，会返回一个 303 (See Other)  重定向响应，该响应链接到一个页面，表示请求的操作已经被列入计划，并且最终会通知用户操作的进展情况，或者允许用户将其取消。</p><h2 id="Nginx中配置重定向"><a href="#Nginx中配置重定向" class="headerlink" title="Nginx中配置重定向"></a>Nginx中配置重定向</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">  <span class="attribute">server_name</span> example.com;</div><div class="line">  <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$schema</span>://www.example.com<span class="variable">$request_uri</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以使用 rewrite 指令来针对一个文件目录或者一部分页面应用重定向设置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/images/(.*)$</span> http://images.example.com/<span class="variable">$1</span> <span class="literal">redirect</span>;</div><div class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/images/(.*)$</span> http://images.example.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Permanent-Redirection-永久重定向&quot;&gt;&lt;a href=&quot;#Permanent-Redirection-永久重定向&quot; class=&quot;headerlink&quot; title=&quot;Permanent Redirection(永久重定向)&quot;&gt;&lt;/a&gt;Perm
      
    
    </summary>
    
      <category term="http" scheme="https://xxxxxmiss.github.io/categories/http/"/>
    
    
      <category term="http" scheme="https://xxxxxmiss.github.io/tags/http/"/>
    
      <category term="redirection" scheme="https://xxxxxmiss.github.io/tags/redirection/"/>
    
  </entry>
  
  <entry>
    <title>platform-compatibility</title>
    <link href="https://xxxxxmiss.github.io/2018/11/13/platform-compatibility/"/>
    <id>https://xxxxxmiss.github.io/2018/11/13/platform-compatibility/</id>
    <published>2018-11-13T03:40:24.000Z</published>
    <updated>2018-11-16T03:49:51.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date()"></a>new Date()</h2><blockquote><p>如果使用格式化字符串的形式，一般有如下几种形式：</p></blockquote><table><thead><tr><th></th><th>yyyy-MM-dd</th><th>yyyy/MM/dd</th><th>yyyy.MM.dd</th></tr></thead><tbody><tr><td>IOS</td><td>✅</td><td>✅</td><td>❎</td></tr><tr><td>Android</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><p>所以对于<code>yyyy.MM.dd</code>的形式，一般转化成前面2种形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dateStr.replace(<span class="string">'.'</span>, <span class="string">'/'</span>)</div></pre></td></tr></table></figure><p>Note: 经测试发现，如果少了<em>日</em>的字符，也会出现兼容性问题。<br>就比如这种<code>yyyy/MM</code>, 所以为了安全起见，最好这样转化下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="regexp">/^[\d]&#123;2,4&#125;[-/.]\d&#123;1,2&#125;$/</span>.test(dateStr)) &#123;</div><div class="line">  dateStr.replace(<span class="regexp">/[.-]/g</span>, <span class="string">'/'</span>) + <span class="string">'/01'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;new-Date&quot;&gt;&lt;a href=&quot;#new-Date&quot; class=&quot;headerlink&quot; title=&quot;new Date()&quot;&gt;&lt;/a&gt;new Date()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如果使用格式化字符串的形式，一般有如下几种形式：&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>share-miniapp</title>
    <link href="https://xxxxxmiss.github.io/2018/10/20/share-miniapp/"/>
    <id>https://xxxxxmiss.github.io/2018/10/20/share-miniapp/</id>
    <published>2018-10-20T06:22:57.000Z</published>
    <updated>2018-11-14T09:07:01.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序架构"><a href="#小程序架构" class="headerlink" title="小程序架构"></a><a href="https://www.jianshu.com/p/4e8ed26d3b7a" target="_blank" rel="external">小程序架构</a></h2><img src="/2018/10/20/share-miniapp/miniapp-structure.png" alt="小程序架构" title="小程序架构"><h2 id="JSBridge"><a href="#JSBridge" class="headerlink" title="JSBridge"></a>JSBridge</h2><blockquote><p>JavaScript 是运行在一个单独的 JS Context 中（例如，WebView 的 Webkit 引擎、JSCore）。由于这些 Context 与原生运行环境的天然隔离，我们可以将这种情况与 RPC（Remote Procedure Call，远程过程调用）通信进行类比，将 Native 与 JavaScript 的每次互相调用看做一次 RPC 调用。<br>在 JSBridge 的设计中，可以把前端看做 RPC 的客户端，把 Native 端看做 RPC 的服务器端，从而 JSBridge 要实现的主要逻辑就出现了：通信调用（Native 与 JS 通信） 和 句柄解析调用。（如果你是个前端，而且并不熟悉 RPC 的话，你也可以把这个流程类比成 <a href="#JSONP实现原理">JSONP</a> 的流程）</p></blockquote><img src="/2018/10/20/share-miniapp/jsbridge.png" alt="js桥接" title="js桥接"><p>JavaScript 调用 Native 的方式，主要有两种：注入 API 和 拦截 URL SCHEME。</p><h3 id="注入API"><a href="#注入API" class="headerlink" title="注入API"></a>注入API</h3><p>注入 API 方式的主要原理是，通过 WebView 提供的接口，向 JavaScript 的 Context（window）中注入对象或者方法，让 JavaScript 调用时，直接执行相应的 Native 代码逻辑，达到 JavaScript 调用 Native 的目的。</p><p>IOS:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JSContext *context = [uiWebView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line"></div><div class="line">context[<span class="string">@"postBridgeMessage"</span>] = ^(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSArray</span> *&gt; *calls) &#123;</div><div class="line">    <span class="comment">// Native 逻辑</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>前端调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.postBridgeMessage(message);</div></pre></td></tr></table></figure><p>Android<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaScriptInterfaceDemoActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> WebView Wv;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">      Wv = (WebView)findViewById(R.id.webView);     </div><div class="line">      <span class="keyword">final</span> JavaScriptInterface myJavaScriptInterface = <span class="keyword">new</span> JavaScriptInterface(<span class="keyword">this</span>);     </div><div class="line"></div><div class="line">      Wv.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">      Wv.addJavascriptInterface(myJavaScriptInterface, <span class="string">"nativeBridge"</span>);</div><div class="line"></div><div class="line">      <span class="comment">// TODO 显示 WebView</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaScriptInterface</span> </span>&#123;</div><div class="line">        Context mContext;</div><div class="line"></div><div class="line">        JavaScriptInterface(Context c) &#123;</div><div class="line">            mContext = c;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postMessage</span><span class="params">(String webMessage)</span></span>&#123;    </div><div class="line">            <span class="comment">// Native 逻辑</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>前端调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.nativeBridge.postMessage(message);</div></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:orientation="vertical" &gt;</div><div class="line">    &lt;WebView</div><div class="line">      android:id="@+id/webView"</div><div class="line">      android:layout_width="fill_parent"</div><div class="line">      android:layout_height="fill_parent"</div><div class="line">  /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><h3 id="拦截URL-SCHEMA"><a href="#拦截URL-SCHEMA" class="headerlink" title="拦截URL SCHEMA"></a>拦截URL SCHEMA</h3><blockquote><p>URL SCHEME：URL SCHEME是一种类似于url的链接，是为了方便app直接互相调用设计的，形式和普通的 url 近似，主要区别是 protocol 和 host 一般是自定义的，例如: qunarhy://hy/url?url=ymfe.tech，protocol 是 qunarhy，host 则是 hy。<br>拦截 URL SCHEME 的主要流程是：Web 端通过某种方式（例如 iframe.src）发送 URL Scheme 请求，之后 Native 拦截到请求并根据 URL SCHEME（包括所带的参数）进行相关操作。</p></blockquote><h3 id="JSBridge雏形"><a href="#JSBridge雏形" class="headerlink" title="JSBridge雏形"></a>JSBridge雏形</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> id = <span class="number">0</span>,</div><div class="line">        callbacks = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.JSBridge = &#123;</div><div class="line">        <span class="comment">// 调用 Native</span></div><div class="line">        invoke: <span class="function"><span class="keyword">function</span>(<span class="params">bridgeName, callback, data</span>) </span>&#123;</div><div class="line">            <span class="comment">// 判断环境，获取不同的 nativeBridge</span></div><div class="line">            <span class="keyword">var</span> thisId = id ++; <span class="comment">// 获取唯一 id</span></div><div class="line">            callbacks[thisId] = callback; <span class="comment">// 存储 Callback</span></div><div class="line">            nativeBridge.postMessage(&#123;</div><div class="line">                <span class="attr">bridgeName</span>: bridgeName,</div><div class="line">                <span class="attr">data</span>: data || &#123;&#125;,</div><div class="line">                <span class="attr">callbackId</span>: thisId <span class="comment">// 传到 Native 端</span></div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">receiveMessage</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> bridgeName = msg.bridgeName,</div><div class="line">                data = msg.data || &#123;&#125;,</div><div class="line">                callbackId = msg.callbackId; <span class="comment">// Native 将 callbackId 原封不动传回</span></div><div class="line">            <span class="comment">// 具体逻辑</span></div><div class="line">            <span class="comment">// bridgeName 和 callbackId 不会同时存在</span></div><div class="line">            <span class="keyword">if</span> (callbackId) &#123;</div><div class="line">                <span class="keyword">if</span> (callbacks[callbackId]) &#123; <span class="comment">// 找到相应句柄</span></div><div class="line">                    callbacks[callbackId](msg.data); <span class="comment">// 执行调用</span></div><div class="line">                &#125;</div><div class="line">            &#125; elseif (bridgeName) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><h2 id="JSONP实现原理"><a href="#JSONP实现原理" class="headerlink" title="JSONP实现原理"></a>JSONP实现原理</h2><blockquote><p>听者作答</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>._callback = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="comment">// your logic</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</div><div class="line">script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>&amp;_callback=_callback`</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure><h2 id="JavaScript-与-Objective-C-交互"><a href="#JavaScript-与-Objective-C-交互" class="headerlink" title="JavaScript 与 Objective-C 交互"></a>JavaScript 与 Objective-C 交互</h2><p>主要通过以下2种方式：</p><ul><li>Block: 第一种方式是使用block，block也可以称作闭包和匿名函数，使用block可以很方便的将OC中的单个方法暴露给JS调用，具体实现我们稍后再说。</li><li>JSExport 协议: 第二种方式，是使用JSExport协议，可以将OC的中某个对象直接暴露给JS使用，而且在JS中使用就像调用JS的对象一样自然。</li></ul><p>栗子：通过Block形式</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">context[<span class="string">@"makeNSColor"</span>] = ^(<span class="built_in">NSDictionary</span> *rgb)&#123;</div><div class="line">  <span class="keyword">float</span> r = [colors[<span class="string">@"red"</span>] floatValue];</div><div class="line">  <span class="keyword">float</span> g = [colors[<span class="string">@"green"</span>] floatValue];</div><div class="line">  <span class="keyword">float</span> b = [colors[<span class="string">@"blue"</span>] floatValue];</div><div class="line">  <span class="keyword">return</span> [<span class="built_in">NSColor</span> colorWithRed:(r / <span class="number">255.0</span>)</div><div class="line">    green: (g / <span class="number">255.0</span>f)</div><div class="line">    blue: (b / <span class="number">255.0</span>f)</div><div class="line">    alpha: <span class="number">1.0</span></div><div class="line">  ];</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> colorForWord = <span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!colorMap(word)) <span class="keyword">return</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> makeNSColor(colorMap(word))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> colorMap = &#123;</div><div class="line">  <span class="attr">orange</span>: &#123; <span class="attr">red</span>: <span class="number">255</span>, <span class="attr">green</span>: <span class="number">255</span>, <span class="attr">blue</span>: <span class="number">0</span> &#125;,</div><div class="line">  <span class="attr">cyan</span>: &#123; <span class="attr">red</span>: <span class="number">255</span>, <span class="attr">green</span>: <span class="number">155</span>, <span class="attr">blue</span>: <span class="number">0</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><img src="/2018/10/20/share-miniapp/js-oc-call.png" alt="js和oc的相互调用" title="js和oc的相互调用"><img src="/2018/10/20/share-miniapp/js-oc-type.png" alt="js和oc的类型对应关系" title="js和oc的类型对应关系"><h2 id="原生小程序开发痛点："><a href="#原生小程序开发痛点：" class="headerlink" title="原生小程序开发痛点："></a>原生小程序开发痛点：</h2><ul><li>仅支持大部分es2015语法，无法使用es2016+语法（async/await等）</li><li>对于背景图片，无法使用本地路径，需要上传图片至服务器以使用远程地址或者转化为base64编码</li><li>对于直接使用iconfont，需要转换成base64编码</li><li>不支持css预处理器（less, scss, stylus等）</li><li>无法使用eslint等代码检查工具</li><li>对于第三方依赖，需要手动拷贝源代码到项目中，无法直接使用npm包</li><li>…</li><li>总结起来就是无法<em>工程化</em></li></ul><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ul><li>代码压缩</li><li>及时清理无用代码和资源文件（这条已经变得不是很重要了，因为现在没用到的资源并不会被打包）</li><li>减少代码包中的图片等资源文件的大小和数量</li><li>提前请求，但是请求的数据不立即发送到视图层渲染，而是在合适的时机在渲染（<code>setData</code>）</li><li>缓存，利用 storage API 对异步请求数据进行缓存，二次启动时先利用缓存数据渲染页面，在进行后台更新</li><li>分包加载</li></ul><h3 id="分包优点以及限制"><a href="#分包优点以及限制" class="headerlink" title="分包优点以及限制"></a>分包优点以及限制</h3><img src="/2018/10/20/share-miniapp/sub-package.png" alt="分包加载" title="分包加载"><p>优点：</p><blockquote><p>对开发者而言，能使小程序有更大的代码体积，承载更多的功能与服务<br>对用户而言，可以更快地打开小程序，同时在不影响启动速度前提下使用更多功能</p></blockquote><p>限制：</p><blockquote><p>整个小程序所有分包大小不超过 8M<br>单个分包/主包大小不能超过 2M</p></blockquote><h3 id="避免不当使用setData"><a href="#避免不当使用setData" class="headerlink" title="避免不当使用setData"></a>避免不当使用setData</h3><img src="/2018/10/20/share-miniapp/miniapp-render.png" alt="小程序的渲染机制" title="小程序的渲染机制"><ul><li>使用 data 在方法间共享数据，可能增加 setData 传输的数据量。。data 应仅包括与页面渲染相关的数据。</li><li>使用 setData 传输大量数据，<strong>通讯耗时与数据正相关，页面更新延迟可能造成页面更新开销增加。</strong>仅传输页面中发生变化的数据，使用 setData 的特殊 key 实现局部更新。</li><li>短时间内频繁调用 setData，<strong>操作卡顿，交互延迟，阻塞通信，页面渲染延迟。</strong>避免不必要的 setData，对连续的setData调用进行合并。</li><li>在后台页面进行 setData，<strong>抢占前台页面的渲染资源。</strong>页面切入后台后的 setData 调用，延迟到页面重新展示时执行。</li></ul><h3 id="避免不当使用onPageScroll"><a href="#避免不当使用onPageScroll" class="headerlink" title="避免不当使用onPageScroll"></a>避免不当使用onPageScroll</h3><ul><li>只在有必要的时候监听 pageScroll 事件。不监听，则不会派发。</li><li>避免在 onPageScroll 中执行复杂逻辑</li><li>避免在 onPageScroll 中频繁调用 setData</li><li>避免滑动时频繁查询节点信息（SelectQuery）用以判断是否显示，部分场景建议使用节点布局橡胶状态监听（inersectionObserver）替代</li></ul><h2 id="小程序开发框架比较"><a href="#小程序开发框架比较" class="headerlink" title="小程序开发框架比较"></a>小程序开发框架比较</h2><img src="/2018/10/20/share-miniapp/framework-comparison.png" alt="小程序开发框架比较" title="小程序开发框架比较"><h2 id="各大框架的转化原理（以taro为例）"><a href="#各大框架的转化原理（以taro为例）" class="headerlink" title="各大框架的转化原理（以taro为例）"></a>各大框架的转化原理（以taro为例）</h2><img src="/2018/10/20/share-miniapp/taro-build.png" alt="taro转化原理" title="taro转化原理"><h2 id="各大框架相关链接"><a href="#各大框架相关链接" class="headerlink" title="各大框架相关链接"></a>各大框架相关链接</h2><h3 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a><a href="https://nervjs.github.io/taro/doc/router.html" target="_blank" rel="external">Taro</a></h3><blockquote><p><a href="https://github.com/NervJS/taro/issues" target="_blank" rel="external">官方仓库</a></p></blockquote><ul><li><a href="https://aotu.io/notes/2018/06/07/Taro/index.html" target="_blank" rel="external">Related</a></li></ul><h3 id="nanachi"><a href="#nanachi" class="headerlink" title="nanachi"></a><a href="https://rubylouvre.github.io/nanachi/index.html" target="_blank" rel="external">nanachi</a></h3><blockquote><p><a href="https://github.com/RubyLouvre/anu/tree/master/packages/cli" target="_blank" rel="external">官方仓库</a></p></blockquote><h3 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a><a href="http://mpvue.com/" target="_blank" rel="external">mpvue</a></h3><blockquote><p><a href="https://github.com/Meituan-Dianping/mpvue/issues" target="_blank" rel="external">官方仓库</a></p></blockquote><h3 id="megalo"><a href="#megalo" class="headerlink" title="megalo"></a><a href="https://kaola-fed.github.io/megalo-docs/#/" target="_blank" rel="external">megalo</a></h3><blockquote><p><a href="https://github.com/kaola-fed/megalo/issues" target="_blank" rel="external">官方仓库</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;小程序架构&quot;&gt;&lt;a href=&quot;#小程序架构&quot; class=&quot;headerlink&quot; title=&quot;小程序架构&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.jianshu.com/p/4e8ed26d3b7a&quot; target=&quot;_blank&quot; rel=&quot;e
      
    
    </summary>
    
      <category term="前端" scheme="https://xxxxxmiss.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="小程序" scheme="https://xxxxxmiss.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="Hybrid开发" scheme="https://xxxxxmiss.github.io/tags/Hybrid%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>css-border-radius</title>
    <link href="https://xxxxxmiss.github.io/2018/04/02/css-border-radius/"/>
    <id>https://xxxxxmiss.github.io/2018/04/02/css-border-radius/</id>
    <published>2018-04-02T07:30:11.000Z</published>
    <updated>2018-04-02T07:37:02.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h2><blockquote><p>如果一个父元素设置<code>border-radius</code>,子元素占据该父元素的<code>100%</code>,<br>但是该子元素并未设置<code>border-radius</code>,那么父元素的<code>border-radius</code>会被盖住（也就是说视觉上根本就跟父元素没有设置 <code>border-radius</code>一样）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;border-radius&quot;&gt;&lt;a href=&quot;#border-radius&quot; class=&quot;headerlink&quot; title=&quot;border-radius&quot;&gt;&lt;/a&gt;border-radius&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如果一个父元素设置&lt;cod
      
    
    </summary>
    
      <category term="front-end" scheme="https://xxxxxmiss.github.io/categories/front-end/"/>
    
    
      <category term="css" scheme="https://xxxxxmiss.github.io/tags/css/"/>
    
      <category term="border-radius" scheme="https://xxxxxmiss.github.io/tags/border-radius/"/>
    
  </entry>
  
  <entry>
    <title>git-commit-rules</title>
    <link href="https://xxxxxmiss.github.io/2018/03/16/git-commit-rules/"/>
    <id>https://xxxxxmiss.github.io/2018/03/16/git-commit-rules/</id>
    <published>2018-03-16T08:21:48.000Z</published>
    <updated>2018-10-20T07:27:37.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git日志提交规范"><a href="#git日志提交规范" class="headerlink" title="git日志提交规范"></a>git日志提交规范</h2><blockquote><p>格式如下：</p></blockquote><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">type</span>&gt;[<span class="keyword">optional</span> scope]: &lt;description&gt;</div><div class="line"></div><div class="line">[<span class="keyword">optional</span> body]</div><div class="line"></div><div class="line">[<span class="keyword">optional</span> footer]</div></pre></td></tr></table></figure><h3 id="fix-bug"><a href="#fix-bug" class="headerlink" title="fix(:bug:)"></a>fix(:bug:)</h3><blockquote><p>修复问题，对应<code>semver patch</code><br>fix: named slots for nested functional components</p><p>指定具体的模块，功能等</p></blockquote><ul><li>fix(core)</li><li>fix(ssr)</li><li>fix(model)</li><li>fix(keep-alive)</li></ul><h3 id="feat-sparkles"><a href="#feat-sparkles" class="headerlink" title="feat(:sparkles:)"></a>feat(:sparkles:)</h3><blockquote><p>增加新的特征，功能，对应<code>semver minor</code><br>feat(weex): support sending style sheets and class list to native</p></blockquote><h3 id="BREAKING-CHANGE"><a href="#BREAKING-CHANGE" class="headerlink" title="BREAKING CHANGE"></a>BREAKING CHANGE</h3><blockquote><p>内容发生重大改变，对应<code>semver major</code><br>BREAKING CHANGE: environment variables now take precedence over config files</p></blockquote><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><blockquote><p>构建版本<br>build: release 2.5.15</p></blockquote><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><blockquote><p>测试相关<br>test(vdom): add test case for #7786 (#7793)</p></blockquote><h3 id="types"><a href="#types" class="headerlink" title="types"></a>types</h3><blockquote><p>当使用<code>type script</code>的时候，如果修改的内容和types相关。<br>types: add Fragment in RenderState typing (#7802)</p></blockquote><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><blockquote><p>有关工作流的修改<br>workflow: specify e2e env when releasing<br>workflow: remove setup script</p></blockquote><h3 id="chore"><a href="#chore" class="headerlink" title="chore"></a>chore</h3><blockquote><p>一些杂活，比如更新赞助者，重新组织代码贡献者<br>chore: coverage<br>chore: update sponsors<br>chore: re-organize backers.md</p></blockquote><h3 id="refactor"><a href="#refactor" class="headerlink" title="refactor"></a>refactor</h3><blockquote><p>重构代码<br>refactor: observerState</p><p>重构具体的模块<br>refactor(core): remove unnecessary switch case (#5971) </p></blockquote><h3 id="docs-memo"><a href="#docs-memo" class="headerlink" title="docs(:memo:)"></a>docs(:memo:)</h3><blockquote><p>有关文档的修改<br>docs: update Angular’s commit convention link (#7666)</p></blockquote><h3 id="ci"><a href="#ci" class="headerlink" title="ci"></a>ci</h3><blockquote><p>相关工具的修改，比如<code>vue-cli</code><br>ci: use latest version of codecov binary (#7665) </p></blockquote><h3 id="polish"><a href="#polish" class="headerlink" title="polish"></a>polish</h3><blockquote><p>美化代码<br>polish: raise warning when Vue.set/delete is called on invalid values</p></blockquote><h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><blockquote><p>版本回退<br>revert(weex): remove the “receiveTasks” api and support component hook</p></blockquote><h3 id="perf-zap"><a href="#perf-zap" class="headerlink" title="perf(:zap:)"></a>perf(:zap:)</h3><blockquote><p>优化性能<br>perf(v-model): tweak setSelected</p></blockquote><p><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="external">Conventional Changelog Ecosystem</a><br><a href="https://semver.org/#spec-item-9" target="_blank" rel="external">semantic versioning</a><br><a href="https://conventionalcommits.org/" target="_blank" rel="external">git conventional commits</a><br><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="external">git emojis</a></p><h2 id="使用commitlint校验本地提交信息"><a href="#使用commitlint校验本地提交信息" class="headerlink" title="使用commitlint校验本地提交信息"></a>使用<code>commitlint</code>校验本地提交信息</h2><p>安装包<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> i @commitlint/cli @commitlint/config-conventional husky --save-dev</div></pre></td></tr></table></figure></p><p>在项目的根目录下新建<code>commitlint.config.js</code><br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span>.exports = &#123;<span class="keyword">extends</span>: [<span class="string">'@commitlint/config-conventional'</span>]&#125;</div></pre></td></tr></table></figure></p><p>在<code>scripts</code>中添加如下<code>script</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"commitmsg"</span>: <span class="string">"commitlint -e $GIT_PARAMS"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="使用commitizen交互式窗口生成约定的提交信息"><a href="#使用commitizen交互式窗口生成约定的提交信息" class="headerlink" title="使用commitizen交互式窗口生成约定的提交信息"></a>使用<code>commitizen</code>交互式窗口生成约定的提交信息</h2><h3 id="作为项目依赖安装使用"><a href="#作为项目依赖安装使用" class="headerlink" title="作为项目依赖安装使用"></a>作为项目依赖安装使用</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i commitizen cz-conventional-changelog --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure><p>package.json配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"commit"</span>: <span class="string">"git-cz"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"config"</span>: &#123;</div><div class="line">    <span class="attr">"commitizen"</span>: &#123;</div><div class="line">      <span class="attr">"path"</span>: <span class="string">"cz-conventional-changelog"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后每次提交的时候，使用<code>npm run commit</code>代替<code>git commit</code>。</p><h3 id="作为全局安装使用"><a href="#作为全局安装使用" class="headerlink" title="作为全局安装使用"></a>作为全局安装使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g commitizen cz-conventional-changelog</div></pre></td></tr></table></figure><p>创建commitizen配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'&#123; "path": "cz-conventional-changelog" &#125;'</span> &gt; ~/.czrc</div></pre></td></tr></table></figure></p><p>现在每次提交的时候就可以使用<code>git cz</code>代替<code>git commit</code>。<br><code>git cz</code><strong>支持和</strong><code>git commit</code><strong>一样的选项，如：git cz -a</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git日志提交规范&quot;&gt;&lt;a href=&quot;#git日志提交规范&quot; class=&quot;headerlink&quot; title=&quot;git日志提交规范&quot;&gt;&lt;/a&gt;git日志提交规范&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;格式如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figu
      
    
    </summary>
    
      <category term="版本管理" scheme="https://xxxxxmiss.github.io/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="git" scheme="https://xxxxxmiss.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>make</title>
    <link href="https://xxxxxmiss.github.io/2018/03/14/make/"/>
    <id>https://xxxxxmiss.github.io/2018/03/14/make/</id>
    <published>2018-03-14T06:42:07.000Z</published>
    <updated>2018-03-14T06:55:54.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>以点（.）开头并且全部是大写字母的变量，有特殊的意义。</li><li>大小写敏感。</li><li>通过<code>${var}</code>,<code>$(var)</code>来引用一个变量</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;以点（.）开头并且全部是大写字母的变量，有特殊的意义。&lt;/li&gt;
&lt;li&gt;大小写敏感。&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;${v
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell-command</title>
    <link href="https://xxxxxmiss.github.io/2018/03/08/shell-command/"/>
    <id>https://xxxxxmiss.github.io/2018/03/08/shell-command/</id>
    <published>2018-03-07T16:48:17.000Z</published>
    <updated>2018-03-07T17:10:40.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><blockquote><p>查看用户属性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 打印当前用户的uid, 用户名, gid, 组名等相关信息</div><div class="line">$ id</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 打印uid</div><div class="line">$ id -u</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 打印gid</div><div class="line">$ id -g</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 打印用户名</div><div class="line">$ id -un</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 打印组名</div><div class="line">$ id -gn</div></pre></td></tr></table></figure><h2 id="amp-符号"><a href="#amp-符号" class="headerlink" title="&amp;符号"></a>&amp;符号</h2><blockquote><p><code>&amp;</code>是Bash内置的用于并行处理进程的一个控制操作符。在命令行的末尾添加<code>&amp;</code>将会在后台运行该命令，它将在当前的Shell进行下启动一个子Shell进程。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sleep 10 &amp;</div><div class="line"># 输出任务编号和子进程号</div><div class="line">[1] 22525</div></pre></td></tr></table></figure><p>通过<code>jobs</code>命令来查看后台正在运行的任务信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ jobs</div><div class="line">[1]  + running    sleep 10</div></pre></td></tr></table></figure></p><p>通过<code>-l</code>选项可以查看正在后台运行的任务的进程号等信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ jobs -l</div><div class="line">[1]  + 22711 running    sleep 10</div></pre></td></tr></table></figure></p><p>通过<code>%任务编号</code>或者<code>fg 任务编号</code>可以将后台任务切换到前台：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sleep 30 &amp;</div><div class="line">[1] 22711</div><div class="line">$ %1</div></pre></td></tr></table></figure></p><p>通过以下几个步骤可以将任务在前后台间切换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sleep 30 &amp;</div><div class="line">$ %1</div><div class="line">$ CTRL + Z组合键</div><div class="line"># 或者使用bg</div><div class="line">$ %1 &amp;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;id&quot;&gt;&lt;a href=&quot;#id&quot; class=&quot;headerlink&quot; title=&quot;id&quot;&gt;&lt;/a&gt;id&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;查看用户属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://xxxxxmiss.github.io/2018/03/06/docker/"/>
    <id>https://xxxxxmiss.github.io/2018/03/06/docker/</id>
    <published>2018-03-06T15:58:01.000Z</published>
    <updated>2018-03-13T08:46:37.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><blockquote><p>docker是一个开发，运输，运行程序的一个平台。docker将你的程序和基础设施隔离开来，以便于快速的运输，测试，开发。</p></blockquote><h2 id="docker引擎"><a href="#docker引擎" class="headerlink" title="docker引擎"></a>docker引擎</h2><blockquote><p><a href="https://docs.docker.com/engine/docker-overview/#the-docker-platform" target="_blank" rel="external">官方传送门</a></p></blockquote><h2 id="docker架构（体系结构）"><a href="#docker架构（体系结构）" class="headerlink" title="docker架构（体系结构）"></a>docker架构（体系结构）</h2><blockquote><p>使用<code>client-server</code>架构，docker客户端告诉daemon(docker后台常驻进程)去做一个<strong>构建，运行，分发</strong>docker容器。<br>docker客户端和daemon的交流通信使用<code>rest api</code>，基于一个<code>unix socket</code>或者<code>network interface</code>之上。</p></blockquote><h3 id="几个术语（glossary）"><a href="#几个术语（glossary）" class="headerlink" title="几个术语（glossary）"></a>几个术语（glossary）</h3><ul><li><p><code>Docker registries</code>: docker镜像源，docker默认被配置为去<code>docker hub</code>上下载镜像。</p></li><li><p><code>images</code>: 镜像，一个镜像是带有一系列指令的只读的模板(包)，用来创建docker容器。当你创建自己的镜像的时候，你需要在<code>Dockerfile</code>中按照一定的简单的语法去定义一些步骤去创建镜像并运行它。<br>一个镜像包含了运行一个程序所需要的各种依赖（代码，运行时，库，环境变量，配置文件）。<br><code>Dockerfile</code>中的每一条指令都会生成一个<strong>层</strong>。</p></li><li><p><code>containers</code>: 容器，一个容器是一个镜像的可运行的实例。可以通过<code>docker api</code>或则<code>CLI</code>对实例进行<code>CRUD</code>等操作。</p></li><li><p><code>services</code>: 服务，服务允许你跨多个daemon扫描容器，这些daemon相互协作称之为一个集群（swarm）。</p></li></ul><h2 id="docker基本开发环境搭建"><a href="#docker基本开发环境搭建" class="headerlink" title="docker基本开发环境搭建"></a>docker基本开发环境搭建</h2><h3 id="容器（containers）"><a href="#容器（containers）" class="headerlink" title="容器（containers）"></a>容器（containers）</h3><ul><li>使用<code>Dockerfile</code>定义容器</li></ul><p>Dockerfile<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Use an official Python runtime as a parent image</span></div><div class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span>-slim</div><div class="line"></div><div class="line"><span class="comment"># Set the working directory to /app</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></div><div class="line"></div><div class="line"><span class="comment"># Copy the current directory contents into the container at /app</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></div><div class="line"></div><div class="line"><span class="comment"># Install any needed packages specified in requirements.txt</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> pip install --trusted-host pypi.python.org -r requirements.txt</span></div><div class="line"></div><div class="line"><span class="comment"># Make port 80 available to the world outside this container</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"></div><div class="line"><span class="comment"># Define environment variable</span></div><div class="line"><span class="keyword">ENV</span> NAME World</div><div class="line"></div><div class="line"><span class="comment"># Run app.py when the container launches</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span></div></pre></td></tr></table></figure></p><p>app.py<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">from flask <span class="built_in">import</span> Flask</div><div class="line">from redis <span class="built_in">import</span> Redis, RedisError</div><div class="line"><span class="built_in">import</span> os</div><div class="line"><span class="built_in">import</span> socket</div><div class="line"></div><div class="line"><span class="comment"># Connect to Redis</span></div><div class="line"><span class="attr">redis</span> = Redis(<span class="attr">host="redis",</span> <span class="attr">db=0,</span> <span class="attr">socket_connect_timeout=2,</span> <span class="attr">socket_timeout=2)</span></div><div class="line"></div><div class="line"><span class="attr">app</span> = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(<span class="string">"/"</span>)</div><div class="line">def hello():</div><div class="line">    try:</div><div class="line">        <span class="attr">visits</span> = redis.incr(<span class="string">"counter"</span>)</div><div class="line">    except RedisError:</div><div class="line">        <span class="attr">visits</span> = <span class="string">"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;"</span></div><div class="line"></div><div class="line">    <span class="attr">html</span> = <span class="string">"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;"</span> \</div><div class="line">           <span class="string">"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;"</span> \</div><div class="line">           <span class="string">"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;"</span></div><div class="line">    return html.format(<span class="attr">name=os.getenv("NAME",</span> <span class="string">"world"</span>), <span class="attr">hostname=socket.gethostname(),</span> <span class="attr">visits=visits)</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == <span class="string">"__main__"</span>:</div><div class="line">    app.run(<span class="attr">host='0.0.0.0',</span> <span class="attr">port=80)</span></div></pre></td></tr></table></figure></p><ul><li>构建docker镜像</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">build </span>-t friendlyhello .</div></pre></td></tr></table></figure><ul><li>查看上一步构建的镜像</li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">image</span> <span class="keyword">ls</span></div></pre></td></tr></table></figure><ul><li>运行app</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> -p 4000:80 friendlyhello</span></div></pre></td></tr></table></figure><ul><li><p>查看app.py的输出<br>在浏览器访问<code>http://localhost:4000</code>或者<br>在终端使用curl查看：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> curl http:<span class="comment">//localhost:4000</span></div></pre></td></tr></table></figure></li><li><p>查看运行中的容器</p></li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">container</span> <span class="keyword">ls</span></div></pre></td></tr></table></figure><ul><li>停止运行一个容器</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker container <span class="keyword">stop</span> <span class="symbol">&lt;IMAGE_ID&gt;</span></div></pre></td></tr></table></figure><h3 id="服务（services）"><a href="#服务（services）" class="headerlink" title="服务（services）"></a>服务（services）</h3><blockquote><p>一个服务只会运行一个镜像，但是它定义了镜像运行的法规：比如该使用什么端口，产生多少个容器的复制品。<br>关于服务的概念比较的抽象，可以查看<a href="https://docs.docker.com/get-started/part3/#about-services" target="_blank" rel="external">官方例子对于服务的解释</a></p></blockquote><p>task:</p><blockquote><p>一个service中运行的一个容器叫做task。task被给予一个自增的id,增加到<code>replicas</code>的数量位置。<br>查看service中的tasks</p><p>一个<code>docker-compose.yml</code>文件定义了docker容器在产品模式下应该具有的行为。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">version</span>: <span class="string">"3"</span></div><div class="line"><span class="attribute">services</span>:</div><div class="line">  <span class="attribute">web</span>:</div><div class="line">    # replace username/<span class="attribute">repo</span>:tag with your name and image details</div><div class="line">    <span class="attribute">image</span>: username/<span class="attribute">repo</span>:tag</div><div class="line">    <span class="attribute">deploy</span>:</div><div class="line">      <span class="attribute">replicas</span>: <span class="number">5</span></div><div class="line">      <span class="attribute">resources</span>:</div><div class="line">        <span class="attribute">limits</span>:</div><div class="line">          <span class="attribute">cpus</span>: <span class="string">"0.1"</span></div><div class="line">          <span class="attribute">memory</span>: <span class="number">50</span>M</div><div class="line">      <span class="attribute">restart_policy</span>:</div><div class="line">        <span class="attribute">condition</span>: on-failure</div><div class="line">    <span class="attribute">ports</span>:</div><div class="line">      - <span class="string">"80:80"</span></div><div class="line">    <span class="attribute">networks</span>:</div><div class="line">      - webnet</div><div class="line"><span class="attribute">networks</span>:</div><div class="line">  <span class="attribute">webnet</span>:</div></pre></td></tr></table></figure><p>运行我们的服务：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker stack deploy -c docker-compose<span class="selector-class">.yml</span> getstartedlab</div></pre></td></tr></table></figure><p>在使用上面的命令来启动一个服务的时候，必须先设置一个<code>swarm manager</code>（集群leader）, 不然会抛出一个错误提示。后面解释为什么要这样做：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker swarm init</div></pre></td></tr></table></figure></p><p>查看启动的服务：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker service ls</div><div class="line"><span class="meta"># 通过该命令查看，可以看出该服务的名称为 getstartedlab_web</span></div><div class="line"><span class="meta"># getstartedlab是你在上一个命令中定义的app的名称</span></div><div class="line"><span class="meta"># web是你在docker-compose.yaml中定义的服务名称</span></div></pre></td></tr></table></figure></p><p>列出一个服务中有多少个任务：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker</span> service ps getstartedlab_web</div></pre></td></tr></table></figure></p><p>请求服务：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="number">-4</span> http:<span class="comment">//localhost</span></div><div class="line"><span class="meta"># 或者在浏览器中打开并刷新几次，可以看到Hostname在改变</span></div></pre></td></tr></table></figure></p><p>扫描app: 可以改变<code>docker-compose.yml</code>中的相关配置，然后重新运行发布命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker stack deploy -c docker-compose<span class="selector-class">.yml</span> getstartedlab</div></pre></td></tr></table></figure></p><p>拆卸app和swarm</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>docker stack rm getstartedlab</div><div class="line"><span class="variable">$ </span>docker swarm leave --force</div></pre></td></tr></table></figure><h3 id="Stacks-栈"><a href="#Stacks-栈" class="headerlink" title="Stacks(栈)"></a>Stacks(栈)</h3><blockquote><p>栈是一组相互关联的服务，这些服务可以共享依赖关系,被组织和缩放。一个栈有着定义和协调整个应用的能力。</p></blockquote><h2 id="Dockerfile常用指令（选项）"><a href="#Dockerfile常用指令（选项）" class="headerlink" title="Dockerfile常用指令（选项）"></a>Dockerfile常用指令（选项）</h2><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="external">官方传送门</a></p><blockquote><p><code>Dockerfile</code>中的指令大小写不敏感，但是按照约定都使用大写，以便于和指定的参数区分。<br><code>Dockerfile</code>中的指令按顺序一条一条的执行，并且<code>Dockerfile</code>文件必须以<code>FROM</code>开始</p></blockquote><h3 id="构建上下文context"><a href="#构建上下文context" class="headerlink" title="构建上下文context"></a>构建上下文context</h3><blockquote><p><code>docker build</code>命令基于<code>Dockerfile</code>文件和<code>context</code>构建镜像。<br><code>context</code>是一个<code>PATH</code>或则<code>URL</code>指定的文件集合。<br><code>PATH</code>是一个本地文件系统的一个目录，<code>URL</code>是一个git仓库。</p></blockquote><h3 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a><code>.dockerignore</code></h3><blockquote><p>为了增加构建的性能，可以将不需要的文件添加到<code>.dockerignore</code></p></blockquote><p>一般情况下，<code>Dockerfile</code>放置在<code>context</code>的根目录下，可以使用<code>-f</code>选项指定<code>Dockerfile</code>文件的位置：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">build</span> -f /<span class="keyword">path</span>/<span class="keyword">to</span>/a/Dockerfile .</div></pre></td></tr></table></figure></p><p>可以为一个镜像指定多个仓库标签:<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">build </span>-t <span class="keyword">shykes/myapp:1.0.2 </span>-t <span class="keyword">shykes/myapp:latest </span>.</div></pre></td></tr></table></figure></p><h3 id="解析器指令（parser-directives）"><a href="#解析器指令（parser-directives）" class="headerlink" title="解析器指令（parser directives）"></a>解析器指令（parser directives）</h3><blockquote><p><code>Dockerfile</code>中的注释已<code>#</code>开头，但是解析器指令时一种特殊的注释，必须出现在<code>Dockerfile</code>中的开头部分。<br>语法：# directive=value</p></blockquote><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><blockquote><p>初始化一个新的构建时期，为接下来的指令设置一个<a href="https://docs.docker.com/glossary/" target="_blank" rel="external">基本镜像</a>。<br>常用的3种形式：</p></blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> &lt;<span class="built_in">image</span>&gt; [AS &lt;<span class="built_in">name</span>&gt;]</div><div class="line"><span class="keyword">FROM</span> &lt;<span class="built_in">image</span>&gt;[:&lt;tag&gt;] [AS &lt;<span class="built_in">name</span>&gt;]</div><div class="line"><span class="keyword">FROM</span> &lt;<span class="built_in">image</span>&gt;[@&lt;digest&gt;] [AS &lt;<span class="built_in">name</span>&gt;]</div></pre></td></tr></table></figure><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><blockquote><p>在当前镜像的顶部新的层里运行任何指令，并将结果提交到下一步中。<br>层运行指令并且生成提交信息符合<code>Docker</code>的核心概念：这个提交是非常便宜的，容器可以基于一个镜像的任何历史点创建。<br>2种使用形式：shell形式和exec形式</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">RUN</span><span class="bash"> /bin/bash -c <span class="string">'source $HOME/.bashrc; \</span></span></div><div class="line">echo $HOME'</div><div class="line"><span class="comment"># exec形式必须使用双引号（""）</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"echo hello"</span>]</span></div></pre></td></tr></table></figure><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><blockquote><p>一个<code>Dockerfile</code>中只能出现一个<code>CMD</code>,如果出现了多个，那么只有最后一个起作用。<br>3种使用形式：</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># exec形式，最受欢迎的形式</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span></div><div class="line"></div><div class="line"><span class="comment"># 作为默认值传递到 entrypoint</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span></div><div class="line"></div><div class="line"><span class="comment"># shell形式</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></div></pre></td></tr></table></figure><h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><blockquote><p>为镜像添加一些元数据，可以使用<code>docker inspect</code>查看label的值。使用形式:</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LABEL <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> ...</div></pre></td></tr></table></figure><p>一些常用情况的例子<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">"com.example.vendor"</span>=<span class="string">"ACME Incorporated"</span></span></div><div class="line"><span class="keyword">LABEL</span><span class="bash"> com.example.label-with-value=<span class="string">"foo"</span></span></div><div class="line"><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">"1.0"</span></span></div><div class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"This text illustrates \</span></span></div><div class="line">that label-values can span multiple lines."</div></pre></td></tr></table></figure></p><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a><del>MAINTAINER</del></h3><blockquote><p>已过期，使用<code>LABEL</code>代替。</p></blockquote><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><blockquote><p>指定docker容器在运行的时候监听那个网络端口，可以指定使用TCP还是DUP。如果没有指定协议，默认使用TCP。使用形式：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXPOSE <span class="tag">&lt;<span class="name">port</span>&gt;</span> [<span class="tag">&lt;<span class="name">port</span>&gt;</span>/<span class="tag">&lt;<span class="name">protocol</span>&gt;</span>...]</div></pre></td></tr></table></figure><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><blockquote><p>可以使用<code>docker inspect</code>查看它的值，<br>可以使用<code>docker run --env &lt;key&gt;=&lt;value&gt;</code>改变值。<br>环境变量持久化可能会带来一些副作用，所以可以通过<code>RUN &lt;key&gt;=&lt;value&gt; &lt;command&gt;</code>来设置单个指令变量。<br>使用形式：</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 设置单个值的形式，key后面的第一个空格后面的所有字符（包括空格，引号等）都被设置为&lt;value&gt;</span></div><div class="line">ENV <span class="params">&lt;key&gt;</span> <span class="params">&lt;value&gt;</span></div><div class="line"></div><div class="line"><span class="meta"># 可以设置多个值</span></div><div class="line">ENV <span class="params">&lt;key&gt;</span>=<span class="params">&lt;value&gt;</span> ...</div></pre></td></tr></table></figure><p>如：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ENV myName=<span class="string">"John Doe"</span> myDog=Rex<span class="string">\</span> The<span class="string">\</span> Dog <span class="string">\</span></div><div class="line">    myCat=fluffy</div></pre></td></tr></table></figure><p>等价于<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> myname John Doe</div><div class="line"><span class="keyword">ENV</span> myDog Rex The Dog</div><div class="line"><span class="keyword">ENV</span> myCat fluffy</div></pre></td></tr></table></figure></p><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><blockquote><p>该指令将<code>src</code>中的文件，文件夹或者远程文件拷贝到镜像所在的文件系统的<code>dest</code>目录。<br><code>src</code>中的路径被解析为相对于构建上下文<code>context</code>的路径，路径中可包含通配符。<br><code>dest</code>路径必须是一个绝对路径或者相对于<code>WORKDIR</code>的路径。<br>使用形式：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ADD [--chown=<span class="tag">&lt;<span class="name">user</span>&gt;</span>:<span class="tag">&lt;<span class="name">group</span>&gt;</span>] <span class="tag">&lt;<span class="name">src</span>&gt;</span>... <span class="tag">&lt;<span class="name">dest</span>&gt;</span></div><div class="line">ADD [--chown=<span class="tag">&lt;<span class="name">user</span>&gt;</span>:<span class="tag">&lt;<span class="name">group</span>&gt;</span>] ["<span class="tag">&lt;<span class="name">src</span>&gt;</span>",... "<span class="tag">&lt;<span class="name">dest</span>&gt;</span>"]</div></pre></td></tr></table></figure><p>关于该指令的详细说明，请参看<a href="https://docs.docker.com/engine/reference/builder/#add" target="_blank" rel="external">官方文旦</a></p><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><blockquote><p>该指令和<code>ADD</code>指令类似。区别是<code>ADD</code>支持<code>src</code>是一个<code>URL</code>，而<code>COPY</code>不支持。</p></blockquote><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><blockquote><p>2种使用形式：shell形式和exec形式</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>] (<span class="built_in">exec</span> form, preferred)</span></div><div class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></div></pre></td></tr></table></figure><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><blockquote><p>用指定的名称创建一个挂载点。使用形式：</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/var/log/"</span>]</span></div><div class="line"><span class="keyword">VOLUME</span><span class="bash"> /var/<span class="built_in">log</span> /var/db</span></div></pre></td></tr></table></figure><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><blockquote><p>设置docker镜像跑在哪个用户或者用户ID下，也可以设置一个可选的组或者组ID下。<br>如果没有设置组，默认使用<code>root</code>组。<br>其他的指令<code>RUN, CMD, ENTRYPOINT</code>也遵守这一规则。</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USER</span> <span class="title">&lt;user</span>&gt;[:<span class="tag">&lt;group&gt;</span>]</div><div class="line"><span class="keyword">USER</span> <span class="title">&lt;UID</span>&gt;[:<span class="tag">&lt;GID&gt;</span>]</div></pre></td></tr></table></figure><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><blockquote><p>为<code>Dockerfile</code>中的<code>RUN, CMD, ENTRYPOINT, ADD, COPY</code>指令提供工作目录。<br><code>WORKDIR</code>可以在<code>Dockerfile</code>中出现多次，那么后面的路径时相对于前面的。</p></blockquote><p>TODO: 类似于nodejs中的resolve方法？解析到一个绝对路径为止？</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /a</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> b</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> c</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">pwd</span></span></div><div class="line">=&gt; /a/b/c</div></pre></td></tr></table></figure><blockquote><p><code>WORKDIR</code>可以使用<code>Dockerfile</code>中已经定义的环境变量。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> DIRPATH /path</div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$DIRPATH</span>/<span class="variable">$DIRNAME</span></span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">pwd</span></span></div><div class="line">=&gt; /path/$DIRNAME</div></pre></td></tr></table></figure><h2 id="compose文件结构"><a href="#compose文件结构" class="headerlink" title="compose文件结构"></a><code>compose</code>文件结构</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">    webapp:</span></div><div class="line">        <span class="comment"># 引用顶层的networks</span></div><div class="line"><span class="attr">        networks:</span></div><div class="line"><span class="bullet">            -</span> <span class="string">some-network</span></div><div class="line"><span class="bullet">            -</span> <span class="string">other-network</span></div><div class="line"><span class="attr">        depends_on:</span></div><div class="line"><span class="bullet">          -</span> <span class="string">db</span></div><div class="line"><span class="bullet">          -</span> <span class="string">redis</span></div><div class="line"><span class="attr">        build:</span></div><div class="line">            <span class="comment"># 包含Dockerfile的目录或者一个git仓库</span></div><div class="line">            <span class="comment"># 如果是一个相对路径，那么是相对于compose file文件的路径</span></div><div class="line"><span class="attr">            context:</span> <span class="string">'./dir'</span></div><div class="line"><span class="attr">            dockerfile:</span> <span class="string">Dockerfile-alternate</span></div><div class="line">            <span class="comment"># 既可以是一个对象，也可以是一个数组</span></div><div class="line">            <span class="comment"># 该选项指定在Dockerfile ARG选项中定义的参数</span></div><div class="line">            <span class="comment"># 第一种使用形式</span></div><div class="line"><span class="attr">            args:</span></div><div class="line"><span class="bullet">                -</span> <span class="string">buildno=1</span></div><div class="line"><span class="bullet">                -</span> <span class="string">password=secret</span></div><div class="line">            <span class="comment"># 第二种使用形式</span></div><div class="line"><span class="attr">            args:</span></div><div class="line"><span class="attr">                buildno:</span> <span class="number">1</span></div><div class="line">            <span class="comment"># 一个镜像列表指定docker引擎使用的缓存</span></div><div class="line"><span class="attr">            cache_form:</span></div><div class="line"><span class="attr">                - alpine:</span><span class="string">latest</span></div><div class="line"><span class="bullet">                -</span> <span class="string">corp/web_app:3.14</span></div><div class="line">            <span class="comment"># 添加元数据到结果镜像中</span></div><div class="line">            <span class="comment"># 第一种使用形式</span></div><div class="line"><span class="attr">            labels:</span></div><div class="line">                <span class="comment"># 推荐使用reverse-DNS命名规则，避免和其他软件使用的标签冲突</span></div><div class="line">                <span class="string">com.example.description:</span> <span class="string">"Accounting webapp"</span></div><div class="line">                <span class="string">com.example.department:</span> <span class="string">"Finance"</span></div><div class="line">                <span class="string">com.example.label-with-empty-value:</span> <span class="string">""</span></div><div class="line">            <span class="comment"># 第二种使用形式</span></div><div class="line"><span class="attr">            labels:</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"com.example.description=Accounting webapp"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"com.example.department=Finance"</span></div><div class="line"><span class="bullet">                -</span> <span class="string">"com.example.label-with-empty-value"</span></div><div class="line">            <span class="comment"># 为构建的容器设置/dev/shm设置大小</span></div><div class="line"><span class="attr">            shm_size:</span></div><div class="line"><span class="attr">                shm_size:</span> <span class="string">'2gb'</span></div><div class="line">                <span class="comment"># 第二种使用形式，单位为byte</span></div><div class="line"><span class="attr">                shm_size:</span> <span class="number">10000000</span></div><div class="line">            <span class="comment"># 构建在Dockerfile中指定的时期</span></div><div class="line"><span class="attr">            target:</span> <span class="string">prod</span></div><div class="line">        <span class="comment"># 为服务指定部署和运行时的相关配置</span></div><div class="line"><span class="attr">        deploy:</span></div><div class="line"><span class="attr">            update_config:</span></div><div class="line">                <span class="comment"># 同一时间更新容器的数量</span></div><div class="line"><span class="attr">                parallelism:</span> <span class="number">2</span></div><div class="line"><span class="attr">                delay:</span> <span class="number">10</span><span class="string">s</span></div><div class="line">                <span class="comment"># 默认值stop-first，start-first</span></div><div class="line"><span class="attr">                order:</span> <span class="string">stop-first</span></div><div class="line">                <span class="comment"># 当一个更新失败的时候后续的动作</span></div><div class="line">                <span class="comment"># 默认值pause, continue, rollback</span></div><div class="line"><span class="attr">                failure_action:</span> <span class="string">continue</span></div><div class="line">                <span class="comment"># 配置在一个更新期间所能容忍的失败率</span></div><div class="line"><span class="attr">                max_failure_ratio:</span> <span class="string">'0.20'</span></div><div class="line">            <span class="comment"># 重启策略</span></div><div class="line"><span class="attr">            restart_policy:</span></div><div class="line">                <span class="comment"># any(默认值), none, on-failure</span></div><div class="line"><span class="attr">                condition:</span> <span class="string">on-failure</span></div><div class="line">                <span class="comment"># 重启时间间隔, 默认值0</span></div><div class="line"><span class="attr">                delay:</span> <span class="number">5</span><span class="string">s</span></div><div class="line"><span class="attr">                max_attempts:</span> <span class="number">3</span></div><div class="line"><span class="attr">                window:</span> <span class="number">120</span><span class="string">s</span></div><div class="line">            <span class="comment"># 只为这个服务设定标签</span></div><div class="line"><span class="attr">            labels:</span></div><div class="line">                <span class="string">com.example.description:</span> <span class="string">"This label will appear on the web service"</span></div><div class="line">            <span class="comment"># 默认值replicated</span></div><div class="line"><span class="attr">            mode:</span> <span class="string">global</span></div><div class="line">            <span class="comment"># 如果mode被设置为replicated,那么可以通过replicas来指定容器复制数量</span></div><div class="line"><span class="attr">            replicas:</span> <span class="number">6</span></div><div class="line"><span class="attr">            placement:</span></div><div class="line"><span class="attr">                constraints:</span></div><div class="line"><span class="bullet">                  -</span> <span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span></div><div class="line"><span class="bullet">                  -</span> <span class="string">engine.labels.operatingsystem</span> <span class="string">==</span> <span class="string">ubuntu</span> <span class="number">14.04</span></div><div class="line"><span class="attr">                preferences:</span></div><div class="line"><span class="attr">                  - spread:</span> <span class="string">node.labels.zone</span></div><div class="line">            <span class="comment"># 配置资源约束</span></div><div class="line"><span class="attr">            resources:</span></div><div class="line"><span class="attr">                limits:</span></div><div class="line"><span class="attr">                  cpus:</span> <span class="string">'0.50'</span></div><div class="line"><span class="attr">                  memory:</span> <span class="number">50</span><span class="string">M</span></div><div class="line"><span class="attr">                reservations:</span></div><div class="line"><span class="attr">                  cpus:</span> <span class="string">'0.25'</span></div><div class="line"><span class="attr">                  memory:</span> <span class="number">20</span><span class="string">M</span></div><div class="line"><span class="comment"># 增加或者移除容器的能力</span></div><div class="line"><span class="attr">cap_add:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">ALL</span></div><div class="line"><span class="attr">cap_drop:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">NET_ADMIN</span></div><div class="line"><span class="bullet">  -</span> <span class="string">SYS_ADMIN</span></div><div class="line"><span class="comment"># 重写默认的命令</span></div><div class="line"><span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thin</span> <span class="bullet">-p</span> <span class="number">3000</span></div><div class="line"><span class="attr">configs:</span></div><div class="line"><span class="comment"># 为容器指定一个父组</span></div><div class="line"><span class="attr">cgroup_parent:</span> <span class="string">m-executor-abcd</span></div><div class="line"><span class="comment"># 为容器指定自定义名称，docker容器名称必须唯一</span></div><div class="line"><span class="attr">container_name:</span> <span class="string">my-web-container</span></div><div class="line"><span class="comment"># 定义设备映射</span></div><div class="line"><span class="attr">devices:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">"/dev/ttyUSB0:/dev/ttyUSB0"</span></div><div class="line"><span class="comment"># 自定义dns服务</span></div><div class="line"><span class="attr">dns:</span></div><div class="line"><span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></div><div class="line"><span class="bullet">-</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span></div><div class="line"><span class="comment"># 可以是单个值</span></div><div class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></div><div class="line"><span class="comment"># 自定义dns搜索域</span></div><div class="line"><span class="attr">dns_search:</span> <span class="string">example.com</span></div><div class="line"><span class="attr">dns_search:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">dc1.example.com</span></div><div class="line"><span class="bullet">  -</span> <span class="string">dc2.example.com</span></div><div class="line"><span class="comment"># 在容器内部临时挂载一个文件系统</span></div><div class="line"><span class="attr">tmpfs:</span> <span class="string">/run</span></div><div class="line"><span class="attr">tmpfs:</span></div><div class="line"><span class="bullet">-</span> <span class="string">/run</span></div><div class="line"><span class="bullet">-</span> <span class="string">/tmp</span></div><div class="line"><span class="comment"># 重写默认的entrypoint</span></div><div class="line"><span class="attr">entrypoint:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">php</span></div><div class="line"><span class="bullet">    -</span> <span class="bullet">-d</span></div><div class="line"><span class="bullet">    -</span> <span class="string">zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so</span></div><div class="line"><span class="bullet">    -</span> <span class="bullet">-d</span></div><div class="line"><span class="bullet">    -</span> <span class="string">memory_limit=-1</span></div><div class="line"><span class="bullet">    -</span> <span class="string">vendor/bin/phpunit</span></div><div class="line"><span class="comment"># 增加环境变量来自一个文件</span></div><div class="line"><span class="attr">env_file:</span> <span class="string">.env</span></div><div class="line"><span class="attr">env_file:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">./common.env</span></div><div class="line"><span class="bullet">  -</span> <span class="string">./apps/web.env</span></div><div class="line"><span class="bullet">  -</span> <span class="string">/opt/secrets.env</span></div><div class="line"><span class="string">networks</span></div><div class="line"><span class="string">volumes</span></div></pre></td></tr></table></figure><h2 id="网络（network）"><a href="#网络（network）" class="headerlink" title="网络（network）"></a>网络（network）</h2><h3 id="桥接网络（bridge-networks）"><a href="#桥接网络（bridge-networks）" class="headerlink" title="桥接网络（bridge networks）"></a>桥接网络（bridge networks）</h3><blockquote><p>一个桥接可以是一个硬件设备或者是运行在一个主机内核中的软件。</p></blockquote><p>用户自定义桥接网路的好处：</p><ol><li>提供更好的隔离和互通性。</li><li>在容器间提供自动化<code>DNS</code>解析。</li><li>随时绑定或者解绑一个容器到自定义网络。</li><li>每个用户自定义网络可以创建一个可配置的网络。</li></ol><p>创建用户自定义的网络：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker network create <span class="keyword">my</span>-net</div></pre></td></tr></table></figure></p><p>移除一个自定义网络：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker network <span class="keyword">rm</span> my-<span class="keyword">net</span></div></pre></td></tr></table></figure></p><p>如果一个容器当前正在使用这个网络，那么必须选断开：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker network disconnect <span class="keyword">my</span>-net <span class="keyword">my</span>-nginx</div></pre></td></tr></table></figure></p><h2 id="宗卷（Volumes）"><a href="#宗卷（Volumes）" class="headerlink" title="宗卷（Volumes）"></a>宗卷（Volumes）</h2><blockquote><p>docker中挂载数据的3种方式：</p></blockquote><ul><li>bind mount：利用机器的文件系统。</li><li>volumes：在文件系统中开辟一块区域来持久化数据，专门由docker管理。</li><li>tmpfs： 在内存中挂载数据，并不能持久化，当容器停止，数据丢失。</li></ul><p>关于以上3种的数据挂载方式，具体的介绍查<a href="https://docs.docker.com/storage/#choose-the-right-type-of-mount" target="_blank" rel="external">看官方文档</a></p><p>最推荐的方式是使用Volumes（实际还是视具体情况而定），此处只讲Volumes。</p><p>创建Volumes:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">volume</span><span class="bash"> create my-vol</span></div></pre></td></tr></table></figure><p>列出所有的Volumes:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">volume</span><span class="bash"> ls</span></div></pre></td></tr></table></figure><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><ol><li><a href="https://cloud.docker.com/" target="_blank" rel="external">创建docker仓库</a></li></ol><blockquote><p>在<code>docker cloud</code>上只能免费创建一个私有仓库，无限制多个公有仓库。</p></blockquote><ol><li>创建镜像</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker build -t username/<span class="keyword">tag</span> <span class="title">.</span></div></pre></td></tr></table></figure><ol><li>登录</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">docker login</span></div></pre></td></tr></table></figure><ol><li>推送镜像</li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">push</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;docker简介&quot;&gt;&lt;a href=&quot;#docker简介&quot; class=&quot;headerlink&quot; title=&quot;docker简介&quot;&gt;&lt;/a&gt;docker简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;docker是一个开发，运输，运行程序的一个平台。docker将你
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DOM元素的坐标，大小相关API梳理</title>
    <link href="https://xxxxxmiss.github.io/2018/01/07/element-coordinate/"/>
    <id>https://xxxxxmiss.github.io/2018/01/07/element-coordinate/</id>
    <published>2018-01-07T14:47:43.000Z</published>
    <updated>2018-01-07T17:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect()"></a>getBoundingClientRect()</h2><blockquote><p>该API返回元素的大小及其相对于视口的位置。<br>需要注意的是：不论该元素是普通的元素，还是相对定位、绝对定位，还是fixed定位，亦或被定位（相对，绝对，fixed）元素包裹的元素，返回的对象中坐标(x,y)，top,left都是相对于视口的坐标。<br>如果该元素是可以滚动或者滑动的，那么坐标会立即改变的。<br>如果需要得到文档坐标，可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="external">参看这里</a></p></blockquote><p>Note: 该API返回的对象包含如下几个属性，并且这些属性的值可以包含浮点数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;   <span class="attr">top</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">right</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">bottom</span>: <span class="string">''</span></div><div class="line">    left: <span class="string">''</span>,</div><div class="line">    <span class="attr">width</span>: <span class="string">''</span>, <span class="comment">// 该width是content+padding+border的宽度</span></div><div class="line">    height: <span class="string">''</span>,</div><div class="line">    <span class="attr">x</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">y</span>: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>以下的这些API返回的都是整数的像素值，不带单位的</p><h2 id="clientWidth"><a href="#clientWidth" class="headerlink" title="clientWidth"></a>clientWidth</h2><blockquote><p>只读属性，返回一个<code>block</code>或者<code>inline-block</code>元素的<code>content + padding</code>的像素值。<br>如果有滚动条存在，那么<code>clientWidth = content + padding - 垂直滚动条的宽度</code></p></blockquote><h2 id="clientLeft"><a href="#clientLeft" class="headerlink" title="clientLeft"></a>clientLeft</h2><blockquote><p>只读属性，返回一个<code>block</code>或者<code>inline-block</code>元素的边框的宽度（border-width）的像素值。<br>如果有滚动条存在，那么该宽度是包含滚动条在内的宽度。</p></blockquote><h2 id="scrollHeight"><a href="#scrollHeight" class="headerlink" title="scrollHeight"></a>scrollHeight</h2><blockquote><p>只读属性，包括元素的整个高度（溢出导致在视野之外的部分）<br>这个整个高度也是<code>content + padding</code>的高度，不包括<code>border</code>和<code>margin</code>的高度。</p></blockquote><h2 id="scrollTop"><a href="#scrollTop" class="headerlink" title="scrollTop"></a>scrollTop</h2><blockquote><p>读取或者设置垂直滚动条的高度</p></blockquote><h2 id="offsetHeight"><a href="#offsetHeight" class="headerlink" title="offsetHeight"></a>offsetHeight</h2><blockquote><p>该属性返回一个元素的<code>content + padding + border + 滚动条（如果有）</code>的高度，不论该元素是<code>inline</code>还是<code>block</code>类型的元素。</p></blockquote><h2 id="offsetLeft"><a href="#offsetLeft" class="headerlink" title="offsetLeft"></a>offsetLeft</h2><blockquote><p>只读属性，返回当前元素左上角相对于<code>offsetParent</code>节点的左边界偏移的像素值。<br>详细信息可<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetLeft" target="_blank" rel="external">参看这里</a></p></blockquote><h2 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h2><blockquote><p>只读属性，返回一个<strong>最近的</strong>的包含该元素的定位元素。如果没有定位元素，那么<code>offsetParent</code>为<strong>最近的</strong><code>table</code>,<code>table cell</code>或者根元素<code>html</code>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;getBoundingClientRect&quot;&gt;&lt;a href=&quot;#getBoundingClientRect&quot; class=&quot;headerlink&quot; title=&quot;getBoundingClientRect()&quot;&gt;&lt;/a&gt;getBoundingClientRect
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="dom" scheme="https://xxxxxmiss.github.io/tags/dom/"/>
    
  </entry>
  
  <entry>
    <title>parclejs</title>
    <link href="https://xxxxxmiss.github.io/2017/12/12/parclejs/"/>
    <id>https://xxxxxmiss.github.io/2017/12/12/parclejs/</id>
    <published>2017-12-11T16:36:15.000Z</published>
    <updated>2017-12-11T17:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心依赖库"><a href="#核心依赖库" class="headerlink" title="核心依赖库"></a>核心依赖库</h2><ul><li><a href="https://github.com/babel/babel/tree/master/packages/babylon" target="_blank" rel="external">babylon</a></li><li><a href="https://github.com/defunctzombie/node-browser-resolve" target="_blank" rel="external">browser-resolve</a></li><li><a href="https://github.com/webpack/node-libs-browser" target="_blank" rel="external">node-libs-browser</a></li><li><a href="https://github.com/pugjs/babylon-walk" target="_blank" rel="external">babylon-walk</a></li><li><a href="https://github.com/thejameskyle/babel-types" target="_blank" rel="external">babel-types</a></li><li><a href="https://github.com/rvagg/node-worker-farm" target="_blank" rel="external">worker-farm</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;核心依赖库&quot;&gt;&lt;a href=&quot;#核心依赖库&quot; class=&quot;headerlink&quot; title=&quot;核心依赖库&quot;&gt;&lt;/a&gt;核心依赖库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/babel/babel/tree/master/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-ssr</title>
    <link href="https://xxxxxmiss.github.io/2017/12/04/vue-ssr/"/>
    <id>https://xxxxxmiss.github.io/2017/12/04/vue-ssr/</id>
    <published>2017-12-04T07:20:00.000Z</published>
    <updated>2017-12-25T03:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合jsx"><a href="#整合jsx" class="headerlink" title="整合jsx"></a>整合jsx</h2><h3 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h3><ul><li>babel-plugin-syntax-jsx</li><li>babel-plugin-transform-runtime</li><li>babel-plugin-transform-vue-jsx</li></ul><h3 id="nuxt-config-js"><a href="#nuxt-config-js" class="headerlink" title="nuxt.config.js"></a>nuxt.config.js</h3><blockquote><p>在<code>build</code>配置项中增加如下配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">build: &#123;</div><div class="line">    <span class="attr">babel</span>: &#123;</div><div class="line">      <span class="string">"presets"</span>: [</div><div class="line">        [<span class="string">"env"</span>, &#123;</div><div class="line">          <span class="string">"modules"</span>: <span class="literal">false</span></div><div class="line">        &#125;],</div><div class="line">        <span class="string">"stage-2"</span>, <span class="comment">// 为了使用对象的延展语法</span></div><div class="line">        <span class="string">"flow"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>, <span class="string">"transform-vue-jsx"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="如果只是使用客户端渲染，在-eslintrc中配置"><a href="#如果只是使用客户端渲染，在-eslintrc中配置" class="headerlink" title="如果只是使用客户端渲染，在.eslintrc中配置"></a>如果只是使用客户端渲染，在.eslintrc中配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [</div><div class="line">    [<span class="string">"env"</span>, &#123;</div><div class="line">      <span class="attr">"modules"</span>: <span class="literal">false</span></div><div class="line">    &#125;],</div><div class="line">    <span class="string">"stage-2"</span>, // 为了使用对象的延展语法</div><div class="line">    <span class="string">"flow"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-runtime"</span>, <span class="string">"transform-vue-jsx"</span>]  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="整合flow"><a href="#整合flow" class="headerlink" title="整合flow"></a>整合flow</h2><h3 id="依赖包-1"><a href="#依赖包-1" class="headerlink" title="依赖包"></a>依赖包</h3><ul><li>babel-preset-flow</li><li>eslint-plugin-flowtype</li></ul><h3 id="eslintrc-js配置"><a href="#eslintrc-js配置" class="headerlink" title=".eslintrc.js配置"></a>.eslintrc.js配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  <span class="string">'html'</span>,</div><div class="line">  <span class="string">'flowtype'</span></div><div class="line">],</div><div class="line"><span class="string">'extends'</span>: [</div><div class="line">    <span class="string">'standard'</span>,</div><div class="line">    <span class="string">'plugin:flowtype/recommended'</span></div><div class="line">]</div></pre></td></tr></table></figure><h3 id="flow配置文件"><a href="#flow配置文件" class="headerlink" title="flow配置文件"></a>flow配置文件</h3><blockquote><p>在项目的根目录下增加<code>.flowconfig</code>配置文件，具体配置也可以查看flow的官方文档。<br><a href="https://flow.org/en/docs/install/" target="_blank" rel="external">flow</a></p></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">[ignore]</span></div><div class="line">.*/node_modules/.*</div><div class="line">.*/dist/.*</div><div class="line">.*/public</div><div class="line"></div><div class="line"><span class="string">[include]</span></div><div class="line"></div><div class="line"><span class="string">[libs]</span></div><div class="line">flow</div><div class="line"></div><div class="line"><span class="string">[options]</span></div><div class="line">unsafe.enable_getters_and_setters=true</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;整合jsx&quot;&gt;&lt;a href=&quot;#整合jsx&quot; class=&quot;headerlink&quot; title=&quot;整合jsx&quot;&gt;&lt;/a&gt;整合jsx&lt;/h2&gt;&lt;h3 id=&quot;依赖包&quot;&gt;&lt;a href=&quot;#依赖包&quot; class=&quot;headerlink&quot; title=&quot;依赖包&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="构建工具" scheme="https://xxxxxmiss.github.io/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="vue" scheme="https://xxxxxmiss.github.io/tags/vue/"/>
    
      <category term="ssr" scheme="https://xxxxxmiss.github.io/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>yueta</title>
    <link href="https://xxxxxmiss.github.io/2017/11/29/yueta/"/>
    <id>https://xxxxxmiss.github.io/2017/11/29/yueta/</id>
    <published>2017-11-29T03:37:17.000Z</published>
    <updated>2017-11-30T07:01:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">post</span> /signin</div><div class="line">name</div><div class="line"><span class="keyword">pwd</span></div><div class="line">captcha</div></pre></td></tr></table></figure><h1 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">post</span> /signout</div></pre></td></tr></table></figure><h1 id="意见反馈"><a href="#意见反馈" class="headerlink" title="意见反馈"></a>意见反馈</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /feedbacks</div><div class="line"><span class="comment">// 分页参数</span></div><div class="line">pagesize</div><div class="line">page</div><div class="line"><span class="comment">// 筛选参数</span></div><div class="line">company_email</div><div class="line">start_time</div><div class="line">end_time</div></pre></td></tr></table></figure><h1 id="顾问-consultants-相关"><a href="#顾问-consultants-相关" class="headerlink" title="顾问(consultants)相关"></a>顾问(consultants)相关</h1><h2 id="排行版"><a href="#排行版" class="headerlink" title="排行版"></a>排行版</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">get</span> /consultants/<span class="built_in">rank</span></div></pre></td></tr></table></figure><h2 id="添加顾问"><a href="#添加顾问" class="headerlink" title="添加顾问"></a>添加顾问</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">post <span class="meta-keyword">/consultants/</span>add</div><div class="line"><span class="comment">// 组id</span></div><div class="line">group_id <span class="comment">// 0（第一组）1（第一组）...以此类推</span></div><div class="line">name</div><div class="line">email</div><div class="line"><span class="symbol">is_leader:</span> <span class="number">0</span>（不是）<span class="number">1</span>（是） <span class="comment">// 是否为组长</span></div></pre></td></tr></table></figure><h2 id="标记顾问为离职"><a href="#标记顾问为离职" class="headerlink" title="标记顾问为离职"></a>标记顾问为离职</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">post <span class="regexp">/consultants/</span>leave</div><div class="line">consultant_id</div></pre></td></tr></table></figure><h2 id="获取跟进人列表"><a href="#获取跟进人列表" class="headerlink" title="获取跟进人列表"></a>获取跟进人列表</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /consultants</div></pre></td></tr></table></figure><h2 id="今日业绩汇总"><a href="#今日业绩汇总" class="headerlink" title="今日业绩汇总"></a>今日业绩汇总</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /consultants/statistics</div><div class="line"><span class="comment">// 筛选参数</span></div><div class="line">group_id <span class="comment">// 分组</span></div><div class="line">start_time <span class="comment">// 起始时间</span></div><div class="line">end_time <span class="comment">// 结束时间</span></div></pre></td></tr></table></figure><h1 id="客户-companies-相关"><a href="#客户-companies-相关" class="headerlink" title="客户(companies)相关"></a>客户(companies)相关</h1><h2 id="客户列表（支持分页，筛选查询）"><a href="#客户列表（支持分页，筛选查询）" class="headerlink" title="客户列表（支持分页，筛选查询）"></a>客户列表（支持分页，筛选查询）</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /companies</div><div class="line"><span class="comment">// 分页参数</span></div><div class="line">pagesize</div><div class="line">page</div><div class="line"><span class="comment">// 筛选参数</span></div><div class="line">company_email</div><div class="line"><span class="comment">// 管理员使用更多的参数</span></div><div class="line">consultant_id <span class="comment">// 当前更进人</span></div><div class="line">category_id <span class="comment">// 免费等</span></div><div class="line">allocated: <span class="number">0</span>（未分配）<span class="number">1</span>（已分配）</div></pre></td></tr></table></figure><h2 id="查看约Ta职位（查询该客户【公司，企业】下的所有职位列表-支持分页）"><a href="#查看约Ta职位（查询该客户【公司，企业】下的所有职位列表-支持分页）" class="headerlink" title="查看约Ta职位（查询该客户【公司，企业】下的所有职位列表,支持分页）"></a>查看约Ta职位（查询该客户【公司，企业】下的所有职位列表,支持分页）</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /positions</div><div class="line"><span class="comment">// 分页参数</span></div><div class="line">pagesize</div><div class="line">page</div><div class="line"><span class="comment">// 公司id</span></div><div class="line">company_id</div></pre></td></tr></table></figure><h2 id="简历列表-查看某一职位下的所有简历，支持分页"><a href="#简历列表-查看某一职位下的所有简历，支持分页" class="headerlink" title="简历列表(查看某一职位下的所有简历，支持分页)"></a>简历列表(查看某一职位下的所有简历，支持分页)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /resumes</div><div class="line"><span class="comment">// 分页参数</span></div><div class="line">pagesize</div><div class="line">page</div><div class="line"></div><div class="line">company_id <span class="comment">// 公司id</span></div><div class="line">position_id <span class="comment">// 职位id</span></div></pre></td></tr></table></figure><h2 id="更新邮箱"><a href="#更新邮箱" class="headerlink" title="更新邮箱"></a>更新邮箱</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">post <span class="regexp">/resumes/u</span>pdate_email</div><div class="line"><span class="regexp">//</span> 简历id</div><div class="line">id </div><div class="line">email</div><div class="line">position_id <span class="regexp">//</span> 职位id</div></pre></td></tr></table></figure><h2 id="稍后联系"><a href="#稍后联系" class="headerlink" title="稍后联系"></a>稍后联系</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">post <span class="regexp">/resumes/</span>delay_contact</div><div class="line"><span class="regexp">//</span> 简历id</div><div class="line">id </div><div class="line"><span class="regexp">//</span> 备注</div><div class="line">remark</div></pre></td></tr></table></figure><h2 id="手机号码无效"><a href="#手机号码无效" class="headerlink" title="手机号码无效"></a>手机号码无效</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">post <span class="regexp">/resumes/</span>phone_invalid</div><div class="line"><span class="regexp">//</span> 简历id</div><div class="line">id</div><div class="line"><span class="regexp">//</span> 手机号</div><div class="line">phone</div></pre></td></tr></table></figure><h2 id="状态处理（获取已有状态数据）"><a href="#状态处理（获取已有状态数据）" class="headerlink" title="状态处理（获取已有状态数据）"></a>状态处理（获取已有状态数据）</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /resumes/get_status</div><div class="line"><span class="comment">// 简历id</span></div><div class="line">id</div></pre></td></tr></table></figure><h2 id="状态处理（更新状态）"><a href="#状态处理（更新状态）" class="headerlink" title="状态处理（更新状态）"></a>状态处理（更新状态）</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">post /resumes/update_status</div><div class="line">id <span class="comment">// 简历id</span></div><div class="line">name</div><div class="line">current_status</div><div class="line">phone</div><div class="line">expect_salary_start</div><div class="line">expect_salary_end</div><div class="line">expect_work_place</div><div class="line">in_place <span class="comment">// 所在地</span></div><div class="line">current_msalary_start <span class="comment">// 当前月薪</span></div><div class="line">current_msalary_end</div><div class="line">current_ysalary_start <span class="comment">// 当前年薪</span></div><div class="line">current_ysalary_end</div><div class="line"></div><div class="line">resume_time_start <span class="comment">// 简历最新工作时间</span></div><div class="line">resume_time_end</div><div class="line">resume_company</div><div class="line">resume_position</div><div class="line"><span class="keyword">new</span><span class="type">_time_start</span> <span class="comment">// 最新工作时间</span></div><div class="line"><span class="keyword">new</span><span class="type">_time_end</span></div><div class="line"><span class="keyword">new</span><span class="type">_company</span> <span class="comment">// 最新公司</span></div><div class="line"><span class="keyword">new</span><span class="type">_position</span></div><div class="line"></div><div class="line">intention</div><div class="line">    call_time</div><div class="line">    working_date</div><div class="line">    resume_remark</div><div class="line">    common_tag</div><div class="line">    yueta_remark</div><div class="line">    msgtify</div><div class="line">other</div><div class="line">    reasonnintention</div><div class="line">    remark</div><div class="line">none</div><div class="line">    reasonnintention</div><div class="line">    remark</div></pre></td></tr></table></figure><h2 id="更换跟进人"><a href="#更换跟进人" class="headerlink" title="更换跟进人"></a>更换跟进人</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">post <span class="regexp">/companies/</span>change_consultant</div><div class="line"><span class="regexp">//</span> 一些待确定参数</div><div class="line">consultant_id <span class="regexp">//</span> 更进人id</div></pre></td></tr></table></figure><h2 id="获取待分配公司列表-已废弃"><a href="#获取待分配公司列表-已废弃" class="headerlink" title="获取待分配公司列表(已废弃)"></a>获取待分配公司列表(已废弃)</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /companies/will_allocate</div><div class="line"><span class="comment">// 支持筛选</span></div><div class="line">email</div><div class="line">category_id <span class="comment">// 0（免费）1（体验）2（付费）</span></div><div class="line">filter_one <span class="comment">// true, false</span></div></pre></td></tr></table></figure><h2 id="分配公司"><a href="#分配公司" class="headerlink" title="分配公司"></a>分配公司</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">post <span class="meta-keyword">/companies/</span>allocate</div><div class="line"><span class="symbol">company_ids:</span> [] <span class="comment">// 客户id</span></div><div class="line">group_id <span class="comment">// 组</span></div><div class="line">consultant_id <span class="comment">// 更进人id</span></div></pre></td></tr></table></figure><h2 id="公司分配之报表查询（待确定）"><a href="#公司分配之报表查询（待确定）" class="headerlink" title="公司分配之报表查询（待确定）"></a>公司分配之报表查询（待确定）</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /companies/reports</div><div class="line">company_email</div><div class="line">start_time</div><div class="line">end_time</div></pre></td></tr></table></figure><h1 id="记录-record-相关"><a href="#记录-record-相关" class="headerlink" title="记录(record)相关"></a>记录(record)相关</h1><blockquote><p>考虑划分到简历下</p></blockquote><h2 id="历史记录（支持分页，筛选查询）"><a href="#历史记录（支持分页，筛选查询）" class="headerlink" title="历史记录（支持分页，筛选查询）"></a>历史记录（支持分页，筛选查询）</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /record/history</div><div class="line"><span class="comment">// 分页参数</span></div><div class="line">pagesize</div><div class="line">page</div><div class="line"><span class="comment">// 筛选参数</span></div><div class="line">company_email <span class="comment">// 公司邮箱</span></div><div class="line">resume_id <span class="comment">// 简历id</span></div><div class="line"><span class="comment">// 愿意沟通（0） 手机号码无效（1） 结束联系（2） 不看机会（3） 看其他机会（4）</span></div><div class="line">category_id</div><div class="line"><span class="comment">// 管理员使用更多的参数</span></div><div class="line">operator_id <span class="comment">// 操作者id</span></div><div class="line">start_time</div><div class="line">end_time</div></pre></td></tr></table></figure><h2 id="管理员更改历史状态"><a href="#管理员更改历史状态" class="headerlink" title="管理员更改历史状态"></a>管理员更改历史状态</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">post <span class="regexp">/record/u</span>pdate_status</div><div class="line"><span class="regexp">//</span> 参数待确定</div></pre></td></tr></table></figure><h1 id="配置-config-相关"><a href="#配置-config-相关" class="headerlink" title="配置(config)相关"></a>配置(config)相关</h1><h2 id="省市的查询（看具体实现，也可能是静态数据）"><a href="#省市的查询（看具体实现，也可能是静态数据）" class="headerlink" title="省市的查询（看具体实现，也可能是静态数据）"></a>省市的查询（看具体实现，也可能是静态数据）</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span> /configs/city</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h1&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos7部署nodejs+mongodb工程</title>
    <link href="https://xxxxxmiss.github.io/2017/10/14/nodejs-deploy/"/>
    <id>https://xxxxxmiss.github.io/2017/10/14/nodejs-deploy/</id>
    <published>2017-10-14T06:13:20.000Z</published>
    <updated>2018-03-05T07:31:08.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过ssh登录阿里云主机"><a href="#通过ssh登录阿里云主机" class="headerlink" title="通过ssh登录阿里云主机"></a>通过ssh登录阿里云主机</h2><blockquote><p>ssh username@公网ip</p></blockquote><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">bin</div><div class="line">boot</div><div class="line">dev</div><div class="line">etc</div><div class="line">home</div><div class="line"><span class="class"><span class="keyword">lib</span></span></div><div class="line">lib64</div><div class="line">lost+found</div><div class="line">media</div><div class="line">mnt</div><div class="line">opt</div><div class="line">proc</div><div class="line">root    [使用ssh root@公网ip成功登录后进入的目录]</div><div class="line">run</div><div class="line">sbin</div><div class="line">srv</div><div class="line">sys</div><div class="line">tmp</div><div class="line">usr</div><div class="line">var</div></pre></td></tr></table></figure><p>当使用root用户登录以后，会进入root目录，当你切换到上一层目录后，会看到如上所示的目录结构。</p><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><blockquote><p>通过上一步的登录阿里云主机之后，你可以直接在root目录下，也可以新建其他的目录，然后安装nvm。<br><code>nvm</code>是node版本管理工具，通过该工具可以很方便的管理Node版本。</p></blockquote><p>具体的安装步骤参考官方文档：<br><a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a></p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><blockquote><p>一旦<code>nvm</code>成功安装以后，我们就可以通过<code>nvm</code>来安装nodejs。比如：</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install <span class="keyword">node</span> <span class="title">// 安装最新版的nodejs</span></div></pre></td></tr></table></figure><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><blockquote><p>具体的安装细节可以参照<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="external">mongodb官方文档</a>。</p></blockquote><p>注意： 下面以在<strong>64-bit systems</strong>安装最新版的<strong>mongdb3.4</strong>为例：</p><h3 id="配置包管理系统-yum"><a href="#配置包管理系统-yum" class="headerlink" title="配置包管理系统(yum)"></a>配置包管理系统(yum)</h3><blockquote><p>新建/etc/yum.repos.d/mongodb-org-3.4.repo文件，然后将以下代码拷贝到该文件中.</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">[mongodb-org-3.4]</span></div><div class="line"><span class="attr">name</span>=MongoDB Repository</div><div class="line"><span class="attr">baseurl</span>=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/<span class="number">3.4</span>/x<span class="number">86_64</span>/</div><div class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></div><div class="line"><span class="attr">enabled</span>=<span class="number">1</span></div><div class="line"><span class="attr">gpgkey</span>=https://www.mongodb.org/static/pgp/server-<span class="number">3.4</span>.asc</div></pre></td></tr></table></figure><h3 id="安装mongodb包和相关的工具"><a href="#安装mongodb包和相关的工具" class="headerlink" title="安装mongodb包和相关的工具"></a>安装mongodb包和相关的工具</h3><blockquote><p>sudo yum install -y mongodb-org</p></blockquote><p>默认情况下，mongodb存储数据在<code>/var/lib/mongo</code>，日志文件在<code>/var/log/mongodb</code>。当然，这些配置都是可以在<code>/etc/mongod.conf</code>中修改。</p><h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><blockquote><p>sudo service mongod start</p></blockquote><h3 id="查看mongodb是否成功启动"><a href="#查看mongodb是否成功启动" class="headerlink" title="查看mongodb是否成功启动"></a>查看mongodb是否成功启动</h3><blockquote><p>在日志文件中查看是否有这样的一行：[initandlisten] waiting for connections on port <port></port></p></blockquote><p>port：默认端口27017，可以在<code>/etc/mongod.conf</code>中修改。</p><h3 id="停止mongodb"><a href="#停止mongodb" class="headerlink" title="停止mongodb"></a>停止mongodb</h3><blockquote><p>sudo service mongod stop</p></blockquote><h3 id="重启mongodb"><a href="#重启mongodb" class="headerlink" title="重启mongodb"></a>重启mongodb</h3><blockquote><p>sudo service mongod restart</p></blockquote><h3 id="卸载mongodb"><a href="#卸载mongodb" class="headerlink" title="卸载mongodb"></a>卸载mongodb</h3><blockquote><p>卸载mongodb，会将mongodb程序本身，他的配置文件，以及所有的数据删除，并且该过程是不可逆的。所以在卸载之前，确保已经备份。</p></blockquote><h4 id="停止mongodb-1"><a href="#停止mongodb-1" class="headerlink" title="停止mongodb"></a>停止mongodb</h4><blockquote><p>sudo service mongod stop</p></blockquote><h4 id="移除包"><a href="#移除包" class="headerlink" title="移除包"></a>移除包</h4><blockquote><p>sudo yum erase $(rpm -qa | grep mongodb-org)</p></blockquote><h4 id="移除数据"><a href="#移除数据" class="headerlink" title="移除数据"></a>移除数据</h4><blockquote><p>sudo rm -r /var/log/mongodb<br>sudo rm -r /var/lib/mongo</p></blockquote><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><blockquote><p>可以直接从官网下载压缩包，也可以通过源码构建。因为nginx还依赖一些其他的包来扩展功能，所以还需要安装一些其他的依赖包。具体选择安装哪些依赖包，看你需要什么功能。</p></blockquote><h3 id="安装nginx所需的几个依赖包"><a href="#安装nginx所需的几个依赖包" class="headerlink" title="安装nginx所需的几个依赖包"></a>安装nginx所需的几个依赖包</h3><blockquote><p>yum install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</p></blockquote><h3 id="通过源码构建"><a href="#通过源码构建" class="headerlink" title="通过源码构建"></a>通过源码构建</h3><blockquote><p><a href="http://nginx.org/en/docs/configure.html" target="_blank" rel="external">build nginx from source</a></p></blockquote><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><blockquote><p>service nginx start</p></blockquote><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><blockquote><p>service nginx restart</p></blockquote><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><blockquote><p>yum install git</p></blockquote><p>更多git信息<a href="https://git-scm.com/download/linux" target="_blank" rel="external">传送门</a></p><h2 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h2><blockquote><p>npm install pm2 -g</p></blockquote><p>更多pm2信息<a href="https://github.com/Unitech/pm2" target="_blank" rel="external">传送门</a></p><h2 id="开始部署项目"><a href="#开始部署项目" class="headerlink" title="开始部署项目"></a>开始部署项目</h2><blockquote><p>当上面的准备工作全部成功的完成以后，我们就可以部署我们的nodejs工程了。</p></blockquote><h3 id="克隆nodejs工程到阿里云主机"><a href="#克隆nodejs工程到阿里云主机" class="headerlink" title="克隆nodejs工程到阿里云主机"></a>克隆nodejs工程到阿里云主机</h3><blockquote><p>git clone …</p></blockquote><h3 id="安装工程依赖"><a href="#安装工程依赖" class="headerlink" title="安装工程依赖"></a>安装工程依赖</h3><blockquote><p>npm install</p></blockquote><h3 id="启动工程"><a href="#启动工程" class="headerlink" title="启动工程"></a>启动工程</h3><blockquote><p>pm2 start app.js</p></blockquote><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><blockquote><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository" target="_blank" rel="external">centos7安装docker</a></p></blockquote><p>这里有一个需要注意的地方，就是按照官方文档安装<code>yum</code>工具包的时候，如果当前用户非<code>root</code>用户，那么使用<code>sudo</code>安装的时候，会出现<code>xxx 不在 sudoers 文件中</code>的错误提示。<br>我们可以按照如下步骤将<code>xxx</code>用户添加到<code>sudoers</code>列表中</p><ul><li>切换到<code>root</code>用户登录centos，查看<code>sudoers</code>文件</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ll /etc/sudoers</div><div class="line">-r-------- <span class="number">1</span> root root <span class="number">3907</span> <span class="number">6</span>月  <span class="number">23</span> <span class="number">2017</span> /etc/sudoers</div><div class="line">(上面这一行代表 /etc/sudoers 文件的权限是<span class="number">400</span>)</div></pre></td></tr></table></figure><ul><li>修改该文件的权限，让其可写：</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chmod 600 /etc/sudoers</span></div></pre></td></tr></table></figure><ul><li>将<code>xxx</code>用户添加至 <code>/etc/sudoers</code> 文件</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span> # 这行本来就有，你需要将下面的那行添加至改行的后面</div><div class="line"></div><div class="line">xxx <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span></div></pre></td></tr></table></figure><ul><li>再将<code>/etc/sudoers</code> 权限改回去</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># chmod 400 /etc/sudoers</span></div></pre></td></tr></table></figure><p>那么现在在切换到<code>xxx</code>用户登录centos,就可以成功的安装<code>yum</code>工具包了。</p><h2 id="配置linux主机-以便和docker更好的协作"><a href="#配置linux主机-以便和docker更好的协作" class="headerlink" title="配置linux主机,以便和docker更好的协作"></a>配置linux主机,以便和docker更好的协作</h2><blockquote><p><a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="external">官方详细文档传送门</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过ssh登录阿里云主机&quot;&gt;&lt;a href=&quot;#通过ssh登录阿里云主机&quot; class=&quot;headerlink&quot; title=&quot;通过ssh登录阿里云主机&quot;&gt;&lt;/a&gt;通过ssh登录阿里云主机&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ssh username@公网ip
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://xxxxxmiss.github.io/tags/nodejs/"/>
    
      <category term="mongodb" scheme="https://xxxxxmiss.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>css动画常见案例</title>
    <link href="https://xxxxxmiss.github.io/2017/10/10/css-transition-1/"/>
    <id>https://xxxxxmiss.github.io/2017/10/10/css-transition-1/</id>
    <published>2017-10-10T12:28:18.000Z</published>
    <updated>2017-10-14T13:42:27.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css" media="screen">   .container{     margin: 15px auto;   }   .btn{     position: relative;     display: inline-block;     box-sizing: border-box;     outline: none;     border: 1px solid #ebebeb;     padding: 0 15px;     height: 30px;     line-height: 30px;     border-radius: 4px;     user-select: none;     cursor: pointer;     text-align: center;     color: #fff;     background-color: #00c1de;   }   .btn.btn-blink:after{     position: absolute;     content: "";     top: -1px;     left: -1px;     bottom: -1px;     right: -1px;     border: 0 solid #00c1de;     border-radius: 4px;     box-shadow: 0 0 2px 0 #00c1de;     animation: blink .3s cubic-bezier(.645,.045,.355,1);   }   @keyframes blink{     from {       opacity: 1;       transform: scale(1);     }     to {       opacity: 0;       transform: scale3d(1.1, 1.2, 0);     }   }   .btn-round-blink{     font-size: 30px;     font-weight: 500;     margin: 0 30px;     height: 30px;     width: 30px;     border-radius: 50%;   }   .btn-round-blink:before,   .btn-round-blink:after{     position: absolute;     content: "";     top: 0;     left: 0;     right: 0;     bottom: 0;     border: 1px solid #00c1de;     border-radius: 50%;   }   .btn-round-blink:before{     animation: round-blink 2s infinite;   }   .btn-round-blink:after{     animation: round-blink 1s infinite;   }   @keyframes round-blink{     from {       opacity: 1;       transform: scale(1);     }     to {       opacity: 0;       transform: scale(1.88);     }   }   .progress{     position: absolute;     left: -100%;     top: 0;     background-color: #00c1de;     width: 100%;     height: 3px;   }   .progress.fade-in{     animation: fade-in 1s ease-in;   }   @keyframes fade-in{     from {       transform: translate3d(0, 0, 0);     }     to {       transform: translate3d(200%, 0, 0);     }   }   .progress-grow{     position: absolute;     left: 0;     top: 0;     width: 0;     height: 3px;     background-color: #00c1de;     animation: grow-in 1s infinite;   }   @keyframes grow-in{     from {       width: 0;     }     to{       width: 100%;     }   }</style><div class="progress" id="progress"></div><br><div class="container"><br>    <button class="btn" id="btn">显示进度条</button><br></div><br><div class="container"><br>    <button class="btn btn-round-blink"></button><br></div><script>  var btn = document.getElementById('btn')    , progress = document.getElementById('progress')  btn.addEventListener('mouseup', function () {    this.classList.add('btn-blink')  })  btn.addEventListener('animationend', function () {    this.classList.remove('btn-blink')  })  btn.addEventListener('click', function () {    progress.classList.add('fade-in')  })  progress.addEventListener('animationend', function () {    progress.classList.remove('fade-in')  })</script><blockquote><p>本篇主要内容是如何自己实现各种网站，UI框架的一些过渡效果</p></blockquote><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><blockquote><p>之前看到<a href="https://ant.design/components/button-cn/" target="_blank" rel="external">ant design</a>上按钮的那种点击效果，于是按照自己的思路来模拟下。</p></blockquote><p>这种效果其实有多种实现方式，我们这里提供一种:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">// 按钮的样式</div><div class="line">.btn&#123;</div><div class="line">  position: relative;</div><div class="line">  display: inline-block;</div><div class="line">  box-sizing: border-box;</div><div class="line">  outline: none;</div><div class="line">  border: 1px solid #ebebeb;</div><div class="line">  padding: 0 15px;</div><div class="line">  height: 30px;</div><div class="line">  line-height: 30px;</div><div class="line">  border-radius: 4px;</div><div class="line">  user-select: none;</div><div class="line">  cursor: pointer;</div><div class="line">  text-align: center;</div><div class="line">  color: #fff;</div><div class="line">  background-color: #00c1de;</div><div class="line">&#125;</div><div class="line">// 一闪而过的矩形</div><div class="line">.btn.btn-blink:after&#123;</div><div class="line">  position: absolute;</div><div class="line">  content: "";</div><div class="line">  top: -1px;</div><div class="line">  left: -1px;</div><div class="line">  bottom: -1px;</div><div class="line">  right: -1px;</div><div class="line">  border: 1px solid #00c1de;</div><div class="line">  border-radius: inherit;</div><div class="line">  box-shadow: 0 0 2px 0 #00c1de;</div><div class="line">  // 合理执行时间和缓动函数可以使动画看起来更加的舒适。。。</div><div class="line">  // 所以需要自己慢慢的调试</div><div class="line">  animation: blink .3s cubic-bezier(.645,.045,.355,1);</div><div class="line">&#125;</div><div class="line">// 一闪而过的动画</div><div class="line">@keyframes blink&#123;</div><div class="line">  from &#123;</div><div class="line">    opacity: .5;</div><div class="line">    transform: scale(1);</div><div class="line">  &#125;</div><div class="line">  to &#123;</div><div class="line">    opacity: 0;</div><div class="line">     // y轴的放大应该比x轴大一些，因为一般按钮情况下按钮的宽度都是大于高度的</div><div class="line">     // 如果不这样做，动画就不是很理想了</div><div class="line">    transform: scale3d(1.1, 1.2, 0);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="闪烁效果"><a href="#闪烁效果" class="headerlink" title="闪烁效果"></a>闪烁效果</h2><blockquote><p>这种效果就跟水波一样，一层一层的像远处散开然后消失。<br>最简单的用before和after伪类就可以实现，当然了这也只是一种实现。如果觉得不够逼真，那么就需要你慢慢的调试，改动缓动函数以及动画执行的事件。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">.btn&#123;</div><div class="line">    // 同上 </div><div class="line">&#125;</div><div class="line">.btn-round-blink&#123;</div><div class="line">  font-size: 30px;</div><div class="line">  font-weight: 500;</div><div class="line">  margin: 0 30px;</div><div class="line">  height: 30px;</div><div class="line">  width: 30px;</div><div class="line">  border-radius: 50%;</div><div class="line">&#125;</div><div class="line">.btn-round-blink:before,</div><div class="line">.btn-round-blink:after&#123;</div><div class="line">  position: absolute;</div><div class="line">  content: "";</div><div class="line">  top: 0;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">  bottom: 0;</div><div class="line">  border: 1px solid #00c1de;</div><div class="line">  border-radius: 50%;</div><div class="line">&#125;</div><div class="line">.btn-round-blink:before&#123;</div><div class="line">  animation: round-blink 2s infinite;</div><div class="line">&#125;</div><div class="line">.btn-round-blink:after&#123;</div><div class="line">  animation: round-blink 1s infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><blockquote><p>进入条一般用在异步请求中。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">// 可以用这种效果</div><div class="line">.progress&#123;</div><div class="line">  position: fixed;</div><div class="line">  left: -100%;</div><div class="line">  top: 0;</div><div class="line">  background-color: #00c1de;</div><div class="line">  width: 100%;</div><div class="line">  height: 3px;</div><div class="line">&#125;</div><div class="line">.progress.fade-in&#123;</div><div class="line">  animation: fade-in 1s ease-in infinite;</div><div class="line">&#125;</div><div class="line">@keyframes fade-in&#123;</div><div class="line">  from &#123;</div><div class="line">    transform: translate3d(0, 0, 0);</div><div class="line">  &#125;</div><div class="line">  to &#123;</div><div class="line">    transform: translate3d(200%, 0, 0);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 也可以用这种效果</div><div class="line">.progress-grow&#123;</div><div class="line">  position: fixed;</div><div class="line">  left: 0;</div><div class="line">  top: 0;</div><div class="line">  width: 0;</div><div class="line">  height: 3px;</div><div class="line">  background-color: #00c1de;</div><div class="line">  animation: grow-in 1s infinite;</div><div class="line">&#125;</div><div class="line">@keyframes grow-in&#123;</div><div class="line">  from &#123;</div><div class="line">    width: 0;</div><div class="line">  &#125;</div><div class="line">  to&#123;</div><div class="line">    width: 100%;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;
   .container{
     margin: 15px auto;
   }
   .btn{
     position: relative;
     display: inline-bl
      
    
    </summary>
    
      <category term="frontend" scheme="https://xxxxxmiss.github.io/categories/frontend/"/>
    
    
      <category term="css" scheme="https://xxxxxmiss.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建自己的博客</title>
    <link href="https://xxxxxmiss.github.io/2017/09/28/create-blog/"/>
    <id>https://xxxxxmiss.github.io/2017/09/28/create-blog/</id>
    <published>2017-09-28T15:17:08.000Z</published>
    <updated>2017-10-11T04:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node</a></li><li><a href="https://github.com/" target="_blank" rel="external">github</a></li><li><a href="https://pages.github.com/" target="_blank" rel="external">git-pages</a></li><li><a href="https://git-scm.com/" target="_blank" rel="external">git</a>或者其他的版本控制工具</li><li><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">Hexo</a>或者其他的SSG</li></ul><h2 id="Hexo相关配置"><a href="#Hexo相关配置" class="headerlink" title="Hexo相关配置"></a>Hexo相关配置</h2><blockquote><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a></p></blockquote><h3 id="几个主要命令"><a href="#几个主要命令" class="headerlink" title="几个主要命令"></a>几个主要命令</h3><ul><li>hexo new post/draft &lt;file-name&gt;</li></ul><blockquote><p>会在source目录下的_posts或则_drafts下生成file-name.md。<br>也就是说你在使用<code>hexo new</code>创建文件的时候，不需要带文件扩展名，默认生成markdown文件</p></blockquote><ul><li>hexo clean</li></ul><blockquote><p>清楚缓存，一般在使用<code>hexo deploy</code>命令时，先执行该命令。</p></blockquote><ul><li>hexo deploy</li></ul><blockquote><p>推送到仓库到远程</p></blockquote><p>当然，你也可以加入自己的逻辑，用脚本将这些命令串起来，这样在发布以及提交源代码的时候就可以一步到位：比如<a href="https://github.com/xxxxxMiss/xxxxxMiss.github.io/blob/gh-pages/deploy.sh" target="_blank" rel="external">像这样</a></p><h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><blockquote><p>github上常用markdown语法：<a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">Mastering Markdown</a><br>简体中文版：<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">markdown</a></p></blockquote><p>注意：</p><ul><li>在hexo中使用markdown时，引用外部资源的时候，需要按照hexo提供的语法来引用。<br>比如引用图片：<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_img</span> stacking-props.png 其他属性的元素 %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure></li></ul><p>上面的<code></code>是固定语法，<code>stacking-props.png</code>是对应的资源文件，<code>其他属性的元素</code>是鼠标hover时候显示的字符。当然了，你也可以不传该参数，那么hover的时候就显示<code>stacking-props.png</code></p><ul><li>按照上一步引用资源，需要在<code>_config.yml</code>中将<code>post_asset_folder</code>选项设置为<code>true</code>。一旦开启该选项，那么在每次使用<code>hexo new</code>创建文章的时候，都会在对于的目录下生成和文件名相同的目录，你的静态资源就放到该目录下。</li></ul><p>比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post hexo-blog</div></pre></td></tr></table></figure></p><p>那么在<code>source/_posts</code>下就会生成<code>hexo-blog.md</code>文件和<code>hexo-blog</code>文件夹。</p><ul><li>markdown中的一些特殊字符需要转义<br>比如：<code>&lt;</code>需要写成<code>&amp;lt;</code></li></ul><p>更多选项参考<a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="external">官方文档这里</a></p><h2 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h2><blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt" target="_blank" rel="external">yaml</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
      
    
    </summary>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
      <category term="frontend-framework" scheme="https://xxxxxmiss.github.io/tags/frontend-framework/"/>
    
  </entry>
  
  <entry>
    <title>event-1</title>
    <link href="https://xxxxxmiss.github.io/2017/09/28/event-1/"/>
    <id>https://xxxxxmiss.github.io/2017/09/28/event-1/</id>
    <published>2017-09-28T03:50:36.000Z</published>
    <updated>2017-10-11T04:04:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器事件系统"><a href="#浏览器事件系统" class="headerlink" title="浏览器事件系统"></a>浏览器事件系统</h2><ul><li>[x] this is a completed item</li><li>[ ] this is a incomplete item</li></ul><p>emoji! :sparkles: :camel: :boom:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;浏览器事件系统&quot;&gt;&lt;a href=&quot;#浏览器事件系统&quot; class=&quot;headerlink&quot; title=&quot;浏览器事件系统&quot;&gt;&lt;/a&gt;浏览器事件系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[x] this is a completed item&lt;/li&gt;
&lt;li&gt;[ ] th
      
    
    </summary>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>awk内置函数</title>
    <link href="https://xxxxxmiss.github.io/2017/09/19/awk-build-in-functions/"/>
    <id>https://xxxxxmiss.github.io/2017/09/19/awk-build-in-functions/</id>
    <published>2017-09-19T12:42:18.000Z</published>
    <updated>2017-09-20T02:48:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在awk中-需要知道的点"><a href="#在awk中-需要知道的点" class="headerlink" title="在awk中, 需要知道的点"></a>在awk中, 需要知道的点</h2><ul><li>数组，字符串等等，索引都是从<strong>1</strong>开始</li><li>变量的取值直接写变量名<code>var</code>，而不像shell中需要<code>$var</code>，除了内置的特殊变量$0，$1，$2，…等</li><li>FS：指定列分隔符，如：<code>BEGIN{FS=&quot;:&quot;}</code></li><li>内置NF变量：以指定分隔符<code>FS</code>分割出来的列数</li><li>内置NR变量：当前处理的行数</li></ul><h2 id="split-str-arr-field-separator"><a href="#split-str-arr-field-separator" class="headerlink" title="split(str, arr, field separator)"></a>split(str, arr, field separator)</h2><blockquote><p>使用指定的列分隔符将行分割到一个数组中。如果列分隔符没有传值，默认使用IFS的值。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;split($0, arr, ":"); print arr[1]"--&gt;"arr[2]"--&gt;"arr[3]&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">12--&gt;ab--&gt;&amp;&amp;</div></pre></td></tr></table></figure><h2 id="substr-str-start-length"><a href="#substr-str-start-length" class="headerlink" title="substr(str, start, length)"></a>substr(str, start, length)</h2><blockquote><p>从str中start位置开始截取长度为length的字符串。<br>如果没有截取长度length,那么默认截取到str的末尾。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;s=substr($0, 3); print s&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">:ab:&amp;&amp;</div><div class="line"></div><div class="line"></div><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;s=substr($0, 3, 4); print s&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">:ab:</div></pre></td></tr></table></figure><h2 id="index-str-target-str"><a href="#index-str-target-str" class="headerlink" title="index(str, target_str)"></a>index(str, target_str)</h2><blockquote><p>查找target_str在str中出现的位置，如果找到了，那么返回第一次找到的索引；<br>如果没有找到，返回0</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;i=index($0, "a"); print "index: "i&#125;'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符a在time中索引为4</span></div><div class="line">➜  shell ./test.sh</div><div class="line">index: 4</div><div class="line"></div><div class="line"></div><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;i=index($0, "x"); print "index: "i&#125;'</span></div><div class="line"></div><div class="line"><span class="comment"># 没有找到，返回0</span></div><div class="line">➜  shell ./test.sh</div><div class="line">index: 0</div></pre></td></tr></table></figure><h2 id="gsub-regexp-sub-str-str"><a href="#gsub-regexp-sub-str-str" class="headerlink" title="gsub(regexp, sub_str, str)"></a>gsub(regexp, sub_str, str)</h2><blockquote><p>将str中匹配regexp的子串全部替换为sub_str, 并返回成功匹配的次数。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"><span class="comment"># count为当前行成功匹配的次数</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;count=gsub("[[:digit:]]", "**", $0); print $0"\nmatches count: "count&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">****:ab:&amp;&amp;</div><div class="line">matches count: 2</div></pre></td></tr></table></figure><h2 id="sub-regexp-sub-str-str"><a href="#sub-regexp-sub-str-str" class="headerlink" title="sub(regexp, sub_str, str)"></a>sub(regexp, sub_str, str)</h2><blockquote><p>将str中第一次匹配regexp的子串替换为sub_str, 并返回成功匹配的次数(0或者1)。<br>和上面的gsub比较，就相当于一个是全局匹配，一个是单词匹配。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"c21:ab:&amp;&amp;"</span></div><div class="line"><span class="comment"># count为当前行成功匹配的次数</span></div><div class="line"><span class="comment"># 因为只会匹配一次，所以成功匹配，那么返回1；没有找到一个匹配，返回0</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;count=sub("[[:digit:]]", "**", $0); print $0"\nmatches count: "count&#125;'</span></div><div class="line"></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">c**1:ab:&amp;&amp;</div><div class="line">matches count: 1</div></pre></td></tr></table></figure><h2 id="length-str"><a href="#length-str" class="headerlink" title="length(str)"></a>length(str)</h2><blockquote><p>返回指定字符串的长。当不指定str,那么返回当前行的字符串长度。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"c21:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'BEGIN&#123;FS=":"&#125; &#123;</span></div><div class="line">  for(i = 1; i &lt;= NF; i++)&#123;</div><div class="line">    print "line&lt; "i" &gt; char count: "length($i)</div><div class="line">  &#125;</div><div class="line">&#125;'</div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">line&lt; 1 &gt; char count: 3</div><div class="line">line&lt; 2 &gt; char count: 2</div><div class="line">line&lt; 3 &gt; char count: 2</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"c21:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'BEGIN&#123;FS=":"&#125; &#123;print length()&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">9</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在awk中-需要知道的点&quot;&gt;&lt;a href=&quot;#在awk中-需要知道的点&quot; class=&quot;headerlink&quot; title=&quot;在awk中, 需要知道的点&quot;&gt;&lt;/a&gt;在awk中, 需要知道的点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组，字符串等等，索引都是从&lt;strong&gt;
      
    
    </summary>
    
      <category term="shell" scheme="https://xxxxxmiss.github.io/categories/shell/"/>
    
    
      <category term="shell" scheme="https://xxxxxmiss.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>git进阶（二）</title>
    <link href="https://xxxxxmiss.github.io/2017/09/19/git-plumbing-2/"/>
    <id>https://xxxxxmiss.github.io/2017/09/19/git-plumbing-2/</id>
    <published>2017-09-18T17:23:39.000Z</published>
    <updated>2017-09-19T17:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git配置文件的位置"><a href="#git配置文件的位置" class="headerlink" title="git配置文件的位置"></a>git配置文件的位置</h2><ul><li>/etc/gitconfig</li><li>~/.gitconfig || $XDG_CONFIG_HOME/git/config</li><li>$PWD/.git/config</li></ul><h2 id="查看git配置"><a href="#查看git配置" class="headerlink" title="查看git配置"></a>查看git配置</h2><blockquote><p>对于配置选项的CURD操作，不指定–system,–global,–local选项，<br>CUD默认都是–local选项, R操作查询所有的配置（相当于同时指定了三个选项）。</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查看系统级别的所有配置</span></div><div class="line">git <span class="keyword">config</span> --system -l</div><div class="line"></div><div class="line"><span class="comment">// 查看全局的所有配置(默认查看global级别)</span></div><div class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> -l</div><div class="line"></div><div class="line"><span class="comment">// 查看当前仓库的配置</span></div><div class="line">git <span class="keyword">config</span> --<span class="keyword">local</span> -l</div><div class="line"></div><div class="line"><span class="comment">// 查看具体某一项的配置</span></div><div class="line">git <span class="keyword">config</span> [--system|--<span class="keyword">global</span>|--<span class="keyword">local</span>] --get core<span class="variable">.editor</span></div><div class="line"><span class="comment">// 默认查看local级别</span></div><div class="line">git <span class="keyword">config</span> --get core<span class="variable">.editor</span></div></pre></td></tr></table></figure><h2 id="设置git配置"><a href="#设置git配置" class="headerlink" title="设置git配置"></a>设置git配置</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">config</span> [--system|--<span class="keyword">global</span>|--<span class="keyword">local</span>] user<span class="variable">.name</span> <span class="string">"qsch"</span></div></pre></td></tr></table></figure><h2 id="删除某个配置"><a href="#删除某个配置" class="headerlink" title="删除某个配置"></a>删除某个配置</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除global级别的commit.template配置</span></div><div class="line">git <span class="built_in">config</span> --global --unset commit.<span class="keyword">template</span></div><div class="line"></div><div class="line"><span class="comment">// 删除local级别</span></div><div class="line">git <span class="built_in">config</span> --local --unset commit.<span class="keyword">template</span></div><div class="line"><span class="comment">// 或则</span></div><div class="line">git <span class="built_in">config</span> --unset commit.<span class="keyword">template</span></div></pre></td></tr></table></figure><h2 id="commit-template"><a href="#commit-template" class="headerlink" title="commit.template"></a>commit.template</h2><blockquote><p>配置提交信息的模板。使用同一份模板，可以保持团队成员的提交信息风格保持一致。</p></blockquote><p>比如你这样设置<code>git config commit.template ~/.gitmessage.txt</code>,<br>那么当你<code>git commit</code>的时候，会进入你设置的提交信息的模板编辑页面，修改保存，那么修改后的提交信息就是本次的提交信息。</p><h2 id="core-excludesfile"><a href="#core-excludesfile" class="headerlink" title="core.excludesfile"></a>core.excludesfile</h2><blockquote><p>global级别的.gitignore。<br>一般每个项目下都会有.gitignore文件，如果配置了global级别的.gitignore,那么对于所有的git仓库都会生效。<br>如：<br><code>git config core.excludesfile ~/.gitignore_global</code> </p></blockquote><h2 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h2><blockquote><p>用来处理各平台之间的换行符回车符之间的一致性问题</p></blockquote><ul><li>使用linux或者mac,一般设置为<code>input</code>,那么在检出的时候，自动将<code>\r\n</code>转化为<code>\n</code>。</li><li>使用windows，可以设置为<code>true</code>,那么在检出的时候，自动将<code>\n</code>转化为<code>\r\n</code>。</li><li>如果只在windows上开发，那么可以设置为<code>false</code>,关闭该功能。</li></ul><h2 id="使用npm安装你自己编写的脚本"><a href="#使用npm安装你自己编写的脚本" class="headerlink" title="使用npm安装你自己编写的脚本"></a>使用npm安装你自己编写的脚本</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git配置文件的位置&quot;&gt;&lt;a href=&quot;#git配置文件的位置&quot; class=&quot;headerlink&quot; title=&quot;git配置文件的位置&quot;&gt;&lt;/a&gt;git配置文件的位置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;/etc/gitconfig&lt;/li&gt;
&lt;li&gt;~/.gitco
      
    
    </summary>
    
      <category term="git" scheme="https://xxxxxmiss.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://xxxxxmiss.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git进阶（一）</title>
    <link href="https://xxxxxmiss.github.io/2017/08/20/git-plumbing/"/>
    <id>https://xxxxxmiss.github.io/2017/08/20/git-plumbing/</id>
    <published>2017-08-20T06:56:16.000Z</published>
    <updated>2017-08-25T11:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git文件一览"><a href="#git文件一览" class="headerlink" title=".git文件一览"></a>.git文件一览</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">├── COMMIT_EDITMSG</div><div class="line">├── FETCH_HEAD</div><div class="line">├── HEAD <span class="comment">// 保存了当前分支的引用, 该引用指向refs/heads下对应的文件</span></div><div class="line">├── ORIG_HEAD</div><div class="line">├── branches</div><div class="line">├── config <span class="comment">// 当前选项的配置文件</span></div><div class="line">├── description</div><div class="line">├── hooks <span class="comment">// git相关钩子</span></div><div class="line">│   ├── applypatch-msg<span class="selector-class">.sample</span></div><div class="line">│   ├── commit-msg<span class="selector-class">.sample</span></div><div class="line">│   ├── post-update<span class="selector-class">.sample</span></div><div class="line">│   ├── pre-applypatch<span class="selector-class">.sample</span></div><div class="line">│   ├── pre-commit<span class="selector-class">.sample</span></div><div class="line">│   ├── pre-push<span class="selector-class">.sample</span></div><div class="line">│   ├── pre-rebase<span class="selector-class">.sample</span></div><div class="line">│   ├── prepare-commit-msg<span class="selector-class">.sample</span></div><div class="line">│   └── update<span class="selector-class">.sample</span></div><div class="line">├── index <span class="comment">// index区（暂存区）</span></div><div class="line">├── info</div><div class="line">│   └── exclude <span class="comment">// 配置.gitignore相关</span></div><div class="line">├── logs <span class="comment">// 日志</span></div><div class="line">│   ├── HEAD</div><div class="line">│   └── refs</div><div class="line">│       ├── heads</div><div class="line">│       │   ├── dev</div><div class="line">│       │   ├── feat</div><div class="line">│       │   ├── master</div><div class="line">│       │   ├── revert</div><div class="line">│       │   └── test</div><div class="line">│       └── remotes</div><div class="line">│           └── origin</div><div class="line">│               ├── HEAD</div><div class="line">│               ├── dev</div><div class="line">│               ├── master</div><div class="line">│               ├── severfix</div><div class="line">│               └── test</div><div class="line">├── objects <span class="comment">// 每个提交的记录</span></div><div class="line">│   ├── <span class="number">00</span></div><div class="line">│   │   └── <span class="number">0</span>c30b7f4429c3d4c3ad782cc051798724b66f7</div><div class="line">│   ├── <span class="number">01</span></div><div class="line">│   │   ├── <span class="number">143716</span>b369d9720651644bf6ad8543d3c9ff64</div><div class="line">│   │   └── <span class="number">2</span>c1fbd55bee496631593d14814c2370f61e64a</div><div class="line">│   ├── info</div><div class="line">│   └── pack</div><div class="line">│       ├── pack-edc94ec3aa0349b77e3e1b8264644068e4118389<span class="selector-class">.idx</span></div><div class="line">│       └── pack-edc94ec3aa0349b77e3e1b8264644068e4118389<span class="selector-class">.pack</span></div><div class="line">├── packed-refs</div><div class="line">└── refs</div><div class="line">    ├── heads <span class="comment">// 本地各个分支最新提交</span></div><div class="line">    │   ├── dev</div><div class="line">    │   ├── feat</div><div class="line">    │   ├── master</div><div class="line">    │   ├── revert</div><div class="line">    │   └── test</div><div class="line">    ├── remotes</div><div class="line">    │   └── origin <span class="comment">//保存了远程分支最新提交</span></div><div class="line">    │       ├── HEAD</div><div class="line">    │       ├── dev</div><div class="line">    │       ├── master</div><div class="line">    │       ├── severfix</div><div class="line">    │       └── test</div><div class="line">    └── tags</div></pre></td></tr></table></figure><img src="/2017/08/20/git-plumbing/git-plumbing-commit-tree.png" alt="git底层分支树" title="git底层分支树"><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><h3 id="远程引用"><a href="#远程引用" class="headerlink" title="远程引用"></a>远程引用</h3><blockquote><p>远程引用（指针）是对远程仓库的引用<br><code>git remote show origin</code></p></blockquote><h3 id="远程分支-1"><a href="#远程分支-1" class="headerlink" title="远程分支"></a>远程分支</h3><blockquote><p>远程跟踪分支是远程分支状态的引用, 他们是你不能移动的本地引用。<br>已(remote)/(branch)</p></blockquote><p><code>git branch -a</code></p><h3 id="跟踪分支（上游分支）"><a href="#跟踪分支（上游分支）" class="headerlink" title="跟踪分支（上游分支）"></a>跟踪分支（上游分支）</h3><blockquote><p>本地分支关联远程分支。做了关联之后，就可以简化很多命令，比如<code>git pull</code>, git能自动的识别去哪个服务器上抓取，合并到哪个分支。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">-b</span> <span class="selector-attr">[branch]</span> <span class="selector-attr">[remotename]</span>/<span class="selector-attr">[branch]</span></div><div class="line"></div><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">--track</span> <span class="selector-tag">origin</span>/<span class="selector-tag">master</span>(快捷方式)</div></pre></td></tr></table></figure><blockquote><p>为已有的分支设置上游分支</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -u origin/<span class="keyword">master</span></div><div class="line"><span class="title">git</span> branch --<span class="attr">set-upstream-to=</span>origin/<span class="literal">master</span></div></pre></td></tr></table></figure><blockquote><p>查看本地分支是否设置了上游分支，与上游分支领先落后以及最后一次提交等信息</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-vv</div></pre></td></tr></table></figure><blockquote><p>取消上游分支</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch <span class="comment">--unset-upstream</span></div></pre></td></tr></table></figure><h2 id="重写历史"><a href="#重写历史" class="headerlink" title="重写历史"></a>重写历史</h2><h3 id="修改最近一次的提交信息"><a href="#修改最近一次的提交信息" class="headerlink" title="修改最近一次的提交信息"></a>修改最近一次的提交信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">commit</span> <span class="comment">--amend</span></div></pre></td></tr></table></figure><blockquote><p>如果你已经使用上述命令完成了最近一次提交信息的修改，又因为之前提交时忘记添加一个新创建的文件，想通过添加或修改文件来更改提交的快照，也可以通过类似的操作来完成。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> || git rm</span></div><div class="line">git commit --amend</div></pre></td></tr></table></figure><h3 id="修改多个提交信息。"><a href="#修改多个提交信息。" class="headerlink" title="修改多个提交信息。"></a>修改多个提交信息。</h3><blockquote><p>如果要修改多个提交信息，可以通过交互式变基来实现。<br>这是一个变基命令: 在 HEAD~3..HEAD 范围内的每一个提交都会被重写，无论你是否修改信息。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -<span class="selector-tag">i</span> HEAD~<span class="number">3</span></div></pre></td></tr></table></figure><p>Note: 需要注意的是，rebase命令会将你带入文本编辑模式，这个文本编辑模式中所列出来的提交列表和使用<code>git log</code>列出来的提交是相反的。rebase:从旧到新，log:从新到旧</p><p>假设我们进入编辑模式是这样的：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">pick f<span class="number">7f</span><span class="number">3f</span>6d changed my name a <span class="keyword">bit</span></div><div class="line">pick <span class="number">310154</span>e updated README formatting <span class="keyword">and </span><span class="keyword">added </span><span class="keyword">blame</span></div><div class="line">pick a<span class="number">5f</span>4a0d <span class="keyword">added </span>cat-file</div><div class="line"></div><div class="line"><span class="comment"># Rebase 710f0f8..a5f4a0d onto 710f0f8</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Commands:</span></div><div class="line"><span class="comment">#  p, pick = use commit</span></div><div class="line"><span class="comment">#  r, reword = use commit, but edit the commit message</span></div><div class="line"><span class="comment">#  e, edit = use commit, but stop for amending</span></div><div class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit</span></div><div class="line"><span class="comment">#  f, fixup = like "squash", but discard this commit's log message</span></div><div class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Note that empty commits are commented out</span></div></pre></td></tr></table></figure></p><blockquote><p>假设我们只修改第一次的提交信息（也就是最上面的那一条），那么我们可以将最上面的那一条信息前面的<code>pick</code>改为<code>edit</code>或者<code>e</code>,保存退出。</p></blockquote><p>退出保存，终端会显示如下的信息:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Stopped at 3d8f8dbe792fb8ec971d697470ec8bfd0ce0f8d6... <span class="keyword">delete</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="keyword">rows</span></div><div class="line">You can amend the <span class="keyword">commit</span> <span class="keyword">now</span>, <span class="keyword">with</span></div><div class="line"></div><div class="line">    git <span class="keyword">commit</span> <span class="comment">--amend</span></div><div class="line"></div><div class="line">Once you <span class="keyword">are</span> satisfied <span class="keyword">with</span> your changes, run</div><div class="line"></div><div class="line">    git rebase <span class="comment">--continue</span></div></pre></td></tr></table></figure><p>注意：此次HEAD指针已经移动到了<code>3d8f8db</code>这一次的提交，那么我们可以继续运行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git commit --amend <span class="regexp">//</span> 修改第一次的提交</div><div class="line">git rebase --<span class="keyword">continue</span> <span class="regexp">//</span> 将HEAD指针在移动回最近的那次提交</div><div class="line"></div><div class="line"><span class="regexp">//</span> 上述<span class="number">2</span>个命令执行完成后，终端会显示如下信息</div><div class="line">Successfully rebased and updated refs<span class="regexp">/heads/</span>test.</div></pre></td></tr></table></figure></p><h3 id="压缩提交"><a href="#压缩提交" class="headerlink" title="压缩提交"></a>压缩提交</h3><blockquote><p>如果多个提交都是完成一个功能的，我们可以将这些提交压缩成一个提交，使用的命令也是rebase。我们从上面的例子可以知道，一旦进入文本编辑模式，会有’pick’, ‘edit’, ‘squash’, ‘fixup’选项。如果我们要压缩多个提交，只需要将每条提交前面的’pick’改为’squash’(后面再讲解squash与fixup的区别)。</p></blockquote><p>加入进入文本编辑模式如下<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">pick f<span class="number">7f</span><span class="number">3f</span>6d changed my name a <span class="keyword">bit</span></div><div class="line">pick <span class="number">310154</span>e updated README formatting <span class="keyword">and </span><span class="keyword">added </span><span class="keyword">blame</span></div><div class="line">pick a<span class="number">5f</span>4a0d <span class="keyword">added </span>cat-file</div><div class="line"></div><div class="line"><span class="comment"># Rebase 710f0f8..a5f4a0d onto 710f0f8</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Commands:</span></div><div class="line"><span class="comment">#  p, pick = use commit</span></div><div class="line"><span class="comment">#  r, reword = use commit, but edit the commit message</span></div><div class="line"><span class="comment">#  e, edit = use commit, but stop for amending</span></div><div class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit</span></div><div class="line"><span class="comment">#  f, fixup = like "squash", but discard this commit's log message</span></div><div class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Note that empty commits are commented out</span></div></pre></td></tr></table></figure></p><blockquote><p>squash就是下面的提交记录压缩到前面的提交记录中（将几条提交记录整合到一起），但是需要注意的是，不能讲最上面的那一条提交记录前面的<code>pick</code>改为<code>squash</code>, 那样就没有<strong>前一条记录了</strong>。如果你真的将最上面的那一天提交记录也改为<code>squash</code>，那么在退出文本编辑模式的时候，会提示<code>Cannot &#39;squash&#39; without a previous commit</code>。</p></blockquote><p>那么squash后的log如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">commit</span> <span class="number">8406738</span>ce7740d8800890b58bf3b6ee6aab23f3d</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span>@qq.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Wed Aug <span class="number">23</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">34</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">changed</span> my <span class="keyword">name</span> a <span class="built_in">bit</span></div><div class="line">    <span class="keyword">updated</span> README formatting <span class="keyword">and</span> added blame</div><div class="line">    added cat-<span class="keyword">file</span></div><div class="line"></div><div class="line"><span class="keyword">commit</span> <span class="number">20559</span>c2e26d7c8183c4ad73761d3e26c81de6af2</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span>@qq.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Sat Aug <span class="number">19</span> <span class="number">16</span>:<span class="number">56</span>:<span class="number">24</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">test</span> rebase configs</div></pre></td></tr></table></figure></p><p>查看log信息可以squash将三条提交记录压缩为一条，但是如果你使用<code>fixup</code>选项，那么rebase后会丢掉每条被你标记为<code>fixup</code>的提交记录，这是他和<code>squash</code>的唯一区别。</p><p>使用<code>fixup</code>的log会看起来如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">commit</span> <span class="number">8406738</span>ce7740d8800890b58bf3b6ee6aab23f3d</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span>@qq.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Wed Aug <span class="number">23</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">34</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line">    <span class="keyword">changed</span> my <span class="keyword">name</span> a <span class="built_in">bit</span></div><div class="line"></div><div class="line"><span class="keyword">commit</span> <span class="number">20559</span>c2e26d7c8183c4ad73761d3e26c81de6af2</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span>@qq.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Sat Aug <span class="number">19</span> <span class="number">16</span>:<span class="number">56</span>:<span class="number">24</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">test</span> rebase configs</div></pre></td></tr></table></figure></p><h2 id="git中的三棵树（三个区）"><a href="#git中的三棵树（三个区）" class="headerlink" title="git中的三棵树（三个区）"></a>git中的三棵树（三个区）</h2><blockquote><p>平时我们使用<code>git add</code>,<code>git commit</code>, <code>git checkout</code>, <code>git reset</code>等这些命令来做git的一些操作，其实内部就是在操作这三个区域：</p></blockquote><p>working: 工作区，平时文件的增删改都是在working区<br>index: 暂存区，使用<code>git add</code>将工作区的内容保存在暂存区，暂存区中的内容是即将要提交的内容<br>HEAD: 提交区，保存了当前分支最近的一次提交</p><img src="/2017/08/20/git-plumbing/git-three-tree.png" alt="git中的三棵树" title="git中的三棵树"><h2 id="reset压缩提交历史"><a href="#reset压缩提交历史" class="headerlink" title="reset压缩提交历史"></a>reset压缩提交历史</h2><blockquote><p>有了上面三棵树的基础，那么了解reset工作的机理就比较清晰了。</p></blockquote><p>reset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：</p><ol><li><p>移动 HEAD 分支的指向 （若指定了 –soft，则到此停止）</p></li><li><p>使索引看起来像 HEAD （若未指定 –hard，则到此停止）</p></li><li><p>使工作目录看起来像索引</p></li></ol><p>再来解析下上面1,2中括号中说明的含义</p><p>加入我们要修改前3次的提交<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 移动HEAD中的指针指向倒数第四次提交，此时修改的文件处于暂存区</div><div class="line">// 也就是说加了<span class="comment">--soft，会回退到git commit之前</span></div><div class="line">git <span class="keyword">reset</span> <span class="comment">--soft HEAD~3</span></div><div class="line"></div><div class="line">// 移动<span class="keyword">HEAD</span>中的指针指向倒数第四次提交，此时修改的文件处于暂存区</div><div class="line">// 更新暂存区，使工作区和暂存区看起来是一样的</div><div class="line">// 也就是说不加<span class="comment">--soft选项，回会退到git add之前</span></div><div class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>~<span class="number">3</span></div><div class="line"></div><div class="line">// <span class="comment">--hard是个危险选项，会让你撤销所有的修改</span></div><div class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD~3</span></div></pre></td></tr></table></figure></p><h2 id="reset重置路径"><a href="#reset重置路径" class="headerlink" title="reset重置路径"></a>reset重置路径</h2><blockquote><p>上面说的reset是针对提交历史的，我们也可以使用reset针对某个具体路径。<br>比如我们在使用<code>git add .</code>添加了所有的东西到暂存区，但是在提交的时候，发送有个文件或者文件夹中的东西不是当前功能的，那么可以通过reset来让文件或者文件集合回到工作区，只提交本次要提交的功能。<br>实际上，<code>git add</code>和<code>git reset</code>所做的事情是相反的，<code>git reset</code>本质是将HEAD区的中的文件拷贝到暂存区，并且不会移动HEAD中的分支指针。</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">On branch test</div><div class="line">Your branch <span class="keyword">and</span> <span class="string">'origin/test'</span> have diverged,</div><div class="line"><span class="keyword">and</span> have <span class="number">4</span> <span class="keyword">and</span> <span class="number">15</span> different commits <span class="keyword">each</span>, respectively.</div><div class="line">  (use <span class="string">"git pull"</span> <span class="built_in">to</span> <span class="built_in">merge</span> <span class="keyword">the</span> remote branch <span class="keyword">into</span> yours)</div><div class="line">Changes <span class="built_in">to</span> be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="built_in">to</span> unstage)</div><div class="line"></div><div class="line">    modified:   test.txt</div><div class="line"></div><div class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> <span class="built_in">to</span> update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="built_in">to</span> discard changes <span class="keyword">in</span> working <span class="built_in">directory</span>)</div><div class="line"></div><div class="line">    modified:   test.txt</div></pre></td></tr></table></figure><h2 id="撤销合并之reset修改引用，revert还原"><a href="#撤销合并之reset修改引用，revert还原" class="headerlink" title="撤销合并之reset修改引用，revert还原"></a>撤销合并之reset修改引用，revert还原</h2><p>假设现在在一个特性分支上工作，不小心将其合并到 master 中，现在提交历史看起来是这样：<br><img src="/2017/08/20/git-plumbing/three-part-merge.png" alt="three-part-merge.png" title=""></p><p>对于上面的问题，有2种修复方法：</p><blockquote><p>修改引用</p></blockquote><p>如果这个不想要的合并提交只存在于你的本地仓库中，最简单且最好的解决方案是移动分支到你想要它指向的地方。 大多数情况下，如果你在错误的 <code>git merge</code> 后运行 <code>git reset --hard HEAD~</code>，这会重置分支指向所以它们看起来像这样：</p><img src="/2017/08/20/git-plumbing/reset-hard.png" alt="reset-hard.png" title=""><p>这个方法的缺点是它会重写历史，在一个共享的仓库中这会造成问题的。 用简单的话说就是如果其他人已经有你将要重写的提交，你应当避免使用 reset。 如果有任何其他提交在合并之后创建了，那么这个方法也会无效；移动引用实际上会丢失那些改动。</p><blockquote><p>还原提交</p></blockquote><p>如果上面的修改引用的方法不适合你，那么你还可以使用还原操作。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// <span class="number">1</span>,表示需要保留下来的父节点，如下图，我们此处的父节点是<span class="built_in">C6</span>或则<span class="built_in">C4</span>，</div><div class="line">// 因为我们此时在master分支上，所有保留下来的父节点是<span class="built_in">C6</span></div><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>-m <span class="number">1</span> HEAD</div></pre></td></tr></table></figure></p><p>调用了上述命令之后，提交历史看起来是这样的：</p><img src="/2017/08/20/git-plumbing/reset-mainline-1.png" alt="reset-mainline-1.png" title=""><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">commit e<span class="number">5</span>a<span class="number">5</span>ab<span class="number">537309</span><span class="keyword">c</span><span class="number">2006676392</span>d<span class="number">4</span>fb<span class="number">5</span>dc<span class="number">1</span>ae<span class="number">2</span>dae<span class="number">78</span>e</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span><span class="title">@qq.com</span>&gt;</div><div class="line">Date:   Wed Aug <span class="number">23</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">20</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    Revert <span class="string">"Merge branch 'test revert in test branch'"</span></div><div class="line"></div><div class="line">    This reverts commit <span class="number">606</span>de<span class="number">1</span>d<span class="number">0</span>d<span class="number">3</span>d<span class="number">7313</span>ca<span class="number">3</span><span class="keyword">c</span><span class="number">0914</span><span class="keyword">c</span><span class="number">65</span>eb<span class="number">5</span>f<span class="number">77</span>ca<span class="number">97</span>a<span class="number">48</span>e, reversing</div><div class="line">    changes made <span class="keyword">to</span> <span class="number">2</span>ece<span class="number">042</span>de<span class="number">65</span><span class="keyword">c</span><span class="number">693</span><span class="keyword">c</span><span class="number">709</span>b<span class="number">3</span>f<span class="number">9</span>d<span class="number">34</span>d<span class="number">7</span>b<span class="number">598697984</span>ff.</div><div class="line"></div><div class="line">commit <span class="number">606</span>de<span class="number">1</span>d<span class="number">0</span>d<span class="number">3</span>d<span class="number">7313</span>ca<span class="number">3</span><span class="keyword">c</span><span class="number">0914</span><span class="keyword">c</span><span class="number">65</span>eb<span class="number">5</span>f<span class="number">77</span>ca<span class="number">97</span>a<span class="number">48</span>e</div><div class="line">Merge: <span class="number">2</span>ece<span class="number">042</span> d<span class="number">9</span>a<span class="number">757</span>b</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span><span class="title">@qq.com</span>&gt;</div><div class="line">Date:   Wed Aug <span class="number">23</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">16</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    Merge branch 'test revert in test branch'</div><div class="line"></div><div class="line">commit d<span class="number">9</span>a<span class="number">757</span>b<span class="number">76</span>f<span class="number">1e95</span><span class="keyword">c</span><span class="number">26</span>bd<span class="number">116</span>d<span class="number">18</span>f<span class="number">03338</span><span class="keyword">c</span><span class="number">0e5920</span><span class="keyword">c</span><span class="number">0</span></div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span><span class="title">@qq.com</span>&gt;</div><div class="line">Date:   Wed Aug <span class="number">23</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">10</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    revert 提交 in test branch</div><div class="line"></div><div class="line">commit <span class="number">2</span>ece<span class="number">042</span>de<span class="number">65</span><span class="keyword">c</span><span class="number">693</span><span class="keyword">c</span><span class="number">709</span>b<span class="number">3</span>f<span class="number">9</span>d<span class="number">34</span>d<span class="number">7</span>b<span class="number">598697984</span>ff</div><div class="line">Merge: <span class="keyword">c</span><span class="number">7434</span>ae <span class="number">44</span>ee<span class="number">440</span></div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span><span class="title">@qq.com</span>&gt;</div><div class="line">Date:   Wed Aug <span class="number">23</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">25</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    Merge branch 'feat <span class="keyword">add</span> <span class="number">9999</span> in feat branch'</div></pre></td></tr></table></figure><p>该命令会生成一条新的提交，我们如果查看上面的log,可以看出第一天提交信息，其中明确的写明了<code>e5a5ab5</code>是在<code>606de1d</code>的基础上生成的新提交，并且将<code>2ece042</code>的提交还原了。</p><blockquote><p>再来看看<code>git revert -m 1 HEAD</code>之后的历史</p></blockquote><p>新的提交 ^M 与 C6 有完全一样的内容，所以从这儿开始就像合并从未发生过，但是如果你尝试再次合并 topic 到 master Git 会感到困惑：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">merge</span> topic</div><div class="line">Already up-<span class="built_in">to</span>-<span class="built_in">date</span>.</div></pre></td></tr></table></figure></p><p>因为我们调用<code>git revert -m 1 HEAD</code>之后，已经将topic中提交剔除出去了，但是现在再来合并却发现并没有不一样的内容，也就是说我们无法再次将topic分支的提交合并到master.更糟的是，如果你在 topic 中增加工作然后再次合并，会产生冲突。</p><img src="/2017/08/20/git-plumbing/reset-merge.png" alt="reset-merge.png" title=""><p>解决这个最好的方式是撤消还原原始的合并，因为现在你想要引入被还原出去的修改，然后 创建一个新的合并提交：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">revert </span>^M之后，又会产生一次新的提交^^M，这次新的提交包含了开始剔除出去的内容（<span class="built_in">C3</span>,<span class="built_in">C4</span>）</div><div class="line">$ git <span class="keyword">revert </span>^M</div><div class="line">[master <span class="number">09</span>f0126] <span class="keyword">Revert </span><span class="string">"Revert "</span>Merge <span class="keyword">branch </span><span class="string">'topic'</span><span class="string">""</span></div><div class="line">$ git merge topic</div><div class="line"></div><div class="line">// merge topic时，会将^^M，<span class="built_in">C7</span>，<span class="built_in">C2</span>做一个三方合并</div></pre></td></tr></table></figure></p><img src="/2017/08/20/git-plumbing/reset-merge-2.png" alt="reset-merge-2.png" title=""><blockquote><p>在重新合并一个还原合并后的历史<br>在本例中，M 与 ^M 抵消了。 ^^M 事实上合并入了 C3 与 C4 的修改，C8 合并了 C7 的修改，所以现在 topic 已经完全被合并了。</p></blockquote><p>所有遇到以上情况，我们需要做三步：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>-m -<span class="number">1</span> HEAD</div><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>^M</div><div class="line"><span class="symbol">git</span> merge topic</div></pre></td></tr></table></figure></p><h2 id="reset与checkout的区别"><a href="#reset与checkout的区别" class="headerlink" title="reset与checkout的区别"></a>reset与checkout的区别</h2><blockquote><p>因为checkout也是操纵这三棵树，所以有必要了解下他们之间的区别</p></blockquote><img src="/2017/08/20/git-plumbing/reset-checkout.png" alt="reset和checkout区别对照表" title="reset和checkout区别对照表"><h2 id="快速合并与三方合并策略"><a href="#快速合并与三方合并策略" class="headerlink" title="快速合并与三方合并策略"></a>快速合并与三方合并策略</h2><h3 id="快速合并"><a href="#快速合并" class="headerlink" title="快速合并"></a>快速合并</h3><p>我们在合并2个分支的时候，经常看到如下信息<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Updating <span class="number">44</span>bc42f..a65dae0</div><div class="line">Fast-forward</div><div class="line"> test.txt | <span class="number">13</span> -------------</div><div class="line"> <span class="number">1</span> file <span class="section">changed</span>, <span class="number">13</span> deletions(-)</div></pre></td></tr></table></figure></p><img src="/2017/08/20/git-plumbing/git-fast-forward.png" alt="快速合并" title="快速合并"><blockquote><p>如果一个分支和它的源分支没有存在支路，如上图。<br>就是说iss53分支从master分支上切出来之后，并且在iss53上做了几次提交，但是在这期间master分支并未有新的提交合并，那么此时将iss53分支合并到master分支采用的就是<code>Fast-forward</code>策略。</p></blockquote><h3 id="三方合并策略"><a href="#三方合并策略" class="headerlink" title="三方合并策略"></a>三方合并策略</h3><blockquote><p>将几个分支的共同祖先节点和每个分支最后提交的节点进行一个合并。</p></blockquote><p>我们在合并2个分支的时候，也会经常看到如下信息<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Merge made by the 'recursive' strategy.</div><div class="line"> test.txt | <span class="number">2</span> +-</div><div class="line"> <span class="number">1</span> file <span class="section">changed</span>, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div></pre></td></tr></table></figure></p><img src="/2017/08/20/git-plumbing/three-part-merge.png" alt="git三方合并" title="git三方合并"><blockquote><p>如上图，topic分支从master分支C2切出来，然后做了C3,C4的提交，在此期间，master分支也有C5，C6的提交合并，那么此时将topic分支合并到master分支就会采用三方合并的策略。</p></blockquote><h2 id="ours和theirs冲突合并策略"><a href="#ours和theirs冲突合并策略" class="headerlink" title="ours和theirs冲突合并策略"></a>ours和theirs冲突合并策略</h2><blockquote><p>合并分支，偶有遇到冲突在所难免，git通常让你自己手动解决冲突后再进行一个合并。但是也提供了一些其他快速解决冲突的方案。</p></blockquote><p>比如，2个人同时修改了某一个文件，那么在合并的时候就会遇到冲突，但是我只想保留某一方的提交。那么此时我们就可以使用ours和theirs策略。</p><p>如：将topic分支合并到master分支存在冲突<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 保留master分支上的代码</span></div><div class="line">git <span class="keyword">merge</span> -Xours topic</div><div class="line"></div><div class="line"><span class="comment">// 保留topic分支上的代码</span></div><div class="line">git <span class="keyword">merge</span> -Xtheirs topic</div></pre></td></tr></table></figure></p><h2 id="git-grep搜索"><a href="#git-grep搜索" class="headerlink" title="git grep搜索"></a>git grep搜索</h2><blockquote><p>从提交历史或者工作目录中查找一个字符串或者正则表达式<br><code>git grep -n fmtDate</code></p></blockquote><h2 id="几个常用的底层命令"><a href="#几个常用的底层命令" class="headerlink" title="几个常用的底层命令"></a>几个常用的底层命令</h2><ul><li>git hash-object</li></ul><blockquote><p>将数据写入到git数据库中</p></blockquote><ul><li>git cat-file</li></ul><blockquote><p>从git数据库中取出数据</p></blockquote><ul><li>git update-index</li></ul><blockquote><p>将文件加入到暂存区或更新暂存区的文件</p></blockquote><ul><li>git write-tree</li></ul><blockquote><p>将暂存区内容写入到一个树对象</p></blockquote><ul><li>git read-tree</li></ul><blockquote><p>把树对象读入暂存区</p></blockquote><ul><li>git commit-tree</li></ul><blockquote><p>创建一个提交对象</p></blockquote><ul><li>git update-ref</li></ul><blockquote><p>更新某个引用</p></blockquote><ul><li>git symbolic-ref HEAD</li></ul><blockquote><p>查看 HEAD 引用对应的值</p></blockquote><ul><li>git symbolic-ref HEAD refs/heads/test</li></ul><blockquote><p>设置HEAD引用的值</p></blockquote><h2 id="几种常见的对象"><a href="#几种常见的对象" class="headerlink" title="几种常见的对象"></a>几种常见的对象</h2><ul><li>blob object: 数据对象</li><li>tree object: 树对象</li><li>commit object: 提交对象</li><li>tag object: 标签对象，类似于提交对象，但是标签对象通常指向一个提交对象，而不是一个树对象</li></ul><h2 id="几个git文件的合法模式"><a href="#几个git文件的合法模式" class="headerlink" title="几个git文件的合法模式"></a>几个git文件的合法模式</h2><ul><li>100644: 普通文件</li><li>100755: 可执行文件</li><li>120000: 符号链接</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git文件一览&quot;&gt;&lt;a href=&quot;#git文件一览&quot; class=&quot;headerlink&quot; title=&quot;.git文件一览&quot;&gt;&lt;/a&gt;.git文件一览&lt;/h2&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="git" scheme="https://xxxxxmiss.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://xxxxxmiss.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>web-components</title>
    <link href="https://xxxxxmiss.github.io/2017/08/13/web-components/"/>
    <id>https://xxxxxmiss.github.io/2017/08/13/web-components/</id>
    <published>2017-08-12T16:07:36.000Z</published>
    <updated>2017-08-13T17:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-Components-web组件"><a href="#Web-Components-web组件" class="headerlink" title="Web Components(web组件)"></a>Web Components(web组件)</h2><blockquote><p>web组件是一种可以复用的html单元，他是浏览器的一部分，所以不需要引入额外的库来使用他。<br>Web Components技术主要由以下4部分组成，但是每一部分都可以单独使用</p></blockquote><ul><li>Custom Elments(自定义元素)</li><li>HTML Templates(html模板)</li><li>Shadow DOM</li><li>HTML Imports<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"myfile.html"</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h2 id="Custom-Elements"><a href="#Custom-Elements" class="headerlink" title="Custom Elements"></a>Custom Elements</h2><blockquote><p>自定义元素提供了一种可以让你创建自定义html元素的能力。它也是web componnets技术的组成部分，但是你也可以独立使用它们。<br>自定义元素有着自己的生命周期，这就意味着你可以在不同的生命周期阶段通过脚本绑定不同的行为。<br>例如，当它们被插入到dom中（connected），当它们从dom中移除时（disconnected），又或者它们的特性发生改变的时候（attributeChanged），你都可以在相应的时期做你想做的事情。</p></blockquote><h3 id="自定义元素的方法"><a href="#自定义元素的方法" class="headerlink" title="自定义元素的方法"></a>自定义元素的方法</h3><p>constructor()</p><blockquote><p>当元素被创建或者更新的时候调用</p></blockquote><p>connectedCallback()</p><blockquote><p>当元素被插入到文档流中或者被插入到shadow dom中的时候调用</p></blockquote><p>disconnectedCallback()</p><blockquote><p>当元素从文档流中移除的时候调用</p></blockquote><p>attributeChangedCallback(attributeName, oldValue, newValue, namespace)</p><blockquote><p>当元素<strong>被观察的特性</strong>被改变，被追加，被移除，被取代的时候调用</p></blockquote><p>adoptedCallback(oldDocument, newDocument)</p><blockquote><p>当元素被插入到一个新的文档流中的时候调用</p></blockquote><p>自定义元素更多的时候我们采用es6类语法来进行创建：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"custom"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第二行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">my-element</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-element</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyElement</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="comment">// 一定要记得先调用父类构造器,因为我们在子类的构造器中使用了this</span></div><div class="line">        <span class="comment">// 否则就报错</span></div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> tplContent = <span class="built_in">document</span>.getElementById(<span class="string">'custom'</span>).content</div><div class="line">        <span class="keyword">var</span> shadowRoot = <span class="keyword">this</span>.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">'open'</span> &#125;)</div><div class="line">        shadowRoot.appendChild(tplContent)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    connectedCallback()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'自定义元素被插入到shadow dom中'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">customElements.define(<span class="string">'my-element'</span>, MyElement)</div></pre></td></tr></table></figure><h3 id="Observed-attributes"><a href="#Observed-attributes" class="headerlink" title="Observed attributes"></a>Observed attributes</h3><blockquote><p>如果要使用自定义元素的attributeChangedCallback来观察自定义元素特性的变化，那么必须在初始化自定义元素的构造器中列出需要观察的特性–在类中使用静态的get存取器列出需要观察的特性。</p></blockquote><p>改造上面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyElement</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="comment">// 一定要记得先调用父类构造器,因为我们在子类的构造器中使用了this</span></div><div class="line">        <span class="comment">// 否则就报错</span></div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> tplContent = <span class="built_in">document</span>.getElementById(<span class="string">'custom'</span>).content</div><div class="line">        <span class="keyword">var</span> shadowRoot = <span class="keyword">this</span>.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">'open'</span> &#125;)</div><div class="line">        shadowRoot.appendChild(tplContent)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> get observedAttributes()&#123; <span class="keyword">return</span> [<span class="string">'name'</span>] &#125;</div><div class="line"></div><div class="line">    attributeChangedCallback(attr, oldValue, newValue)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'oldValue: '</span>, oldValue)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'newValue: '</span>, newValue)</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(<span class="string">'name'</span> === attr)&#123;</div><div class="line">            <span class="keyword">this</span>.textContent = <span class="string">`Hello, <span class="subst">$&#123;newValue&#125;</span>`</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    connectedCallback()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'自定义元素被插入到shadow dom中'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">customElements.define(<span class="string">'my-element'</span>, MyElement)</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).setAttribute(<span class="string">'name'</span>, <span class="string">'ggsmd'</span>)</div><div class="line">&#125;, <span class="number">5000</span>)</div></pre></td></tr></table></figure></p><p>控制台输出如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化的时候输出</span></div><div class="line"><span class="string">oldValue:</span> test</div><div class="line"><span class="string">newValue:</span> <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="comment">// 5s之后输出</span></div><div class="line"><span class="string">oldValue:</span> test</div><div class="line"><span class="string">newValue:</span> ggsmd</div></pre></td></tr></table></figure></p><h2 id="HTML-Templates"><a href="#HTML-Templates" class="headerlink" title="HTML Templates"></a>HTML Templates</h2><blockquote><p><template>元素中的内容在页面加载的时候并不会渲染，但是你可以通过js来操作其中的内容。<br>你可以认为<template>元素中保存了你接下来要使用的内容片段，在页面加载的时候，解析引擎并不处理<template>中内容，也不做任何渲染，引擎只确保<template>中的内容是否有效。</template></template></template></template></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"producttable"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>UPC_Code<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Product_Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- existing data could optionally be included here --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"productrow"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"record"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 检查浏览器是否支持template元素</span></div><div class="line"><span class="keyword">if</span>(<span class="string">'content'</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">'template'</span>))&#123;</div><div class="line">    <span class="keyword">var</span> t = <span class="built_in">document</span>.querySelector(<span class="string">'#productrow'</span>)</div><div class="line">    , td = t.content.querySelectorAll(<span class="string">'td'</span>)</div><div class="line">    td[<span class="number">0</span>].textContent = <span class="string">'AAAA'</span></div><div class="line">    td[<span class="number">1</span>].textContent = <span class="string">'BBBB'</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'tbody'</span>)</div><div class="line">    , clone = <span class="built_in">document</span>.importNode(t.content, <span class="literal">true</span>)</div><div class="line">    tbody.appendChild(clone)</div><div class="line"></div><div class="line">    <span class="comment">// 复用template元素中的内容</span></div><div class="line">    td[<span class="number">0</span>].textContent = <span class="string">'1111'</span></div><div class="line">    td[<span class="number">1</span>].textContent = <span class="string">'2222'</span></div><div class="line">    <span class="keyword">var</span> clone2 = <span class="built_in">document</span>.importNode(t.content, <span class="literal">true</span>)</div><div class="line">    tbody.appendChild(clone2)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">// 不支持的浏览器可以引入polyfill</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="HTMLTemplateElement接口"><a href="#HTMLTemplateElement接口" class="headerlink" title="HTMLTemplateElement接口"></a>HTMLTemplateElement接口</h3><blockquote><p>通过HTMLTemplateElement接口，我们可以操作<template>元素中的内容</template></p></blockquote><img src="/2017/08/13/web-components/element-template.png" alt="HTMLTemplateElement接口" title="HTMLTemplateElement接口"><blockquote><p>上图是HTMLTemplateElement接口的继承图，也就是说HTMLTemplateElement继承了HTMLElement上所有的属性和方法。</p></blockquote><h4 id="HTMLTemplateElement特有的一个属性"><a href="#HTMLTemplateElement特有的一个属性" class="headerlink" title="HTMLTemplateElement特有的一个属性"></a>HTMLTemplateElement特有的一个属性</h4><p>HTMLTemplateElement.content：只读的属性<br>返回值：返回<template>元素中的内容，是一个DocumentFragment</template></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#test'</span>).content.nodeType === <span class="number">11</span></div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure><h2 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h2><blockquote><p>Shadow DOM为Web Components中的DOM, CSS提供了一个包装。<br>Shadow DOM将Web Components中的DOM, CSS和文档流中的dom进行了一个隔离。因为一个大型网页，如果前期css组织的不合理，就会导致css各种覆盖，从而使网页样式变得难以把控。通过shadow dom，可以进行一个隔离。<br>它是Web Components技术的一部分，但是你也可以单独使用它们。</p></blockquote><h3 id="基本的使用"><a href="#基本的使用" class="headerlink" title="基本的使用"></a>基本的使用</h3><blockquote><p>shadow dom必须被绑定到某一个存在的元素上，这个元素可以是html文档流中已经存在的元素，也可以是通过js创建的元素(包括自定义元素)。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"hostElement"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="comment">// 此时shadow dom还是空的，没有内容</span></div><div class="line">        <span class="keyword">var</span> shadow = <span class="built_in">document</span>.querySelector(<span class="string">'#hostElement'</span>)</div><div class="line">            .attachShadow(&#123; <span class="attr">mode</span>: <span class="string">'open'</span> &#125;)</div><div class="line">        <span class="comment">// 往shadow dom中添加内容</span></div><div class="line">        shadow.innerHTML = <span class="string">'&lt;span&gt;Here is some new text&lt;/span&gt;'</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="shadow-dom的样式"><a href="#shadow-dom的样式" class="headerlink" title="shadow dom的样式"></a>shadow dom的样式</h3><blockquote><p>继续接着上面的例子，如果我们需要给shadow dom添加样式。就跟我们平时使用内联样式一样，只不过将style标签极其里面的样式全部作为shadow dom的innerHTML。如下： </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shadow.innerHTML = '<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">span</span> &#123; <span class="attribute">color</span>: red; &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>'</div></pre></td></tr></table></figure><h3 id="shadow-dom相关API"><a href="#shadow-dom相关API" class="headerlink" title="shadow dom相关API"></a>shadow dom相关API</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> shadowRoot = element.attachShadow(shadowRootInit)</div></pre></td></tr></table></figure><blockquote><p>绑定一个shadow dom树到一个指定的元素上，并且返回ShadowRoot的引用。<br>shadowRoot也是一个文档片段。 <code>shadowRoot.nodeType === 11</code></p></blockquote><p>shadowRootInit是一个如下的对象：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">mode</span>: <span class="string">'open'</span></div><div class="line">    // mode: <span class="string">'closed'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>open: 指定开放的包裹模式，这就意味着在外面可以使用<code>element.shadowRoot</code>来访问shadow dom中的内容。</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">element</span>.shadowRoot === shadowRoot(通过attachShadow返回的shadowRoot的引用)<span class="comment"></span></div><div class="line">// true</div></pre></td></tr></table></figure><ul><li>closed: 指定为闭合的包裹模式，这就意味着在外面无法使用任何方法来访问shadow dom中的内容。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">element.shadowRoot</span> <span class="string">===</span> <span class="string">shadowRoot(通过attachShadow返回的shadowRoot的引用)</span></div><div class="line"><span class="string">//</span> <span class="literal">false</span></div><div class="line"><span class="string">element.shadowRoot</span> <span class="string">===</span> <span class="literal">null</span></div><div class="line"><span class="string">//</span> <span class="literal">true</span></div></pre></td></tr></table></figure><h3 id="ShadowRoot接口"><a href="#ShadowRoot接口" class="headerlink" title="ShadowRoot接口"></a>ShadowRoot接口</h3><p>ShadowRoot.mode</p><blockquote><p>只读，返回值为’open’或者’closed’</p></blockquote><p>ShadowRoot.host</p><blockquote><p>只读，返回shadow dom的宿主元素</p></blockquote><p>ShadowRoot.innerHTML</p><blockquote><p>返回ShadowRoot内部的dom树</p></blockquote><h3 id="slot元素"><a href="#slot元素" class="headerlink" title="slot元素"></a>slot元素</h3><blockquote><p>slot, 翻译为“插槽”。slot元素也是web components技术的一个组成单元：他是web components内的一个占位符，通过这个占位符，你可以在接下来使用的web组件内插入自己想要的标签。<br>slot元素一般情况下和template元素组合使用。</p></blockquote><h3 id="Attributes（特性）"><a href="#Attributes（特性）" class="headerlink" title="Attributes（特性）"></a>Attributes（特性）</h3><blockquote><p>slot元素和其他的html元素一样，有着一些通用的属性，比如<code>style</code>,<code>class</code>等，具体有哪些，可以<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes" target="_blank" rel="external">参看这里</a></p></blockquote><h4 id="Attributes之name特性"><a href="#Attributes之name特性" class="headerlink" title="Attributes之name特性"></a>Attributes之name特性</h4><blockquote><p>给slot元素添加一个名字，因为一个web组件内部可能有多个slot,可以用name特性加以区分。没有添加name特性的slot元素，可以理解为<code>name=&quot;&quot;</code>。<br>在Vue框架中，也有内置的slot组件，它实现的功能和标准web components中的slot元素是一样的。但在Vue中，没有添加name特性的slot组件，相当于<code>name=&quot;default&quot;</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"slot-template"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一段文本<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"another"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>这是另外一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slots = <span class="built_in">document</span>.querySelector(<span class="string">'#slot-template'</span>)</div><div class="line">    .content.querySelectorAll(<span class="string">'slot'</span>)</div><div class="line"><span class="built_in">Array</span>.from(slots).forEach(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">console</span>.log(s.name))</div><div class="line"><span class="comment">// ""</span></div><div class="line"><span class="comment">// another</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web-Components-web组件&quot;&gt;&lt;a href=&quot;#Web-Components-web组件&quot; class=&quot;headerlink&quot; title=&quot;Web Components(web组件)&quot;&gt;&lt;/a&gt;Web Components(web组件)&lt;/h2
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
</feed>
