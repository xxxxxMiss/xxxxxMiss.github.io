<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青史成灰</title>
  
  <subtitle>Every journey begins with the first step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xxxxxmiss.github.io/"/>
  <updated>2017-10-10T12:49:34.000Z</updated>
  <id>https://xxxxxmiss.github.io/</id>
  
  <author>
    <name>xxxxxMiss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css动画常见案例</title>
    <link href="https://xxxxxmiss.github.io/2017/10/10/css-transition-1/"/>
    <id>https://xxxxxmiss.github.io/2017/10/10/css-transition-1/</id>
    <published>2017-10-10T12:28:18.000Z</published>
    <updated>2017-10-10T12:49:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="https://xxxxxmiss.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建自己的博客</title>
    <link href="https://xxxxxmiss.github.io/2017/09/28/create-blog/"/>
    <id>https://xxxxxmiss.github.io/2017/09/28/create-blog/</id>
    <published>2017-09-28T15:17:08.000Z</published>
    <updated>2017-10-11T04:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node</a></li><li><a href="https://github.com/" target="_blank" rel="external">github</a></li><li><a href="https://pages.github.com/" target="_blank" rel="external">git-pages</a></li><li><a href="https://git-scm.com/" target="_blank" rel="external">git</a>或者其他的版本控制工具</li><li><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">Hexo</a>或者其他的SSG</li></ul><h2 id="Hexo相关配置"><a href="#Hexo相关配置" class="headerlink" title="Hexo相关配置"></a>Hexo相关配置</h2><blockquote><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a></p></blockquote><h3 id="几个主要命令"><a href="#几个主要命令" class="headerlink" title="几个主要命令"></a>几个主要命令</h3><ul><li>hexo new post/draft &lt;file-name&gt;</li></ul><blockquote><p>会在source目录下的_posts或则_drafts下生成file-name.md。<br>也就是说你在使用<code>hexo new</code>创建文件的时候，不需要带文件扩展名，默认生成markdown文件</p></blockquote><ul><li>hexo clean</li></ul><blockquote><p>清楚缓存，一般在使用<code>hexo deploy</code>命令时，先执行该命令。</p></blockquote><ul><li>hexo deploy</li></ul><blockquote><p>推送到仓库到远程</p></blockquote><p>当然，你也可以加入自己的逻辑，用脚本将这些命令串起来，这样在发布以及提交源代码的时候就可以一步到位：比如<a href="https://github.com/xxxxxMiss/xxxxxMiss.github.io/blob/gh-pages/deploy.sh" target="_blank" rel="external">像这样</a></p><h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><blockquote><p>github上常用markdown语法：<a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">Mastering Markdown</a><br>简体中文版：<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">markdown</a></p></blockquote><p>注意：</p><ul><li>在hexo中使用markdown时，引用外部资源的时候，需要按照hexo提供的语法来引用。<br>比如引用图片：<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_img</span> stacking-props.png 其他属性的元素 %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure></li></ul><p>上面的<code></code>是固定语法，<code>stacking-props.png</code>是对应的资源文件，<code>其他属性的元素</code>是鼠标hover时候显示的字符。当然了，你也可以不传该参数，那么hover的时候就显示<code>stacking-props.png</code></p><ul><li>按照上一步引用资源，需要在<code>_config.yml</code>中将<code>post_asset_folder</code>选项设置为<code>true</code>。一旦开启该选项，那么在每次使用<code>hexo new</code>创建文章的时候，都会在对于的目录下生成和文件名相同的目录，你的静态资源就放到该目录下。</li></ul><p>比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post hexo-blog</div></pre></td></tr></table></figure></p><p>那么在<code>source/_posts</code>下就会生成<code>hexo-blog.md</code>文件和<code>hexo-blog</code>文件夹。</p><ul><li>markdown中的一些特殊字符需要转义<br>比如：<code>&lt;</code>需要写成<code>&amp;lt;</code></li></ul><p>更多选项参考<a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="external">官方文档这里</a></p><h2 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h2><blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt" target="_blank" rel="external">yaml</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
      
    
    </summary>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
      <category term="frontend-framework" scheme="https://xxxxxmiss.github.io/tags/frontend-framework/"/>
    
  </entry>
  
  <entry>
    <title>event-1</title>
    <link href="https://xxxxxmiss.github.io/2017/09/28/event-1/"/>
    <id>https://xxxxxmiss.github.io/2017/09/28/event-1/</id>
    <published>2017-09-28T03:50:36.000Z</published>
    <updated>2017-10-11T04:04:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器事件系统"><a href="#浏览器事件系统" class="headerlink" title="浏览器事件系统"></a>浏览器事件系统</h2><ul><li>[x] this is a completed item</li><li>[ ] this is a incomplete item</li></ul><p>emoji! :sparkles: :camel: :boom:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;浏览器事件系统&quot;&gt;&lt;a href=&quot;#浏览器事件系统&quot; class=&quot;headerlink&quot; title=&quot;浏览器事件系统&quot;&gt;&lt;/a&gt;浏览器事件系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[x] this is a completed item&lt;/li&gt;
&lt;li&gt;[ ] th
      
    
    </summary>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>awk内置函数</title>
    <link href="https://xxxxxmiss.github.io/2017/09/19/awk-build-in-functions/"/>
    <id>https://xxxxxmiss.github.io/2017/09/19/awk-build-in-functions/</id>
    <published>2017-09-19T12:42:18.000Z</published>
    <updated>2017-09-20T02:48:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在awk中-需要知道的点"><a href="#在awk中-需要知道的点" class="headerlink" title="在awk中, 需要知道的点"></a>在awk中, 需要知道的点</h2><ul><li>数组，字符串等等，索引都是从<strong>1</strong>开始</li><li>变量的取值直接写变量名<code>var</code>，而不像shell中需要<code>$var</code>，除了内置的特殊变量$0，$1，$2，…等</li><li>FS：指定列分隔符，如：<code>BEGIN{FS=&quot;:&quot;}</code></li><li>内置NF变量：以指定分隔符<code>FS</code>分割出来的列数</li><li>内置NR变量：当前处理的行数</li></ul><h2 id="split-str-arr-field-separator"><a href="#split-str-arr-field-separator" class="headerlink" title="split(str, arr, field separator)"></a>split(str, arr, field separator)</h2><blockquote><p>使用指定的列分隔符将行分割到一个数组中。如果列分隔符没有传值，默认使用IFS的值。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;split($0, arr, ":"); print arr[1]"--&gt;"arr[2]"--&gt;"arr[3]&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">12--&gt;ab--&gt;&amp;&amp;</div></pre></td></tr></table></figure><h2 id="substr-str-start-length"><a href="#substr-str-start-length" class="headerlink" title="substr(str, start, length)"></a>substr(str, start, length)</h2><blockquote><p>从str中start位置开始截取长度为length的字符串。<br>如果没有截取长度length,那么默认截取到str的末尾。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;s=substr($0, 3); print s&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">:ab:&amp;&amp;</div><div class="line"></div><div class="line"></div><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;s=substr($0, 3, 4); print s&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">:ab:</div></pre></td></tr></table></figure><h2 id="index-str-target-str"><a href="#index-str-target-str" class="headerlink" title="index(str, target_str)"></a>index(str, target_str)</h2><blockquote><p>查找target_str在str中出现的位置，如果找到了，那么返回第一次找到的索引；<br>如果没有找到，返回0</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;i=index($0, "a"); print "index: "i&#125;'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符a在time中索引为4</span></div><div class="line">➜  shell ./test.sh</div><div class="line">index: 4</div><div class="line"></div><div class="line"></div><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;i=index($0, "x"); print "index: "i&#125;'</span></div><div class="line"></div><div class="line"><span class="comment"># 没有找到，返回0</span></div><div class="line">➜  shell ./test.sh</div><div class="line">index: 0</div></pre></td></tr></table></figure><h2 id="gsub-regexp-sub-str-str"><a href="#gsub-regexp-sub-str-str" class="headerlink" title="gsub(regexp, sub_str, str)"></a>gsub(regexp, sub_str, str)</h2><blockquote><p>将str中匹配regexp的子串全部替换为sub_str, 并返回成功匹配的次数。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"12:ab:&amp;&amp;"</span></div><div class="line"><span class="comment"># count为当前行成功匹配的次数</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;count=gsub("[[:digit:]]", "**", $0); print $0"\nmatches count: "count&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">****:ab:&amp;&amp;</div><div class="line">matches count: 2</div></pre></td></tr></table></figure><h2 id="sub-regexp-sub-str-str"><a href="#sub-regexp-sub-str-str" class="headerlink" title="sub(regexp, sub_str, str)"></a>sub(regexp, sub_str, str)</h2><blockquote><p>将str中第一次匹配regexp的子串替换为sub_str, 并返回成功匹配的次数(0或者1)。<br>和上面的gsub比较，就相当于一个是全局匹配，一个是单词匹配。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"c21:ab:&amp;&amp;"</span></div><div class="line"><span class="comment"># count为当前行成功匹配的次数</span></div><div class="line"><span class="comment"># 因为只会匹配一次，所以成功匹配，那么返回1；没有找到一个匹配，返回0</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'&#123;count=sub("[[:digit:]]", "**", $0); print $0"\nmatches count: "count&#125;'</span></div><div class="line"></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">c**1:ab:&amp;&amp;</div><div class="line">matches count: 1</div></pre></td></tr></table></figure><h2 id="length-str"><a href="#length-str" class="headerlink" title="length(str)"></a>length(str)</h2><blockquote><p>返回指定字符串的长。当不指定str,那么返回当前行的字符串长度。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"c21:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'BEGIN&#123;FS=":"&#125; &#123;</span></div><div class="line">  for(i = 1; i &lt;= NF; i++)&#123;</div><div class="line">    print "line&lt; "i" &gt; char count: "length($i)</div><div class="line">  &#125;</div><div class="line">&#125;'</div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">line&lt; 1 &gt; char count: 3</div><div class="line">line&lt; 2 &gt; char count: 2</div><div class="line">line&lt; 3 &gt; char count: 2</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  shell cat test.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">time=<span class="string">"c21:ab:&amp;&amp;"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">'BEGIN&#123;FS=":"&#125; &#123;print length()&#125;'</span></div><div class="line"></div><div class="line">➜  shell ./test.sh</div><div class="line">9</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在awk中-需要知道的点&quot;&gt;&lt;a href=&quot;#在awk中-需要知道的点&quot; class=&quot;headerlink&quot; title=&quot;在awk中, 需要知道的点&quot;&gt;&lt;/a&gt;在awk中, 需要知道的点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组，字符串等等，索引都是从&lt;strong&gt;
      
    
    </summary>
    
      <category term="shell" scheme="https://xxxxxmiss.github.io/categories/shell/"/>
    
    
      <category term="shell" scheme="https://xxxxxmiss.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>git进阶（二）</title>
    <link href="https://xxxxxmiss.github.io/2017/09/19/git-plumbing-2/"/>
    <id>https://xxxxxmiss.github.io/2017/09/19/git-plumbing-2/</id>
    <published>2017-09-18T17:23:39.000Z</published>
    <updated>2017-09-19T17:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git配置文件的位置"><a href="#git配置文件的位置" class="headerlink" title="git配置文件的位置"></a>git配置文件的位置</h2><ul><li>/etc/gitconfig</li><li>~/.gitconfig || $XDG_CONFIG_HOME/git/config</li><li>$PWD/.git/config</li></ul><h2 id="查看git配置"><a href="#查看git配置" class="headerlink" title="查看git配置"></a>查看git配置</h2><blockquote><p>对于配置选项的CURD操作，不指定–system,–global,–local选项，<br>CUD默认都是–local选项, R操作查询所有的配置（相当于同时指定了三个选项）。</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查看系统级别的所有配置</span></div><div class="line">git <span class="keyword">config</span> --system -l</div><div class="line"></div><div class="line"><span class="comment">// 查看全局的所有配置(默认查看global级别)</span></div><div class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> -l</div><div class="line"></div><div class="line"><span class="comment">// 查看当前仓库的配置</span></div><div class="line">git <span class="keyword">config</span> --<span class="keyword">local</span> -l</div><div class="line"></div><div class="line"><span class="comment">// 查看具体某一项的配置</span></div><div class="line">git <span class="keyword">config</span> [--system|--<span class="keyword">global</span>|--<span class="keyword">local</span>] --get core<span class="variable">.editor</span></div><div class="line"><span class="comment">// 默认查看local级别</span></div><div class="line">git <span class="keyword">config</span> --get core<span class="variable">.editor</span></div></pre></td></tr></table></figure><h2 id="设置git配置"><a href="#设置git配置" class="headerlink" title="设置git配置"></a>设置git配置</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">config</span> [--system|--<span class="keyword">global</span>|--<span class="keyword">local</span>] user<span class="variable">.name</span> <span class="string">"qsch"</span></div></pre></td></tr></table></figure><h2 id="删除某个配置"><a href="#删除某个配置" class="headerlink" title="删除某个配置"></a>删除某个配置</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除global级别的commit.template配置</span></div><div class="line">git <span class="built_in">config</span> --global --unset commit.<span class="keyword">template</span></div><div class="line"></div><div class="line"><span class="comment">// 删除local级别</span></div><div class="line">git <span class="built_in">config</span> --local --unset commit.<span class="keyword">template</span></div><div class="line"><span class="comment">// 或则</span></div><div class="line">git <span class="built_in">config</span> --unset commit.<span class="keyword">template</span></div></pre></td></tr></table></figure><h2 id="commit-template"><a href="#commit-template" class="headerlink" title="commit.template"></a>commit.template</h2><blockquote><p>配置提交信息的模板。使用同一份模板，可以保持团队成员的提交信息风格保持一致。</p></blockquote><p>比如你这样设置<code>git config commit.template ~/.gitmessage.txt</code>,<br>那么当你<code>git commit</code>的时候，会进入你设置的提交信息的模板编辑页面，修改保存，那么修改后的提交信息就是本次的提交信息。</p><h2 id="core-excludesfile"><a href="#core-excludesfile" class="headerlink" title="core.excludesfile"></a>core.excludesfile</h2><blockquote><p>global级别的.gitignore。<br>一般每个项目下都会有.gitignore文件，如果配置了global级别的.gitignore,那么对于所有的git仓库都会生效。<br>如：<br><code>git config core.excludesfile ~/.gitignore_global</code> </p></blockquote><h2 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h2><blockquote><p>用来处理各平台之间的换行符回车符之间的一致性问题</p></blockquote><ul><li>使用linux或者mac,一般设置为<code>input</code>,那么在检出的时候，自动将<code>\r\n</code>转化为<code>\n</code>。</li><li>使用windows，可以设置为<code>true</code>,那么在检出的时候，自动将<code>\n</code>转化为<code>\r\n</code>。</li><li>如果只在windows上开发，那么可以设置为<code>false</code>,关闭该功能。</li></ul><h2 id="使用npm安装你自己编写的脚本"><a href="#使用npm安装你自己编写的脚本" class="headerlink" title="使用npm安装你自己编写的脚本"></a>使用npm安装你自己编写的脚本</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git配置文件的位置&quot;&gt;&lt;a href=&quot;#git配置文件的位置&quot; class=&quot;headerlink&quot; title=&quot;git配置文件的位置&quot;&gt;&lt;/a&gt;git配置文件的位置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;/etc/gitconfig&lt;/li&gt;
&lt;li&gt;~/.gitco
      
    
    </summary>
    
      <category term="git" scheme="https://xxxxxmiss.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://xxxxxmiss.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>vue-base</title>
    <link href="https://xxxxxmiss.github.io/2017/09/06/vue-base/"/>
    <id>https://xxxxxmiss.github.io/2017/09/06/vue-base/</id>
    <published>2017-09-06T03:11:27.000Z</published>
    <updated>2017-09-07T17:37:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vm-mount-elementOrSelector"><a href="#vm-mount-elementOrSelector" class="headerlink" title="vm.$mount( [elementOrSelector] )"></a>vm.$mount( [elementOrSelector] )</h2><blockquote><p>该方法返回vue实例本身。<code>.vue</code>文件，基本写法都是<code>export default {}</code>, 这导出的是一个构造配置选项。<br>Vue构造函数如下</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> <span class="params">(options)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</div><div class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)) &#123;</div><div class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>._init(options)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以我们.vue导出的就是构造函数需要的<code>options</code>。</p><p>如果<code>options</code>提供了<code>el</code>选项，那么vm实例会挂载到<code>el</code>对应的dom元素上（el所对应的元素被vm生成的html字符串替换掉）。如果<code>options</code>选项为提供<code>el</code>选项，那么生成的vm实例处于未挂载的状态。</p><p>但是我们.vue文件中，并未提供<code>el</code>选项，但是vm生成的html字符串依然可以正常的渲染在文档流中，为什么？</p><blockquote><p>因为我们在搭配路由使用的时候，需要指定<code>&lt;router-view&gt;</code>组件，其实该组件就是一个挂载点。</p></blockquote><p>TODO：经常看到<code>new Vue(options).$mount().$el</code>, 其实<code>new Vue(options).$el</code>返回同样的结果，有什么区别？</p><h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><blockquote></blockquote><h2 id="Vue-util"><a href="#Vue-util" class="headerlink" title="Vue.util"></a>Vue.util</h2><blockquote><p>Vue.util上挂载了一些有用的工具方法</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="string">var</span> <span class="string">util</span> <span class="string">=</span> <span class="string">Object.freeze(&#123;</span></div><div class="line"><span class="attr">  defineReactive:</span> <span class="string">defineReactive$$1,</span></div><div class="line"><span class="attr">  _toString:</span> <span class="string">_toString,</span></div><div class="line"><span class="attr">  toNumber:</span> <span class="string">toNumber,</span></div><div class="line"><span class="attr">  makeMap:</span> <span class="string">makeMap,</span></div><div class="line"><span class="attr">  isBuiltInTag:</span> <span class="string">isBuiltInTag,</span></div><div class="line"><span class="attr">  remove:</span> <span class="string">remove$1,</span></div><div class="line"><span class="attr">  hasOwn:</span> <span class="string">hasOwn,</span></div><div class="line"><span class="attr">  isPrimitive:</span> <span class="string">isPrimitive,</span></div><div class="line"><span class="attr">  cached:</span> <span class="string">cached,</span></div><div class="line"><span class="attr">  camelize:</span> <span class="string">camelize,</span></div><div class="line"><span class="attr">  capitalize:</span> <span class="string">capitalize,</span></div><div class="line"><span class="attr">  hyphenate:</span> <span class="string">hyphenate,</span></div><div class="line"><span class="attr">  bind:</span> <span class="string">bind$1,</span></div><div class="line"><span class="attr">  toArray:</span> <span class="string">toArray,</span></div><div class="line"><span class="attr">  extend:</span> <span class="string">extend,</span></div><div class="line"><span class="attr">  isObject:</span> <span class="string">isObject,</span></div><div class="line"><span class="attr">  isPlainObject:</span> <span class="string">isPlainObject,</span></div><div class="line"><span class="attr">  toObject:</span> <span class="string">toObject,</span></div><div class="line"><span class="attr">  noop:</span> <span class="string">noop,</span></div><div class="line"><span class="attr">  no:</span> <span class="literal">no</span><span class="string">,</span></div><div class="line"><span class="attr">  identity:</span> <span class="string">identity,</span></div><div class="line"><span class="attr">  genStaticKeys:</span> <span class="string">genStaticKeys,</span></div><div class="line"><span class="attr">  looseEqual:</span> <span class="string">looseEqual,</span></div><div class="line"><span class="attr">  looseIndexOf:</span> <span class="string">looseIndexOf,</span></div><div class="line"><span class="attr">  isReserved:</span> <span class="string">isReserved,</span></div><div class="line"><span class="attr">  def:</span> <span class="string">def,</span></div><div class="line"><span class="attr">  parsePath:</span> <span class="string">parsePath,</span></div><div class="line"><span class="attr">  hasProto:</span> <span class="string">hasProto,</span></div><div class="line"><span class="attr">  inBrowser:</span> <span class="string">inBrowser,</span></div><div class="line"><span class="attr">  UA:</span> <span class="string">UA,</span></div><div class="line"><span class="attr">  isIE:</span> <span class="string">isIE,</span></div><div class="line"><span class="attr">  isIE9:</span> <span class="string">isIE9,</span></div><div class="line"><span class="attr">  isEdge:</span> <span class="string">isEdge,</span></div><div class="line"><span class="attr">  isAndroid:</span> <span class="string">isAndroid,</span></div><div class="line"><span class="attr">  isIOS:</span> <span class="string">isIOS,</span></div><div class="line"><span class="attr">  isServerRendering:</span> <span class="string">isServerRendering,</span></div><div class="line"><span class="attr">  devtools:</span> <span class="string">devtools,</span></div><div class="line"><span class="attr">  nextTick:</span> <span class="string">nextTick,</span></div><div class="line">  <span class="string">get</span> <span class="string">_Set</span> <span class="string">()</span> <span class="string">&#123;</span> <span class="string">return</span> <span class="string">_Set;</span> <span class="string">&#125;,</span></div><div class="line"><span class="attr">  mergeOptions:</span> <span class="string">mergeOptions,</span></div><div class="line"><span class="attr">  resolveAsset:</span> <span class="string">resolveAsset,</span></div><div class="line">  <span class="string">get</span> <span class="string">warn</span> <span class="string">()</span> <span class="string">&#123;</span> <span class="string">return</span> <span class="string">warn;</span> <span class="string">&#125;,</span></div><div class="line">  <span class="string">get</span> <span class="string">formatComponentName</span> <span class="string">()</span> <span class="string">&#123;</span> <span class="string">return</span> <span class="string">formatComponentName;</span> <span class="string">&#125;,</span></div><div class="line"><span class="attr">  validateProp:</span> <span class="string">validateProp</span></div><div class="line"><span class="string">&#125;);</span></div></pre></td></tr></table></figure><p>isServerRendering的实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _isServer;</div><div class="line"><span class="keyword">var</span> isServerRendering = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (_isServer === <span class="literal">undefined</span>) &#123;</div><div class="line">    <span class="comment">/* istanbul ignore if */</span></div><div class="line">    <span class="keyword">if</span> (!inBrowser &amp;&amp; <span class="keyword">typeof</span> global !== <span class="string">'undefined'</span>) &#123;</div><div class="line">      <span class="comment">// detect presence of vue-server-renderer and avoid</span></div><div class="line">      <span class="comment">// Webpack shimming the process</span></div><div class="line">      _isServer = global[<span class="string">'process'</span>].env.VUE_ENV === <span class="string">'server'</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      _isServer = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _isServer</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// vm.$isServer，调用getter，执行isServerRendering函数</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(Vue$<span class="number">3.</span>prototype, <span class="string">'$isServer'</span>, &#123;</div><div class="line">  <span class="attr">get</span>: isServerRendering</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>camelize实现：</p><blockquote><p>将连字符变量名转化为驼峰命名</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> camelizeRE = <span class="regexp">/-(\w)/g</span>;</div><div class="line"><span class="keyword">var</span> camelize = cached(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(camelizeRE, <span class="function"><span class="keyword">function</span> (<span class="params">_, c</span>) </span>&#123; <span class="keyword">return</span> c ? c.toUpperCase() : <span class="string">''</span>; &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>capitalize实现：</p><blockquote><p>将一个单词（变量名）的首字母转化为大写</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> capitalize = cached(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>extend实现：</p><blockquote><p>将第二个对象的属性全部拷贝到第一个对象上并返回该对象.<br>to上的同名属性会被_from覆盖</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span> (<span class="params">to, _from</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> _from) &#123;</div><div class="line">    to[key] = _from[key];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> to</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Vue中props的校验"><a href="#Vue中props的校验" class="headerlink" title="Vue中props的校验"></a>Vue中props的校验</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Use function string name to<span class="built_in"> check </span>built-in types,</div><div class="line"> * because a simple equality<span class="built_in"> check </span>will fail when running</div><div class="line"> * across different vms / iframes.</div><div class="line"> */</div><div class="line">// 直接利用正则匹配出函数名</div><div class="line">function getType (fn) &#123;</div><div class="line">  var match = fn &amp;&amp; fn.toString().match(/^\s*function (\w+)/);</div><div class="line"> <span class="built_in"> return </span>match &amp;&amp; match[1]</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vm-mount-elementOrSelector&quot;&gt;&lt;a href=&quot;#vm-mount-elementOrSelector&quot; class=&quot;headerlink&quot; title=&quot;vm.$mount( [elementOrSelector] )&quot;&gt;&lt;/a&gt;vm
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git进阶（一）</title>
    <link href="https://xxxxxmiss.github.io/2017/08/20/git-plumbing/"/>
    <id>https://xxxxxmiss.github.io/2017/08/20/git-plumbing/</id>
    <published>2017-08-20T06:56:16.000Z</published>
    <updated>2017-08-25T11:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git文件一览"><a href="#git文件一览" class="headerlink" title=".git文件一览"></a>.git文件一览</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">├── COMMIT_EDITMSG</div><div class="line">├── FETCH_HEAD</div><div class="line">├── HEAD <span class="comment">// 保存了当前分支的引用, 该引用指向refs/heads下对应的文件</span></div><div class="line">├── ORIG_HEAD</div><div class="line">├── branches</div><div class="line">├── config <span class="comment">// 当前选项的配置文件</span></div><div class="line">├── description</div><div class="line">├── hooks <span class="comment">// git相关钩子</span></div><div class="line">│   ├── applypatch-msg<span class="selector-class">.sample</span></div><div class="line">│   ├── commit-msg<span class="selector-class">.sample</span></div><div class="line">│   ├── post-update<span class="selector-class">.sample</span></div><div class="line">│   ├── pre-applypatch<span class="selector-class">.sample</span></div><div class="line">│   ├── pre-commit<span class="selector-class">.sample</span></div><div class="line">│   ├── pre-push<span class="selector-class">.sample</span></div><div class="line">│   ├── pre-rebase<span class="selector-class">.sample</span></div><div class="line">│   ├── prepare-commit-msg<span class="selector-class">.sample</span></div><div class="line">│   └── update<span class="selector-class">.sample</span></div><div class="line">├── index <span class="comment">// index区（暂存区）</span></div><div class="line">├── info</div><div class="line">│   └── exclude <span class="comment">// 配置.gitignore相关</span></div><div class="line">├── logs <span class="comment">// 日志</span></div><div class="line">│   ├── HEAD</div><div class="line">│   └── refs</div><div class="line">│       ├── heads</div><div class="line">│       │   ├── dev</div><div class="line">│       │   ├── feat</div><div class="line">│       │   ├── master</div><div class="line">│       │   ├── revert</div><div class="line">│       │   └── test</div><div class="line">│       └── remotes</div><div class="line">│           └── origin</div><div class="line">│               ├── HEAD</div><div class="line">│               ├── dev</div><div class="line">│               ├── master</div><div class="line">│               ├── severfix</div><div class="line">│               └── test</div><div class="line">├── objects <span class="comment">// 每个提交的记录</span></div><div class="line">│   ├── <span class="number">00</span></div><div class="line">│   │   └── <span class="number">0</span>c30b7f4429c3d4c3ad782cc051798724b66f7</div><div class="line">│   ├── <span class="number">01</span></div><div class="line">│   │   ├── <span class="number">143716</span>b369d9720651644bf6ad8543d3c9ff64</div><div class="line">│   │   └── <span class="number">2</span>c1fbd55bee496631593d14814c2370f61e64a</div><div class="line">│   ├── info</div><div class="line">│   └── pack</div><div class="line">│       ├── pack-edc94ec3aa0349b77e3e1b8264644068e4118389<span class="selector-class">.idx</span></div><div class="line">│       └── pack-edc94ec3aa0349b77e3e1b8264644068e4118389<span class="selector-class">.pack</span></div><div class="line">├── packed-refs</div><div class="line">└── refs</div><div class="line">    ├── heads <span class="comment">// 本地各个分支最新提交</span></div><div class="line">    │   ├── dev</div><div class="line">    │   ├── feat</div><div class="line">    │   ├── master</div><div class="line">    │   ├── revert</div><div class="line">    │   └── test</div><div class="line">    ├── remotes</div><div class="line">    │   └── origin <span class="comment">//保存了远程分支最新提交</span></div><div class="line">    │       ├── HEAD</div><div class="line">    │       ├── dev</div><div class="line">    │       ├── master</div><div class="line">    │       ├── severfix</div><div class="line">    │       └── test</div><div class="line">    └── tags</div></pre></td></tr></table></figure><img src="/2017/08/20/git-plumbing/git-plumbing-commit-tree.png" alt="git底层分支树" title="git底层分支树"><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><h3 id="远程引用"><a href="#远程引用" class="headerlink" title="远程引用"></a>远程引用</h3><blockquote><p>远程引用（指针）是对远程仓库的引用<br><code>git remote show origin</code></p></blockquote><h3 id="远程分支-1"><a href="#远程分支-1" class="headerlink" title="远程分支"></a>远程分支</h3><blockquote><p>远程跟踪分支是远程分支状态的引用, 他们是你不能移动的本地引用。<br>已(remote)/(branch)</p></blockquote><p><code>git branch -a</code></p><h3 id="跟踪分支（上游分支）"><a href="#跟踪分支（上游分支）" class="headerlink" title="跟踪分支（上游分支）"></a>跟踪分支（上游分支）</h3><blockquote><p>本地分支关联远程分支。做了关联之后，就可以简化很多命令，比如<code>git pull</code>, git能自动的识别去哪个服务器上抓取，合并到哪个分支。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">-b</span> <span class="selector-attr">[branch]</span> <span class="selector-attr">[remotename]</span>/<span class="selector-attr">[branch]</span></div><div class="line"></div><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">--track</span> <span class="selector-tag">origin</span>/<span class="selector-tag">master</span>(快捷方式)</div></pre></td></tr></table></figure><blockquote><p>为已有的分支设置上游分支</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -u origin/<span class="keyword">master</span></div><div class="line"><span class="title">git</span> branch --<span class="attr">set-upstream-to=</span>origin/<span class="literal">master</span></div></pre></td></tr></table></figure><blockquote><p>查看本地分支是否设置了上游分支，与上游分支领先落后以及最后一次提交等信息</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-vv</div></pre></td></tr></table></figure><blockquote><p>取消上游分支</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch <span class="comment">--unset-upstream</span></div></pre></td></tr></table></figure><h2 id="重写历史"><a href="#重写历史" class="headerlink" title="重写历史"></a>重写历史</h2><h3 id="修改最近一次的提交信息"><a href="#修改最近一次的提交信息" class="headerlink" title="修改最近一次的提交信息"></a>修改最近一次的提交信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">commit</span> <span class="comment">--amend</span></div></pre></td></tr></table></figure><blockquote><p>如果你已经使用上述命令完成了最近一次提交信息的修改，又因为之前提交时忘记添加一个新创建的文件，想通过添加或修改文件来更改提交的快照，也可以通过类似的操作来完成。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> || git rm</span></div><div class="line">git commit --amend</div></pre></td></tr></table></figure><h3 id="修改多个提交信息。"><a href="#修改多个提交信息。" class="headerlink" title="修改多个提交信息。"></a>修改多个提交信息。</h3><blockquote><p>如果要修改多个提交信息，可以通过交互式变基来实现。<br>这是一个变基命令: 在 HEAD~3..HEAD 范围内的每一个提交都会被重写，无论你是否修改信息。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -<span class="selector-tag">i</span> HEAD~<span class="number">3</span></div></pre></td></tr></table></figure><p>Note: 需要注意的是，rebase命令会将你带入文本编辑模式，这个文本编辑模式中所列出来的提交列表和使用<code>git log</code>列出来的提交是相反的。rebase:从旧到新，log:从新到旧</p><p>假设我们进入编辑模式是这样的：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">pick f<span class="number">7f</span><span class="number">3f</span>6d changed my name a <span class="keyword">bit</span></div><div class="line">pick <span class="number">310154</span>e updated README formatting <span class="keyword">and </span><span class="keyword">added </span><span class="keyword">blame</span></div><div class="line">pick a<span class="number">5f</span>4a0d <span class="keyword">added </span>cat-file</div><div class="line"></div><div class="line"><span class="comment"># Rebase 710f0f8..a5f4a0d onto 710f0f8</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Commands:</span></div><div class="line"><span class="comment">#  p, pick = use commit</span></div><div class="line"><span class="comment">#  r, reword = use commit, but edit the commit message</span></div><div class="line"><span class="comment">#  e, edit = use commit, but stop for amending</span></div><div class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit</span></div><div class="line"><span class="comment">#  f, fixup = like "squash", but discard this commit's log message</span></div><div class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Note that empty commits are commented out</span></div></pre></td></tr></table></figure></p><blockquote><p>假设我们只修改第一次的提交信息（也就是最上面的那一条），那么我们可以将最上面的那一条信息前面的<code>pick</code>改为<code>edit</code>或者<code>e</code>,保存退出。</p></blockquote><p>退出保存，终端会显示如下的信息:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Stopped at 3d8f8dbe792fb8ec971d697470ec8bfd0ce0f8d6... <span class="keyword">delete</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="keyword">rows</span></div><div class="line">You can amend the <span class="keyword">commit</span> <span class="keyword">now</span>, <span class="keyword">with</span></div><div class="line"></div><div class="line">    git <span class="keyword">commit</span> <span class="comment">--amend</span></div><div class="line"></div><div class="line">Once you <span class="keyword">are</span> satisfied <span class="keyword">with</span> your changes, run</div><div class="line"></div><div class="line">    git rebase <span class="comment">--continue</span></div></pre></td></tr></table></figure><p>注意：此次HEAD指针已经移动到了<code>3d8f8db</code>这一次的提交，那么我们可以继续运行<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git commit --amend <span class="regexp">//</span> 修改第一次的提交</div><div class="line">git rebase --<span class="keyword">continue</span> <span class="regexp">//</span> 将HEAD指针在移动回最近的那次提交</div><div class="line"></div><div class="line"><span class="regexp">//</span> 上述<span class="number">2</span>个命令执行完成后，终端会显示如下信息</div><div class="line">Successfully rebased and updated refs<span class="regexp">/heads/</span>test.</div></pre></td></tr></table></figure></p><h3 id="压缩提交"><a href="#压缩提交" class="headerlink" title="压缩提交"></a>压缩提交</h3><blockquote><p>如果多个提交都是完成一个功能的，我们可以将这些提交压缩成一个提交，使用的命令也是rebase。我们从上面的例子可以知道，一旦进入文本编辑模式，会有’pick’, ‘edit’, ‘squash’, ‘fixup’选项。如果我们要压缩多个提交，只需要将每条提交前面的’pick’改为’squash’(后面再讲解squash与fixup的区别)。</p></blockquote><p>加入进入文本编辑模式如下<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">pick f<span class="number">7f</span><span class="number">3f</span>6d changed my name a <span class="keyword">bit</span></div><div class="line">pick <span class="number">310154</span>e updated README formatting <span class="keyword">and </span><span class="keyword">added </span><span class="keyword">blame</span></div><div class="line">pick a<span class="number">5f</span>4a0d <span class="keyword">added </span>cat-file</div><div class="line"></div><div class="line"><span class="comment"># Rebase 710f0f8..a5f4a0d onto 710f0f8</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Commands:</span></div><div class="line"><span class="comment">#  p, pick = use commit</span></div><div class="line"><span class="comment">#  r, reword = use commit, but edit the commit message</span></div><div class="line"><span class="comment">#  e, edit = use commit, but stop for amending</span></div><div class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit</span></div><div class="line"><span class="comment">#  f, fixup = like "squash", but discard this commit's log message</span></div><div class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Note that empty commits are commented out</span></div></pre></td></tr></table></figure></p><blockquote><p>squash就是下面的提交记录压缩到前面的提交记录中（将几条提交记录整合到一起），但是需要注意的是，不能讲最上面的那一条提交记录前面的<code>pick</code>改为<code>squash</code>, 那样就没有<strong>前一条记录了</strong>。如果你真的将最上面的那一天提交记录也改为<code>squash</code>，那么在退出文本编辑模式的时候，会提示<code>Cannot &#39;squash&#39; without a previous commit</code>。</p></blockquote><p>那么squash后的log如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">commit</span> <span class="number">8406738</span>ce7740d8800890b58bf3b6ee6aab23f3d</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span>@qq.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Wed Aug <span class="number">23</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">34</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">changed</span> my <span class="keyword">name</span> a <span class="built_in">bit</span></div><div class="line">    <span class="keyword">updated</span> README formatting <span class="keyword">and</span> added blame</div><div class="line">    added cat-<span class="keyword">file</span></div><div class="line"></div><div class="line"><span class="keyword">commit</span> <span class="number">20559</span>c2e26d7c8183c4ad73761d3e26c81de6af2</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span>@qq.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Sat Aug <span class="number">19</span> <span class="number">16</span>:<span class="number">56</span>:<span class="number">24</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">test</span> rebase configs</div></pre></td></tr></table></figure></p><p>查看log信息可以squash将三条提交记录压缩为一条，但是如果你使用<code>fixup</code>选项，那么rebase后会丢掉每条被你标记为<code>fixup</code>的提交记录，这是他和<code>squash</code>的唯一区别。</p><p>使用<code>fixup</code>的log会看起来如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">commit</span> <span class="number">8406738</span>ce7740d8800890b58bf3b6ee6aab23f3d</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span>@qq.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Wed Aug <span class="number">23</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">34</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line">    <span class="keyword">changed</span> my <span class="keyword">name</span> a <span class="built_in">bit</span></div><div class="line"></div><div class="line"><span class="keyword">commit</span> <span class="number">20559</span>c2e26d7c8183c4ad73761d3e26c81de6af2</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span>@qq.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Sat Aug <span class="number">19</span> <span class="number">16</span>:<span class="number">56</span>:<span class="number">24</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">test</span> rebase configs</div></pre></td></tr></table></figure></p><h2 id="git中的三棵树（三个区）"><a href="#git中的三棵树（三个区）" class="headerlink" title="git中的三棵树（三个区）"></a>git中的三棵树（三个区）</h2><blockquote><p>平时我们使用<code>git add</code>,<code>git commit</code>, <code>git checkout</code>, <code>git reset</code>等这些命令来做git的一些操作，其实内部就是在操作这三个区域：</p></blockquote><p>working: 工作区，平时文件的增删改都是在working区<br>index: 暂存区，使用<code>git add</code>将工作区的内容保存在暂存区，暂存区中的内容是即将要提交的内容<br>HEAD: 提交区，保存了当前分支最近的一次提交</p><img src="/2017/08/20/git-plumbing/git-three-tree.png" alt="git中的三棵树" title="git中的三棵树"><h2 id="reset压缩提交历史"><a href="#reset压缩提交历史" class="headerlink" title="reset压缩提交历史"></a>reset压缩提交历史</h2><blockquote><p>有了上面三棵树的基础，那么了解reset工作的机理就比较清晰了。</p></blockquote><p>reset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：</p><ol><li><p>移动 HEAD 分支的指向 （若指定了 –soft，则到此停止）</p></li><li><p>使索引看起来像 HEAD （若未指定 –hard，则到此停止）</p></li><li><p>使工作目录看起来像索引</p></li></ol><p>再来解析下上面1,2中括号中说明的含义</p><p>加入我们要修改前3次的提交<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 移动HEAD中的指针指向倒数第四次提交，此时修改的文件处于暂存区</div><div class="line">// 也就是说加了<span class="comment">--soft，会回退到git commit之前</span></div><div class="line">git <span class="keyword">reset</span> <span class="comment">--soft HEAD~3</span></div><div class="line"></div><div class="line">// 移动<span class="keyword">HEAD</span>中的指针指向倒数第四次提交，此时修改的文件处于暂存区</div><div class="line">// 更新暂存区，使工作区和暂存区看起来是一样的</div><div class="line">// 也就是说不加<span class="comment">--soft选项，回会退到git add之前</span></div><div class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>~<span class="number">3</span></div><div class="line"></div><div class="line">// <span class="comment">--hard是个危险选项，会让你撤销所有的修改</span></div><div class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD~3</span></div></pre></td></tr></table></figure></p><h2 id="reset重置路径"><a href="#reset重置路径" class="headerlink" title="reset重置路径"></a>reset重置路径</h2><blockquote><p>上面说的reset是针对提交历史的，我们也可以使用reset针对某个具体路径。<br>比如我们在使用<code>git add .</code>添加了所有的东西到暂存区，但是在提交的时候，发送有个文件或者文件夹中的东西不是当前功能的，那么可以通过reset来让文件或者文件集合回到工作区，只提交本次要提交的功能。<br>实际上，<code>git add</code>和<code>git reset</code>所做的事情是相反的，<code>git reset</code>本质是将HEAD区的中的文件拷贝到暂存区，并且不会移动HEAD中的分支指针。</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">On branch test</div><div class="line">Your branch <span class="keyword">and</span> <span class="string">'origin/test'</span> have diverged,</div><div class="line"><span class="keyword">and</span> have <span class="number">4</span> <span class="keyword">and</span> <span class="number">15</span> different commits <span class="keyword">each</span>, respectively.</div><div class="line">  (use <span class="string">"git pull"</span> <span class="built_in">to</span> <span class="built_in">merge</span> <span class="keyword">the</span> remote branch <span class="keyword">into</span> yours)</div><div class="line">Changes <span class="built_in">to</span> be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="built_in">to</span> unstage)</div><div class="line"></div><div class="line">    modified:   test.txt</div><div class="line"></div><div class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> <span class="built_in">to</span> update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="built_in">to</span> discard changes <span class="keyword">in</span> working <span class="built_in">directory</span>)</div><div class="line"></div><div class="line">    modified:   test.txt</div></pre></td></tr></table></figure><h2 id="撤销合并之reset修改引用，revert还原"><a href="#撤销合并之reset修改引用，revert还原" class="headerlink" title="撤销合并之reset修改引用，revert还原"></a>撤销合并之reset修改引用，revert还原</h2><p>假设现在在一个特性分支上工作，不小心将其合并到 master 中，现在提交历史看起来是这样：<br><img src="/2017/08/20/git-plumbing/three-part-merge.png" alt="three-part-merge.png" title=""></p><p>对于上面的问题，有2种修复方法：</p><blockquote><p>修改引用</p></blockquote><p>如果这个不想要的合并提交只存在于你的本地仓库中，最简单且最好的解决方案是移动分支到你想要它指向的地方。 大多数情况下，如果你在错误的 <code>git merge</code> 后运行 <code>git reset --hard HEAD~</code>，这会重置分支指向所以它们看起来像这样：</p><img src="/2017/08/20/git-plumbing/reset-hard.png" alt="reset-hard.png" title=""><p>这个方法的缺点是它会重写历史，在一个共享的仓库中这会造成问题的。 用简单的话说就是如果其他人已经有你将要重写的提交，你应当避免使用 reset。 如果有任何其他提交在合并之后创建了，那么这个方法也会无效；移动引用实际上会丢失那些改动。</p><blockquote><p>还原提交</p></blockquote><p>如果上面的修改引用的方法不适合你，那么你还可以使用还原操作。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// <span class="number">1</span>,表示需要保留下来的父节点，如下图，我们此处的父节点是<span class="built_in">C6</span>或则<span class="built_in">C4</span>，</div><div class="line">// 因为我们此时在master分支上，所有保留下来的父节点是<span class="built_in">C6</span></div><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>-m <span class="number">1</span> HEAD</div></pre></td></tr></table></figure></p><p>调用了上述命令之后，提交历史看起来是这样的：</p><img src="/2017/08/20/git-plumbing/reset-mainline-1.png" alt="reset-mainline-1.png" title=""><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">commit e<span class="number">5</span>a<span class="number">5</span>ab<span class="number">537309</span><span class="keyword">c</span><span class="number">2006676392</span>d<span class="number">4</span>fb<span class="number">5</span>dc<span class="number">1</span>ae<span class="number">2</span>dae<span class="number">78</span>e</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span><span class="title">@qq.com</span>&gt;</div><div class="line">Date:   Wed Aug <span class="number">23</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">20</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    Revert <span class="string">"Merge branch 'test revert in test branch'"</span></div><div class="line"></div><div class="line">    This reverts commit <span class="number">606</span>de<span class="number">1</span>d<span class="number">0</span>d<span class="number">3</span>d<span class="number">7313</span>ca<span class="number">3</span><span class="keyword">c</span><span class="number">0914</span><span class="keyword">c</span><span class="number">65</span>eb<span class="number">5</span>f<span class="number">77</span>ca<span class="number">97</span>a<span class="number">48</span>e, reversing</div><div class="line">    changes made <span class="keyword">to</span> <span class="number">2</span>ece<span class="number">042</span>de<span class="number">65</span><span class="keyword">c</span><span class="number">693</span><span class="keyword">c</span><span class="number">709</span>b<span class="number">3</span>f<span class="number">9</span>d<span class="number">34</span>d<span class="number">7</span>b<span class="number">598697984</span>ff.</div><div class="line"></div><div class="line">commit <span class="number">606</span>de<span class="number">1</span>d<span class="number">0</span>d<span class="number">3</span>d<span class="number">7313</span>ca<span class="number">3</span><span class="keyword">c</span><span class="number">0914</span><span class="keyword">c</span><span class="number">65</span>eb<span class="number">5</span>f<span class="number">77</span>ca<span class="number">97</span>a<span class="number">48</span>e</div><div class="line">Merge: <span class="number">2</span>ece<span class="number">042</span> d<span class="number">9</span>a<span class="number">757</span>b</div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span><span class="title">@qq.com</span>&gt;</div><div class="line">Date:   Wed Aug <span class="number">23</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">16</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    Merge branch 'test revert in test branch'</div><div class="line"></div><div class="line">commit d<span class="number">9</span>a<span class="number">757</span>b<span class="number">76</span>f<span class="number">1e95</span><span class="keyword">c</span><span class="number">26</span>bd<span class="number">116</span>d<span class="number">18</span>f<span class="number">03338</span><span class="keyword">c</span><span class="number">0e5920</span><span class="keyword">c</span><span class="number">0</span></div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span><span class="title">@qq.com</span>&gt;</div><div class="line">Date:   Wed Aug <span class="number">23</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">10</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    revert 提交 in test branch</div><div class="line"></div><div class="line">commit <span class="number">2</span>ece<span class="number">042</span>de<span class="number">65</span><span class="keyword">c</span><span class="number">693</span><span class="keyword">c</span><span class="number">709</span>b<span class="number">3</span>f<span class="number">9</span>d<span class="number">34</span>d<span class="number">7</span>b<span class="number">598697984</span>ff</div><div class="line">Merge: <span class="keyword">c</span><span class="number">7434</span>ae <span class="number">44</span>ee<span class="number">440</span></div><div class="line">Author: chenxianlong &lt;<span class="number">794465731</span><span class="title">@qq.com</span>&gt;</div><div class="line">Date:   Wed Aug <span class="number">23</span> <span class="number">17</span>:<span class="number">08</span>:<span class="number">25</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    Merge branch 'feat <span class="keyword">add</span> <span class="number">9999</span> in feat branch'</div></pre></td></tr></table></figure><p>该命令会生成一条新的提交，我们如果查看上面的log,可以看出第一天提交信息，其中明确的写明了<code>e5a5ab5</code>是在<code>606de1d</code>的基础上生成的新提交，并且将<code>2ece042</code>的提交还原了。</p><blockquote><p>再来看看<code>git revert -m 1 HEAD</code>之后的历史</p></blockquote><p>新的提交 ^M 与 C6 有完全一样的内容，所以从这儿开始就像合并从未发生过，但是如果你尝试再次合并 topic 到 master Git 会感到困惑：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">merge</span> topic</div><div class="line">Already up-<span class="built_in">to</span>-<span class="built_in">date</span>.</div></pre></td></tr></table></figure></p><p>因为我们调用<code>git revert -m 1 HEAD</code>之后，已经将topic中提交剔除出去了，但是现在再来合并却发现并没有不一样的内容，也就是说我们无法再次将topic分支的提交合并到master.更糟的是，如果你在 topic 中增加工作然后再次合并，会产生冲突。</p><img src="/2017/08/20/git-plumbing/reset-merge.png" alt="reset-merge.png" title=""><p>解决这个最好的方式是撤消还原原始的合并，因为现在你想要引入被还原出去的修改，然后 创建一个新的合并提交：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">revert </span>^M之后，又会产生一次新的提交^^M，这次新的提交包含了开始剔除出去的内容（<span class="built_in">C3</span>,<span class="built_in">C4</span>）</div><div class="line">$ git <span class="keyword">revert </span>^M</div><div class="line">[master <span class="number">09</span>f0126] <span class="keyword">Revert </span><span class="string">"Revert "</span>Merge <span class="keyword">branch </span><span class="string">'topic'</span><span class="string">""</span></div><div class="line">$ git merge topic</div><div class="line"></div><div class="line">// merge topic时，会将^^M，<span class="built_in">C7</span>，<span class="built_in">C2</span>做一个三方合并</div></pre></td></tr></table></figure></p><img src="/2017/08/20/git-plumbing/reset-merge-2.png" alt="reset-merge-2.png" title=""><blockquote><p>在重新合并一个还原合并后的历史<br>在本例中，M 与 ^M 抵消了。 ^^M 事实上合并入了 C3 与 C4 的修改，C8 合并了 C7 的修改，所以现在 topic 已经完全被合并了。</p></blockquote><p>所有遇到以上情况，我们需要做三步：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>-m -<span class="number">1</span> HEAD</div><div class="line"><span class="symbol">git</span> <span class="keyword">revert </span>^M</div><div class="line"><span class="symbol">git</span> merge topic</div></pre></td></tr></table></figure></p><h2 id="reset与checkout的区别"><a href="#reset与checkout的区别" class="headerlink" title="reset与checkout的区别"></a>reset与checkout的区别</h2><blockquote><p>因为checkout也是操纵这三棵树，所以有必要了解下他们之间的区别</p></blockquote><img src="/2017/08/20/git-plumbing/reset-checkout.png" alt="reset和checkout区别对照表" title="reset和checkout区别对照表"><h2 id="快速合并与三方合并策略"><a href="#快速合并与三方合并策略" class="headerlink" title="快速合并与三方合并策略"></a>快速合并与三方合并策略</h2><h3 id="快速合并"><a href="#快速合并" class="headerlink" title="快速合并"></a>快速合并</h3><p>我们在合并2个分支的时候，经常看到如下信息<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Updating <span class="number">44</span>bc42f..a65dae0</div><div class="line">Fast-forward</div><div class="line"> test.txt | <span class="number">13</span> -------------</div><div class="line"> <span class="number">1</span> file <span class="section">changed</span>, <span class="number">13</span> deletions(-)</div></pre></td></tr></table></figure></p><img src="/2017/08/20/git-plumbing/git-fast-forward.png" alt="快速合并" title="快速合并"><blockquote><p>如果一个分支和它的源分支没有存在支路，如上图。<br>就是说iss53分支从master分支上切出来之后，并且在iss53上做了几次提交，但是在这期间master分支并未有新的提交合并，那么此时将iss53分支合并到master分支采用的就是<code>Fast-forward</code>策略。</p></blockquote><h3 id="三方合并策略"><a href="#三方合并策略" class="headerlink" title="三方合并策略"></a>三方合并策略</h3><blockquote><p>将几个分支的共同祖先节点和每个分支最后提交的节点进行一个合并。</p></blockquote><p>我们在合并2个分支的时候，也会经常看到如下信息<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Merge made by the 'recursive' strategy.</div><div class="line"> test.txt | <span class="number">2</span> +-</div><div class="line"> <span class="number">1</span> file <span class="section">changed</span>, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div></pre></td></tr></table></figure></p><img src="/2017/08/20/git-plumbing/three-part-merge.png" alt="git三方合并" title="git三方合并"><blockquote><p>如上图，topic分支从master分支C2切出来，然后做了C3,C4的提交，在此期间，master分支也有C5，C6的提交合并，那么此时将topic分支合并到master分支就会采用三方合并的策略。</p></blockquote><h2 id="ours和theirs冲突合并策略"><a href="#ours和theirs冲突合并策略" class="headerlink" title="ours和theirs冲突合并策略"></a>ours和theirs冲突合并策略</h2><blockquote><p>合并分支，偶有遇到冲突在所难免，git通常让你自己手动解决冲突后再进行一个合并。但是也提供了一些其他快速解决冲突的方案。</p></blockquote><p>比如，2个人同时修改了某一个文件，那么在合并的时候就会遇到冲突，但是我只想保留某一方的提交。那么此时我们就可以使用ours和theirs策略。</p><p>如：将topic分支合并到master分支存在冲突<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 保留master分支上的代码</span></div><div class="line">git <span class="keyword">merge</span> -Xours topic</div><div class="line"></div><div class="line"><span class="comment">// 保留topic分支上的代码</span></div><div class="line">git <span class="keyword">merge</span> -Xtheirs topic</div></pre></td></tr></table></figure></p><h2 id="git-grep搜索"><a href="#git-grep搜索" class="headerlink" title="git grep搜索"></a>git grep搜索</h2><blockquote><p>从提交历史或者工作目录中查找一个字符串或者正则表达式<br><code>git grep -n fmtDate</code></p></blockquote><h2 id="几个常用的底层命令"><a href="#几个常用的底层命令" class="headerlink" title="几个常用的底层命令"></a>几个常用的底层命令</h2><ul><li>git hash-object</li></ul><blockquote><p>将数据写入到git数据库中</p></blockquote><ul><li>git cat-file</li></ul><blockquote><p>从git数据库中取出数据</p></blockquote><ul><li>git update-index</li></ul><blockquote><p>将文件加入到暂存区或更新暂存区的文件</p></blockquote><ul><li>git write-tree</li></ul><blockquote><p>将暂存区内容写入到一个树对象</p></blockquote><ul><li>git read-tree</li></ul><blockquote><p>把树对象读入暂存区</p></blockquote><ul><li>git commit-tree</li></ul><blockquote><p>创建一个提交对象</p></blockquote><ul><li>git update-ref</li></ul><blockquote><p>更新某个引用</p></blockquote><ul><li>git symbolic-ref HEAD</li></ul><blockquote><p>查看 HEAD 引用对应的值</p></blockquote><ul><li>git symbolic-ref HEAD refs/heads/test</li></ul><blockquote><p>设置HEAD引用的值</p></blockquote><h2 id="几种常见的对象"><a href="#几种常见的对象" class="headerlink" title="几种常见的对象"></a>几种常见的对象</h2><ul><li>blob object: 数据对象</li><li>tree object: 树对象</li><li>commit object: 提交对象</li><li>tag object: 标签对象，类似于提交对象，但是标签对象通常指向一个提交对象，而不是一个树对象</li></ul><h2 id="几个git文件的合法模式"><a href="#几个git文件的合法模式" class="headerlink" title="几个git文件的合法模式"></a>几个git文件的合法模式</h2><ul><li>100644: 普通文件</li><li>100755: 可执行文件</li><li>120000: 符号链接</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git文件一览&quot;&gt;&lt;a href=&quot;#git文件一览&quot; class=&quot;headerlink&quot; title=&quot;.git文件一览&quot;&gt;&lt;/a&gt;.git文件一览&lt;/h2&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="git" scheme="https://xxxxxmiss.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://xxxxxmiss.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>web-components</title>
    <link href="https://xxxxxmiss.github.io/2017/08/13/web-components/"/>
    <id>https://xxxxxmiss.github.io/2017/08/13/web-components/</id>
    <published>2017-08-12T16:07:36.000Z</published>
    <updated>2017-08-13T17:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-Components-web组件"><a href="#Web-Components-web组件" class="headerlink" title="Web Components(web组件)"></a>Web Components(web组件)</h2><blockquote><p>web组件是一种可以复用的html单元，他是浏览器的一部分，所以不需要引入额外的库来使用他。<br>Web Components技术主要由以下4部分组成，但是每一部分都可以单独使用</p></blockquote><ul><li>Custom Elments(自定义元素)</li><li>HTML Templates(html模板)</li><li>Shadow DOM</li><li>HTML Imports<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"myfile.html"</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h2 id="Custom-Elements"><a href="#Custom-Elements" class="headerlink" title="Custom Elements"></a>Custom Elements</h2><blockquote><p>自定义元素提供了一种可以让你创建自定义html元素的能力。它也是web componnets技术的组成部分，但是你也可以独立使用它们。<br>自定义元素有着自己的生命周期，这就意味着你可以在不同的生命周期阶段通过脚本绑定不同的行为。<br>例如，当它们被插入到dom中（connected），当它们从dom中移除时（disconnected），又或者它们的特性发生改变的时候（attributeChanged），你都可以在相应的时期做你想做的事情。</p></blockquote><h3 id="自定义元素的方法"><a href="#自定义元素的方法" class="headerlink" title="自定义元素的方法"></a>自定义元素的方法</h3><p>constructor()</p><blockquote><p>当元素被创建或者更新的时候调用</p></blockquote><p>connectedCallback()</p><blockquote><p>当元素被插入到文档流中或者被插入到shadow dom中的时候调用</p></blockquote><p>disconnectedCallback()</p><blockquote><p>当元素从文档流中移除的时候调用</p></blockquote><p>attributeChangedCallback(attributeName, oldValue, newValue, namespace)</p><blockquote><p>当元素<strong>被观察的特性</strong>被改变，被追加，被移除，被取代的时候调用</p></blockquote><p>adoptedCallback(oldDocument, newDocument)</p><blockquote><p>当元素被插入到一个新的文档流中的时候调用</p></blockquote><p>自定义元素更多的时候我们采用es6类语法来进行创建：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"custom"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第二行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">my-element</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-element</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyElement</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="comment">// 一定要记得先调用父类构造器,因为我们在子类的构造器中使用了this</span></div><div class="line">        <span class="comment">// 否则就报错</span></div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> tplContent = <span class="built_in">document</span>.getElementById(<span class="string">'custom'</span>).content</div><div class="line">        <span class="keyword">var</span> shadowRoot = <span class="keyword">this</span>.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">'open'</span> &#125;)</div><div class="line">        shadowRoot.appendChild(tplContent)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    connectedCallback()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'自定义元素被插入到shadow dom中'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">customElements.define(<span class="string">'my-element'</span>, MyElement)</div></pre></td></tr></table></figure><h3 id="Observed-attributes"><a href="#Observed-attributes" class="headerlink" title="Observed attributes"></a>Observed attributes</h3><blockquote><p>如果要使用自定义元素的attributeChangedCallback来观察自定义元素特性的变化，那么必须在初始化自定义元素的构造器中列出需要观察的特性–在类中使用静态的get存取器列出需要观察的特性。</p></blockquote><p>改造上面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyElement</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="comment">// 一定要记得先调用父类构造器,因为我们在子类的构造器中使用了this</span></div><div class="line">        <span class="comment">// 否则就报错</span></div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> tplContent = <span class="built_in">document</span>.getElementById(<span class="string">'custom'</span>).content</div><div class="line">        <span class="keyword">var</span> shadowRoot = <span class="keyword">this</span>.attachShadow(&#123; <span class="attr">mode</span>: <span class="string">'open'</span> &#125;)</div><div class="line">        shadowRoot.appendChild(tplContent)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> get observedAttributes()&#123; <span class="keyword">return</span> [<span class="string">'name'</span>] &#125;</div><div class="line"></div><div class="line">    attributeChangedCallback(attr, oldValue, newValue)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'oldValue: '</span>, oldValue)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'newValue: '</span>, newValue)</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(<span class="string">'name'</span> === attr)&#123;</div><div class="line">            <span class="keyword">this</span>.textContent = <span class="string">`Hello, <span class="subst">$&#123;newValue&#125;</span>`</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    connectedCallback()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'自定义元素被插入到shadow dom中'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">customElements.define(<span class="string">'my-element'</span>, MyElement)</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).setAttribute(<span class="string">'name'</span>, <span class="string">'ggsmd'</span>)</div><div class="line">&#125;, <span class="number">5000</span>)</div></pre></td></tr></table></figure></p><p>控制台输出如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化的时候输出</span></div><div class="line"><span class="string">oldValue:</span> test</div><div class="line"><span class="string">newValue:</span> <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="comment">// 5s之后输出</span></div><div class="line"><span class="string">oldValue:</span> test</div><div class="line"><span class="string">newValue:</span> ggsmd</div></pre></td></tr></table></figure></p><h2 id="HTML-Templates"><a href="#HTML-Templates" class="headerlink" title="HTML Templates"></a>HTML Templates</h2><blockquote><p><template>元素中的内容在页面加载的时候并不会渲染，但是你可以通过js来操作其中的内容。<br>你可以认为<template>元素中保存了你接下来要使用的内容片段，在页面加载的时候，解析引擎并不处理<template>中内容，也不做任何渲染，引擎只确保<template>中的内容是否有效。</template></template></template></template></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"producttable"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>UPC_Code<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Product_Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- existing data could optionally be included here --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"productrow"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"record"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 检查浏览器是否支持template元素</span></div><div class="line"><span class="keyword">if</span>(<span class="string">'content'</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">'template'</span>))&#123;</div><div class="line">    <span class="keyword">var</span> t = <span class="built_in">document</span>.querySelector(<span class="string">'#productrow'</span>)</div><div class="line">    , td = t.content.querySelectorAll(<span class="string">'td'</span>)</div><div class="line">    td[<span class="number">0</span>].textContent = <span class="string">'AAAA'</span></div><div class="line">    td[<span class="number">1</span>].textContent = <span class="string">'BBBB'</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'tbody'</span>)</div><div class="line">    , clone = <span class="built_in">document</span>.importNode(t.content, <span class="literal">true</span>)</div><div class="line">    tbody.appendChild(clone)</div><div class="line"></div><div class="line">    <span class="comment">// 复用template元素中的内容</span></div><div class="line">    td[<span class="number">0</span>].textContent = <span class="string">'1111'</span></div><div class="line">    td[<span class="number">1</span>].textContent = <span class="string">'2222'</span></div><div class="line">    <span class="keyword">var</span> clone2 = <span class="built_in">document</span>.importNode(t.content, <span class="literal">true</span>)</div><div class="line">    tbody.appendChild(clone2)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">// 不支持的浏览器可以引入polyfill</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="HTMLTemplateElement接口"><a href="#HTMLTemplateElement接口" class="headerlink" title="HTMLTemplateElement接口"></a>HTMLTemplateElement接口</h3><blockquote><p>通过HTMLTemplateElement接口，我们可以操作<template>元素中的内容</template></p></blockquote><img src="/2017/08/13/web-components/element-template.png" alt="HTMLTemplateElement接口" title="HTMLTemplateElement接口"><blockquote><p>上图是HTMLTemplateElement接口的继承图，也就是说HTMLTemplateElement继承了HTMLElement上所有的属性和方法。</p></blockquote><h4 id="HTMLTemplateElement特有的一个属性"><a href="#HTMLTemplateElement特有的一个属性" class="headerlink" title="HTMLTemplateElement特有的一个属性"></a>HTMLTemplateElement特有的一个属性</h4><p>HTMLTemplateElement.content：只读的属性<br>返回值：返回<template>元素中的内容，是一个DocumentFragment</template></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#test'</span>).content.nodeType === <span class="number">11</span></div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure><h2 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h2><blockquote><p>Shadow DOM为Web Components中的DOM, CSS提供了一个包装。<br>Shadow DOM将Web Components中的DOM, CSS和文档流中的dom进行了一个隔离。因为一个大型网页，如果前期css组织的不合理，就会导致css各种覆盖，从而使网页样式变得难以把控。通过shadow dom，可以进行一个隔离。<br>它是Web Components技术的一部分，但是你也可以单独使用它们。</p></blockquote><h3 id="基本的使用"><a href="#基本的使用" class="headerlink" title="基本的使用"></a>基本的使用</h3><blockquote><p>shadow dom必须被绑定到某一个存在的元素上，这个元素可以是html文档流中已经存在的元素，也可以是通过js创建的元素(包括自定义元素)。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"hostElement"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="comment">// 此时shadow dom还是空的，没有内容</span></div><div class="line">        <span class="keyword">var</span> shadow = <span class="built_in">document</span>.querySelector(<span class="string">'#hostElement'</span>)</div><div class="line">            .attachShadow(&#123; <span class="attr">mode</span>: <span class="string">'open'</span> &#125;)</div><div class="line">        <span class="comment">// 往shadow dom中添加内容</span></div><div class="line">        shadow.innerHTML = <span class="string">'&lt;span&gt;Here is some new text&lt;/span&gt;'</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="shadow-dom的样式"><a href="#shadow-dom的样式" class="headerlink" title="shadow dom的样式"></a>shadow dom的样式</h3><blockquote><p>继续接着上面的例子，如果我们需要给shadow dom添加样式。就跟我们平时使用内联样式一样，只不过将style标签极其里面的样式全部作为shadow dom的innerHTML。如下： </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shadow.innerHTML = '<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">span</span> &#123; <span class="attribute">color</span>: red; &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>'</div></pre></td></tr></table></figure><h3 id="shadow-dom相关API"><a href="#shadow-dom相关API" class="headerlink" title="shadow dom相关API"></a>shadow dom相关API</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> shadowRoot = element.attachShadow(shadowRootInit)</div></pre></td></tr></table></figure><blockquote><p>绑定一个shadow dom树到一个指定的元素上，并且返回ShadowRoot的引用。<br>shadowRoot也是一个文档片段。 <code>shadowRoot.nodeType === 11</code></p></blockquote><p>shadowRootInit是一个如下的对象：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">mode</span>: <span class="string">'open'</span></div><div class="line">    // mode: <span class="string">'closed'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>open: 指定开放的包裹模式，这就意味着在外面可以使用<code>element.shadowRoot</code>来访问shadow dom中的内容。</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">element</span>.shadowRoot === shadowRoot(通过attachShadow返回的shadowRoot的引用)<span class="comment"></span></div><div class="line">// true</div></pre></td></tr></table></figure><ul><li>closed: 指定为闭合的包裹模式，这就意味着在外面无法使用任何方法来访问shadow dom中的内容。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">element.shadowRoot</span> <span class="string">===</span> <span class="string">shadowRoot(通过attachShadow返回的shadowRoot的引用)</span></div><div class="line"><span class="string">//</span> <span class="literal">false</span></div><div class="line"><span class="string">element.shadowRoot</span> <span class="string">===</span> <span class="literal">null</span></div><div class="line"><span class="string">//</span> <span class="literal">true</span></div></pre></td></tr></table></figure><h3 id="ShadowRoot接口"><a href="#ShadowRoot接口" class="headerlink" title="ShadowRoot接口"></a>ShadowRoot接口</h3><p>ShadowRoot.mode</p><blockquote><p>只读，返回值为’open’或者’closed’</p></blockquote><p>ShadowRoot.host</p><blockquote><p>只读，返回shadow dom的宿主元素</p></blockquote><p>ShadowRoot.innerHTML</p><blockquote><p>返回ShadowRoot内部的dom树</p></blockquote><h3 id="slot元素"><a href="#slot元素" class="headerlink" title="slot元素"></a>slot元素</h3><blockquote><p>slot, 翻译为“插槽”。slot元素也是web components技术的一个组成单元：他是web components内的一个占位符，通过这个占位符，你可以在接下来使用的web组件内插入自己想要的标签。<br>slot元素一般情况下和template元素组合使用。</p></blockquote><h3 id="Attributes（特性）"><a href="#Attributes（特性）" class="headerlink" title="Attributes（特性）"></a>Attributes（特性）</h3><blockquote><p>slot元素和其他的html元素一样，有着一些通用的属性，比如<code>style</code>,<code>class</code>等，具体有哪些，可以<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes" target="_blank" rel="external">参看这里</a></p></blockquote><h4 id="Attributes之name特性"><a href="#Attributes之name特性" class="headerlink" title="Attributes之name特性"></a>Attributes之name特性</h4><blockquote><p>给slot元素添加一个名字，因为一个web组件内部可能有多个slot,可以用name特性加以区分。没有添加name特性的slot元素，可以理解为<code>name=&quot;&quot;</code>。<br>在Vue框架中，也有内置的slot组件，它实现的功能和标准web components中的slot元素是一样的。但在Vue中，没有添加name特性的slot组件，相当于<code>name=&quot;default&quot;</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"slot-template"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一段文本<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"another"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>这是另外一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slots = <span class="built_in">document</span>.querySelector(<span class="string">'#slot-template'</span>)</div><div class="line">    .content.querySelectorAll(<span class="string">'slot'</span>)</div><div class="line"><span class="built_in">Array</span>.from(slots).forEach(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">console</span>.log(s.name))</div><div class="line"><span class="comment">// ""</span></div><div class="line"><span class="comment">// another</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web-Components-web组件&quot;&gt;&lt;a href=&quot;#Web-Components-web组件&quot; class=&quot;headerlink&quot; title=&quot;Web Components(web组件)&quot;&gt;&lt;/a&gt;Web Components(web组件)&lt;/h2
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>share-vue</title>
    <link href="https://xxxxxmiss.github.io/2017/08/12/share-vue/"/>
    <id>https://xxxxxmiss.github.io/2017/08/12/share-vue/</id>
    <published>2017-08-12T04:30:54.000Z</published>
    <updated>2017-08-13T17:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">├── README<span class="selector-class">.md</span></div><div class="line">├── build</div><div class="line">│   ├── build<span class="selector-class">.js</span></div><div class="line">│   ├── check-versions<span class="selector-class">.js</span></div><div class="line">│   ├── dev-client<span class="selector-class">.js</span></div><div class="line">│   ├── dev-server<span class="selector-class">.js</span></div><div class="line">│   ├── utils<span class="selector-class">.js</span></div><div class="line">│   ├── vue-loader<span class="selector-class">.conf</span><span class="selector-class">.js</span></div><div class="line">│   ├── webpack<span class="selector-class">.base</span><span class="selector-class">.conf</span><span class="selector-class">.js</span></div><div class="line">│   ├── webpack<span class="selector-class">.dev</span><span class="selector-class">.conf</span><span class="selector-class">.js</span></div><div class="line">│   ├── webpack<span class="selector-class">.prod</span><span class="selector-class">.conf</span><span class="selector-class">.js</span></div><div class="line">│   └── webpack<span class="selector-class">.test</span><span class="selector-class">.conf</span><span class="selector-class">.js</span></div><div class="line">├── config</div><div class="line">│   ├── dev<span class="selector-class">.env</span><span class="selector-class">.js</span></div><div class="line">│   ├── index<span class="selector-class">.js</span></div><div class="line">│   ├── prod<span class="selector-class">.env</span><span class="selector-class">.js</span></div><div class="line">│   └── test<span class="selector-class">.env</span><span class="selector-class">.js</span></div><div class="line">├── deploy<span class="selector-class">.sh</span></div><div class="line">├── dist</div><div class="line">│   ├── email_tpl</div><div class="line">│   │   ├── template<span class="selector-class">.html</span></div><div class="line">│   │   ├── template_h5<span class="selector-class">.html</span></div><div class="line">│   │   └── template_h5_2<span class="selector-class">.html</span></div><div class="line">│   ├── index<span class="selector-class">.html</span></div><div class="line">│   └── static</div><div class="line">│       ├── css</div><div class="line">│       ├── fonts</div><div class="line">│       ├── <span class="selector-tag">img</span></div><div class="line">│       └── js</div><div class="line">├── index<span class="selector-class">.html</span></div><div class="line">├── npm-debug<span class="selector-class">.log</span></div><div class="line">├── package-lock<span class="selector-class">.json</span></div><div class="line">├── package<span class="selector-class">.json</span></div><div class="line">├── src</div><div class="line">│   ├── App<span class="selector-class">.vue</span></div><div class="line">│   ├── assets</div><div class="line">│   │   └── js</div><div class="line">│   ├── components</div><div class="line">│   │   └── modal</div><div class="line">│   ├── config<span class="selector-class">.js</span></div><div class="line">│   ├── filters</div><div class="line">│   │   └── index<span class="selector-class">.js</span></div><div class="line">│   ├── main<span class="selector-class">.js</span></div><div class="line">│   ├── router</div><div class="line">│   │   └── index<span class="selector-class">.js</span></div><div class="line">│   ├── views</div><div class="line">│   │   ├── Edm-Item<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Edm-Item<span class="selector-class">.vue</span></div><div class="line">│   │   ├── EdmProgress-Item<span class="selector-class">.styl</span></div><div class="line">│   │   ├── EdmProgress-Item<span class="selector-class">.vue</span></div><div class="line">│   │   ├── EdmProgress<span class="selector-class">.styl</span></div><div class="line">│   │   ├── EdmProgress<span class="selector-class">.vue</span></div><div class="line">│   │   ├── H5Progress-Item<span class="selector-class">.styl</span></div><div class="line">│   │   ├── H5Progress-Item<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Index<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Index<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Share-Item<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Share-Item<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Signin<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Signin<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Tags-Item<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Tags-Item<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Task-H5<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Task-H5<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Task-Send<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Task-Send<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Task<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Task<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Tpl-H5<span class="selector-class">.styl</span></div><div class="line">│   │   ├── Tpl-H5<span class="selector-class">.vue</span></div><div class="line">│   │   ├── Uploadlogo-Item<span class="selector-class">.styl</span></div><div class="line">│   │   └── Uploadlogo-Item<span class="selector-class">.vue</span></div><div class="line">│   └── vuex</div><div class="line">│       ├── getters<span class="selector-class">.js</span></div><div class="line">│       ├── mutations<span class="selector-class">.js</span></div><div class="line">│       └── store<span class="selector-class">.js</span></div><div class="line">├── static</div><div class="line">│   ├── css</div><div class="line">│   │   └── base<span class="selector-class">.css</span></div><div class="line">│   ├── email_tpl</div><div class="line">│   │   ├── template<span class="selector-class">.html</span></div><div class="line">│   │   ├── template_h5<span class="selector-class">.css</span></div><div class="line">│   │   ├── template_h5<span class="selector-class">.html</span></div><div class="line">│   │   ├── template_h5_2<span class="selector-class">.css</span></div><div class="line">│   │   └── template_h5_2<span class="selector-class">.html</span></div><div class="line">│   └── <span class="selector-tag">img</span></div><div class="line">│       </div><div class="line">├── test</div><div class="line">│   ├── e2e</div><div class="line">│   │   ├── custom-assertions</div><div class="line">│   │   ├── nightwatch<span class="selector-class">.conf</span><span class="selector-class">.js</span></div><div class="line">│   │   ├── runner<span class="selector-class">.js</span></div><div class="line">│   │   └── specs</div><div class="line">│   └── unit</div><div class="line">│       ├── index<span class="selector-class">.js</span></div><div class="line">│       ├── karma<span class="selector-class">.conf</span><span class="selector-class">.js</span></div><div class="line">│       └── specs</div><div class="line">├── test<span class="selector-class">.txt</span></div><div class="line">├── yarn-error<span class="selector-class">.log</span></div><div class="line">└── yarn.lock</div></pre></td></tr></table></figure><h3 id="一个快速查看文档的npm命令"><a href="#一个快速查看文档的npm命令" class="headerlink" title="一个快速查看文档的npm命令"></a>一个快速查看文档的npm命令</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm docs &lt;<span class="class"><span class="keyword">package</span>-<span class="title">name</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><p>开发环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">process.env.NODE_ENV === <span class="string">'development'</span></div></pre></td></tr></table></figure></li><li><p>测试环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">process.env.NODE_ENV === <span class="string">'test'</span></div></pre></td></tr></table></figure></li><li><p>生产环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">process.env.NODE_ENV === <span class="string">'production'</span></div></pre></td></tr></table></figure></li></ul><h3 id="跨域处理"><a href="#跨域处理" class="headerlink" title="跨域处理"></a>跨域处理</h3><ul><li>浏览器同源策略：同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。</li><li>一个<em>源</em>的定义：如果协议，端口（如果指定了一个）和域名对于两个页面是相同的，则两个页面具有相同的源</li><li><a href="https://nodejs.org/dist/latest-v8.x/docs/api/url.html" target="_blank" rel="external">一个URL的组成部分</a><img src="/2017/08/12/share-vue/url-part.png" alt="url组成部分" title="url组成部分"></li></ul><h4 id="使用jsonp跨域"><a href="#使用jsonp跨域" class="headerlink" title="使用jsonp跨域"></a>使用jsonp跨域</h4><blockquote><p>只能发送GET请求，但是支持老的浏览器</p></blockquote><h4 id="使用html5-CORS跨域"><a href="#使用html5-CORS跨域" class="headerlink" title="使用html5 CORS跨域"></a>使用html5 CORS跨域</h4><ul><li>Access-Control-Allow-Origin: ‘*’(required)</li></ul><blockquote><p>可设置为origin或者origin下具体的某一个path</p></blockquote><ul><li>Access-Control-Allow-Credentials: true(optional)</li></ul><blockquote><p>表示是否允许发送cookie</p></blockquote><ul><li>Access-Control-Expose-Headers: X-Field(optional)</li></ul><blockquote><p>CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(‘X-Field’)可以返回X-Field字段的值。</p></blockquote><p>client:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request(<span class="string">'http:127.0.0.1:8080/get-list'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">    <span class="comment">// no-cors, cors, same-origin, navigate</span></div><div class="line">    mode: <span class="string">'same-origin'</span> <span class="comment">// 默认值，所以不是同源策略就会出现跨域</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">fetch(myRequest).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> res.json()</div><div class="line">&#125;).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(json)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>server:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">   <span class="comment">// res.setHeader('Access-Control-Allow-Origin', '*')    </span></div><div class="line">   res.end(<span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'javascript'</span>,</div><div class="line">        <span class="attr">price</span>: <span class="number">50</span></div><div class="line">    &#125;))</div><div class="line">&#125;)</div><div class="line">server.listen(<span class="number">8080</span>, _ =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'server has setup, listening at port: 8080'</span>)    </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">proxyTable:</span> &#123;</div><div class="line">    <span class="string">'/api'</span>: <span class="string">'http://edmserver.cheng95.com'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="js设计模式之publish-subscribe"><a href="#js设计模式之publish-subscribe" class="headerlink" title="js设计模式之publish/subscribe"></a>js设计模式之publish/subscribe</h3><blockquote><p>解耦具体的业务代码和组件/插件内部的代码。<br>一个弹出层，有确定，取消2个按钮，组件内部帮我们实现好的效果是：点击确定，取消2个按钮，弹出层都会消失，但是点击确定按钮的时候，我们要实现一些自己的业务逻辑。比如点击确定的时候，发送一个请求到后台。通过publish/subscribe就可以很好的实现这种组件/插件内部的代码和我们自己具体的业务代码相分离。</p></blockquote><p>vue源码位置：src/core/instance/events.js</p><h3 id="vue组件通信"><a href="#vue组件通信" class="headerlink" title="vue组件通信"></a>vue组件通信</h3><h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><blockquote><p>因为vue使用的单向数据流（数据只能从父组件流向子组件），所以子组件不能直接修改从父组件传递过来的props，如果要修改，必须通过事件的形式。</p><ul><li><code>vm.$on</code></li><li><code>vm.$once</code></li><li><code>vm.$emit</code></li><li><code>vm.$off</code></li></ul></blockquote><h4 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h4><blockquote><p>组件之间没有父子关系，常用解决方案：Event Bus(事件总线)，就是通过一座桥梁将没有关系的组件联系起来。<br>其实根组件就是他们之间的这座桥梁，但是根组件上默认已经挂载了很多东西，所以一般情况下会使用一个空的Vue实例来充当这个事件总线。</p></blockquote><p>例如2个兄弟组件，一个按钮，一个段落，通过点击按钮来修改段落中的文字<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">x-button</span>&gt;</span><span class="tag">&lt;/<span class="name">x-button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">c</span>&gt;</span><span class="tag">&lt;/<span class="name">c</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue()</div><div class="line">Vue.component(<span class="string">'x-button'</span>, &#123;</div><div class="line">    data()&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">count</span>: <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;button @click="setMsg"&gt;测试按钮&lt;/button&gt;'</span>,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        setMsg()&#123;</div><div class="line">            vm.$emit(<span class="string">'set-msg'</span>, <span class="string">`count is: <span class="subst">$&#123;<span class="keyword">this</span>.count++&#125;</span>`</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Vue.component(<span class="string">'c'</span>, &#123;</div><div class="line">    data()&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">msg</span>: <span class="string">'这是默认值'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;'</span>,</div><div class="line">    created()&#123;</div><div class="line">        vm.$on(<span class="string">'set-msg'</span>, msg =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.msg = msg    </div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h4 id="使用vuex来管理app数据"><a href="#使用vuex来管理app数据" class="headerlink" title="使用vuex来管理app数据"></a>使用vuex来管理app数据</h4><blockquote><p>vuex是用来管理整个应用的数据，vuex中的数据可以被任何组件访问。所以vuex也是组件之间通讯的一种方案，至于到底用不用vuex，哪些数据要放到vuex中管理，取决于具体情况。</p></blockquote><h3 id="native修饰符"><a href="#native修饰符" class="headerlink" title=".native修饰符"></a>.native修饰符</h3><blockquote><p>vue组件之间的通信，可以通过事件系统，但这些事件并不是原生的事件。dom操作离不开原生事件，vue提供了<code>.native</code>修饰符来绑定原生事件（内部使用addEventListener）。对于刚刚接触vue的人来说，可能思想难以转变，喜欢直接操作dom。通过<code>.native</code>修饰符，我们可以像<code>vm.$on</code>一样来绑定原生事件。</p></blockquote><p>假如在登录的时候，既可以通过点击登录按钮进行登录，也可以通过敲击<code>enter</code>键进行登录, html代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"password"</span></span></div><div class="line">    <span class="attr">ref</span>=<span class="string">"password"</span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;<span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"large"</span></span></div><div class="line">    @<span class="attr">click.prevent</span>=<span class="string">"signin"</span></div><div class="line">    <span class="attr">:disabled</span>=<span class="string">"!signinBtnActive"</span>&gt;登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div></pre></td></tr></table></figure></p><p>很多时候，你可能会这样来绑定事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$refs.password.$el.addEventListener(<span class="string">'keyup'</span>, e =&gt; &#123;</div><div class="line">    <span class="keyword">if</span>(e.keyCode === <span class="number">13</span>)&#123;</div><div class="line">        <span class="keyword">this</span>.signin() <span class="comment">// 登录操作</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>其实vue提供了<code>.native</code>修饰符来绑定原生事件，提供了<code>.enter</code>修饰符来表示按的键是<code>enter</code>键，所以我们可以用更加优雅的方式来书写：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"passowd"</span> <span class="attr">v-model</span>=<span class="string">"password"</span></span></div><div class="line">    @<span class="attr">keyup.native.enter</span>=<span class="string">"signin"</span>&gt;<span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><p><a href="https://docs.npmjs.com/misc/coding-style" target="_blank" rel="external">npm推荐的代码风格</a></p><h3 id="documents"><a href="#documents" class="headerlink" title="documents"></a>documents</h3><ul><li><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="external">vue</a></li><li><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="external">vue-router</a></li><li><a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="external">vuex</a></li><li><a href="http://stylus-lang.com/" target="_blank" rel="external">stylus</a></li><li><a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a></li><li><a href="https://webpack.js.org/concepts/" target="_blank" rel="external">webpack2</a></li><li><a href="http://element.eleme.io/#/zh-CN/component/installation" target="_blank" rel="external">ElementUI</a></li><li><a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="external">http-proxy-middleware</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">CORS跨域</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h3&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="vue" scheme="https://xxxxxmiss.github.io/categories/vue/"/>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
      <category term="frontend-framework" scheme="https://xxxxxmiss.github.io/tags/frontend-framework/"/>
    
  </entry>
  
  <entry>
    <title>zeroclipboard</title>
    <link href="https://xxxxxmiss.github.io/2017/07/30/zeroclipboard/"/>
    <id>https://xxxxxmiss.github.io/2017/07/30/zeroclipboard/</id>
    <published>2017-07-30T05:57:51.000Z</published>
    <updated>2017-07-30T08:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css" media="screen">    .main-view{        display: flex;    }    .label{        border-bottom: 1px solid #AECDE9;    }    .one-half{        flex: 1;        display: inline-block;        padding-left: 10px;        padding-right: 10px;    }    textarea{        width: 100%;        border-radius: 8px;        color: #4A4A4A;        padding: 10px;        border: 1px solid #979797;        outline: none;        box-sizing: border-box;    }    textarea:hover, textarea:focus{        border: 1px solid #20a0ff;    }    .btn-clipboard{        background-color: #fff;        color: #5D9CD4;        border: 1px solid #979797;        border-radius: 8px;        padding: 8px 20px;        font-weight: 400;        outline: none;        cursor: pointer;    }    .btn-clipboard.zeroclipboard-is-hover    {        background: #3077B5;        border: 1px solid #3077B5;        color: #fff;        text-decoration: none;    }    .btn-container{        text-align: right;    }</style><script src="/2017/07/30/zeroclipboard/ZeroClipboard.js"></script><h2 id="ZeroClipboard-js简介"><a href="#ZeroClipboard-js简介" class="headerlink" title="ZeroClipboard.js简介"></a>ZeroClipboard.js简介</h2><blockquote><p>是一个非常好用的用于复制文本到剪切板的，它的工作原理就是在你要点击的按钮上覆盖一个透明的flash。<br>所以你点击复制按钮，其实点击的是透明的flash，先将要拷贝的文本复制到flash，在将flash中的文本复制到剪切板。</p></blockquote><p>注意：</p><ul><li>由于考虑到安全性问题，<code>ZeroClipboard</code>需要工作在服务器上，也就是说你必须启动一个服务器（不管是本地服务，还是远程服务）。<br><br></li><li>引入<code>ZeroClipboard.js</code>的同时，需要在相同的文件夹下放置<code>ZeroClipboard.swf</code>。如果<code>ZeroClipboard.swf</code>没有放在和<code>ZeroClipboard.js</code>相同的文件夹下，需要手动配置。<br><br></li><li>当你hover要点击的按钮时，<code>ZeroClipboard</code>默认会在按钮上添加<code>zeroclipboard-is-hover</code>样式<br><br></li><li>当你激活按钮时，<code>ZeroClipboard</code>默认会在按钮上添加<code>zeroclipboard-is-active</code>样<br><br></li><li>所以当你需要为按钮添加hover或者active样式时，可以重写这两个样式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ZeroClipboard</span><span class="selector-class">.config</span>(&#123;</div><div class="line">    <span class="attribute">swfPath</span>: <span class="string">"../path/new/"</span>    </div><div class="line">&#125;)</div></pre></td></tr></table></figure><div class="main-view"><br>    <div class="one-half"><br>        <h2 class="label"><label for="input">要拷贝的文本</label></h2><br>        <textarea type="text" id="input" rows="6">copy me</textarea><br>        <p class="btn-container"><br>            <button class="btn-clipboard" type="button" data-clipboard-target="input" id="btn-clipboard">拷贝文本</button><br>        </p><br>    </div><br>    <div class="one-half"><br>        <h2 class="label"><label for="textarea">黏贴到这里</label></h2><br>        <textarea id="textarea" rows="6"></textarea><br>        <p class="btn-container"><br>            <button class="btn-clipboard" type="text" id="btn-clear">清空</button><br>        </p><br>    </div><br></div><script>    var client = new ZeroClipboard(document.getElementById('btn-clipboard'))    client.on('ready', function(readyEvent){        alert('ZeroClipboard SWF is ready!')    })    document.getElementById('btn-clear').addEventListener('click', function(){        document.getElementById('textarea').value = ''    })</script><p><br><a href="https://github.com/zeroclipboard/zeroclipboard/blob/master/docs/instructions.md" target="_blank" rel="external">详细用法参考这里</a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;
    .main-view{
        display: flex;
    }
    .label{
        border-bottom: 1px solid #AECDE9;
  
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>nodejs-cluster</title>
    <link href="https://xxxxxmiss.github.io/2017/07/16/nodejs-cluster/"/>
    <id>https://xxxxxmiss.github.io/2017/07/16/nodejs-cluster/</id>
    <published>2017-07-15T16:44:48.000Z</published>
    <updated>2017-07-16T03:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h1><blockquote><p>一个Node实例运行在一个单线程中。为了高效的利用多核系统，用户有时候需要启动一个Node进程的集群去处理负载。<br>通过cluster模块很容易的创建一些共享服务端口的子进程。</p></blockquote><h1 id="How-It-Works-它是如何工作的"><a href="#How-It-Works-它是如何工作的" class="headerlink" title="How It Works(它是如何工作的)"></a>How It Works(它是如何工作的)</h1><blockquote><p>work进程通过<code>child_process.fork()</code>方法复制而来，因此它可以和父进程之间通过IPC信道交流，并且在他们之间来来回回的传递服务句柄。<br>cluster模块支持2种方法分发到来的连接。<br>第一种方法（默认的方法，支持所有的平台，除了windows平台），轮询法，由master进程监听一个端口，接受新的连接，然后将这些连接分发到work进程。在分发中使用了一些内置的技巧防止work进程人任务过载。<br>第二种方法就是master进程创建监听的socket，然后发送到感兴趣的work进程，work进程直接接收到来的连接。<br>理论上，第二种方法有着更好的性能。但是在实践中，由于操作系统的调度机制的变化莫测，分发极度的不平衡。</p></blockquote><p>由于已经发布了<a href="http://nodejs.cn/api/cluster.html" target="_blank" rel="external">官方的中文文档</a>，接下来的文档不在翻译了…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cluster&quot;&gt;&lt;a href=&quot;#Cluster&quot; class=&quot;headerlink&quot; title=&quot;Cluster&quot;&gt;&lt;/a&gt;Cluster&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一个Node实例运行在一个单线程中。为了高效的利用多核系统，用户有时候需要
      
    
    </summary>
    
      <category term="nodejs" scheme="https://xxxxxmiss.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://xxxxxmiss.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>event-loop(事件循环)</title>
    <link href="https://xxxxxmiss.github.io/2017/07/14/event-loop/"/>
    <id>https://xxxxxmiss.github.io/2017/07/14/event-loop/</id>
    <published>2017-07-14T02:58:29.000Z</published>
    <updated>2017-07-16T12:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css" media="screen">  .list li{    list-style-type: decimal;  }</style><h2 id="2个名词"><a href="#2个名词" class="headerlink" title="2个名词"></a>2个名词</h2><ul><li>microtask: 称之为小型任务</li><li>macrotask（task queue）: 称之为大型任务</li></ul><h2 id="事件循环模型"><a href="#事件循环模型" class="headerlink" title="事件循环模型"></a>事件循环模型</h2><blockquote><p>当执行栈（call stack）为空时，一个事件循环会按照下面的步骤进行：</p></blockquote><ol class="list"><br>  <li>从macrotask队列中选择最老一个任务taskA</li><br>  <li>如果taskA不存在，即macrotask队列是空的，那么进行步骤6</li><br>  <li>设置当前运行的任务为taskA</li><br>  <li>运行taskA(即执行taskA它的回调函数)</li><br>  <li>设置当前运行的任务为空，并从macrotask中移除taskA</li><br>  <li>开始处理microtask<br>    <ul><br>      <li>(a)从microtask中选择最老的任务taskX</li><br>      <li>(b)如果taskX不存在，即microtask是空的，那么跳到步骤(g)</li><br>      <li>(c)设置当前运行的任务为taskX</li><br>      <li>(d)运行taskX(即执行taskX的回调函数)</li><br>      <li>(e)设置当前运行的任务为空，并从microtask中移除taskX</li><br>      <li>(f)从microtask选择下一个最老的任务，步骤(b)</li><br>      <li>(g)重复以上步骤，直到microtask中的任务全部执行完毕</li><br>    </ul><br>  </li><br>  <li>继续回到步骤1</li><br></ol><p>精简的概括就是：</p><ul><li>先从macrotask队列中选择最老的一个任务开始执行，然后移除这个最老的任务</li><li>再执行microtask队列中所有的任务，然后移除他们</li><li>继续下一轮，重复以上2步</li></ul><h2 id="需要知道的一些事情："><a href="#需要知道的一些事情：" class="headerlink" title="需要知道的一些事情："></a>需要知道的一些事情：</h2><ol class="list"><br>  <li>当一个macrotask任务正在运行的时候，新的事件可以被注册，也即创建新的任务。例如：<br>    <ul><br>      <li>promiseA.then()的回调是一个任务<br>        <ul><br>          <li>promiseA如果处于resolve/reject状态时，那么该任务被推到事件循环的当前轮次的microtask中</li><br>          <li>promiseA处于pending状态时，那么该任务将会被推到事件循环的下一个轮次的microtask中。</li><br>        </ul><br>      </li><br>      <li>setTimeout(callback, n)的回调是一个任务，将会被推到macrotask中，及时n=0。</li><br>    </ul><br>  </li><br>  <li>如果事件循环正在执行microtask中的任务，那么你可以继续往microtask中添加任务，这些任务都会在本轮次的循环中执行。</li><br>  <li>只有等到本轮次的microtask中的所有任务执行完毕，才会执行下一轮的macrotask任务。</li><br>  <li>常见的microtask任务：<code>process.nextTick</code>,<code>Promise</code>, <code>Object.observe</code>, <code>MutationObserver</code></li><br>  <li>常见的macrotask任务：<code>setTimeout</code>,<code>setInterval</code>, <code>setImmediate</code>,Dom事件（click, scroll, mouseup等）， <code>ajax</code>，I/O, UI rendering等。还需要注意的是，整个的脚本也是一个macrotask任务。</li><br></ol><p>经过上面的分析，可以看如下例子输出：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</div><div class="line"></div><div class="line">const interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'setInterval'</span>)</div><div class="line">&#125;, <span class="number">0</span>)</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout1'</span>)</div><div class="line"></div><div class="line">  Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'promise3'</span>)</div><div class="line">  &#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'promise4'</span>)</div><div class="line">  &#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'setTimeout2'</span>)</div><div class="line"></div><div class="line">      Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'promise5'</span>)</div><div class="line">      &#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'promise6'</span>)</div><div class="line">      &#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        clearInterval(interval)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line">Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="regexp">//</span> script start</div><div class="line"><span class="regexp">//</span> promise1</div><div class="line"><span class="regexp">//</span> promise2</div><div class="line"><span class="regexp">//</span> setInterval</div><div class="line"><span class="regexp">//</span> setTimeout1</div><div class="line"><span class="regexp">//</span> promise3</div><div class="line"><span class="regexp">//</span> promise4</div><div class="line"><span class="regexp">//</span> interval</div><div class="line"><span class="regexp">//</span> setTimout2</div><div class="line"><span class="regexp">//</span> promise5</div><div class="line"><span class="regexp">//</span> pormise6</div></pre></td></tr></table></figure></p><h2 id="call-stack-执行栈-与event-loop-事件循环-之间的关系"><a href="#call-stack-执行栈-与event-loop-事件循环-之间的关系" class="headerlink" title="call stack(执行栈)与event loop(事件循环)之间的关系"></a>call stack(执行栈)与event loop(事件循环)之间的关系</h2><blockquote><p>为了形象的表示，可以参看下图：</p></blockquote><img src="/2017/07/14/event-loop/event-loop.png" alt="事件循环与函数调用栈的关系" title="事件循环与函数调用栈的关系"><p>关于他们之间的关系的说明，此处就不在叙述了，具体可以<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external">参看这里</a></p><p>参考文章如下：<br><a href="https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context" target="_blank" rel="external">microtask and macrotask</a><br><a href="https://blog.risingstack.com/node-js-at-scale-understanding-node-js-event-loop/" target="_blank" rel="external">event loop</a><br><a href="https://html.spec.whatwg.org/multipage/webappapis.html#task-queue" target="_blank" rel="external">task-queue spec</a><br><a href="https://vimeo.com/96425312" target="_blank" rel="external">call stack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;
  .list li{
    list-style-type: decimal;
  }
&lt;/style&gt;

&lt;h2 id=&quot;2个名词&quot;&gt;&lt;a href=&quot;#2个名词&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="nodejs" scheme="https://xxxxxmiss.github.io/tags/nodejs/"/>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>nodejs-process</title>
    <link href="https://xxxxxmiss.github.io/2017/07/12/nodejs-process/"/>
    <id>https://xxxxxmiss.github.io/2017/07/12/nodejs-process/</id>
    <published>2017-07-12T15:00:05.000Z</published>
    <updated>2017-07-16T12:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Process-Events-进程事件"><a href="#Process-Events-进程事件" class="headerlink" title="Process Events(进程事件)"></a>Process Events(进程事件)</h2><blockquote><p><code>process</code>对象是<code>EventEmitter</code>的一个实例</p></blockquote><h3 id="beforeExit"><a href="#beforeExit" class="headerlink" title="beforeExit"></a>beforeExit</h3><blockquote><p>当Node清空事件队列并且没有额外的任务加入到事件队列中，触发该事件。通常情况下，当没有额外的任务加入到事件队列中时，Node进程会自动退出。<br>但是如果’beforeExit’事件绑定的监听器的回调函数中，含有一个可以进行异步调用的操作，那么Node.js进程会继续运行。</p><p>process.exitCode 作为唯一的参数值传递给’beforeExit’事件监听器的回调函数。</p><p>如果进程由于显式的原因而将要终止，例如直接调用process.exit()或抛出未捕获的异常，’beforeExit’事件不会被触发。</p><p>除非本意就是需要添加额外的工作(比如通过监听器进行异步调用)到事件循环数组，否则不应该用’beforeExit’事件替代’exit’事件。</p></blockquote><h3 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h3><blockquote><p>如果一个进程是通过<code>IPC</code>信道的方式spawned出来的，那么当<code>IPC</code>信道关闭的时候触发该事件。</p></blockquote><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><blockquote><p>当Node进程是由于以下2中情况之一导致退出的时候，会触发该事件：</p></blockquote><ul><li>显示的调用<code>process.exit()</code></li><li>事件循环队列中不再有额外的任务去做的时候</li></ul><blockquote><p>一旦到达Node进程即将退出这个点的时候，是没有办法去阻止进程退出的。当<code>exit</code>事件上所有的监听器都执行完毕的时候，进程就会自动退出。<br>该事件的监听器会接受唯一的一个参数, 该参数来自<code>process.exitCode</code>或者来自传入到<code>process.exit()</code>中的code</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'exit'</span>, code =&gt; &#123;</div><div class="line">    console.log(`About to <span class="keyword">exit</span> with code: <span class="variable">$&#123;code&#125;</span>`)    </div><div class="line">&#125;)</div></pre></td></tr></table></figure><blockquote><p>因为一旦到达Node进程即将退出这个点，是没有办法阻止进程退出的。所有该事件的监听器中所做的操作都应该是<strong>同步</strong>的操作，任何在事件循环中排队的工作都会被强制丢弃。例如在下例中，timeout操作永远不会被执行(因为不是同步操作)。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'exit'</span>, <span class="function"><span class="params">code</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 异步任务是不会被执行的</span></div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'This will not run'</span>)    </div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="message"><a href="#message" class="headerlink" title="message"></a>message</h3><blockquote><p>当一个Node进程是通过<code>IPC</code>信道的方式spawned出来的，那么当父进程通过<code>childprocess.send()</code>方法发送信息到该子进程的时候，就会触发该事件。</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">process.<span class="literal">on</span>(<span class="string">'message'</span>, <span class="function"><span class="params">(message, sendHandle)</span> =&gt;</span> &#123;&#125;)</div></pre></td></tr></table></figure><p>回调会接受2个参数：</p><ul><li>message：一个解析过的JSON对象或者一个原始值</li><li>sendHandle： net.Socket或者net.Server或者undefined</li></ul><h3 id="uncaughtException"><a href="#uncaughtException" class="headerlink" title="uncaughtException"></a>uncaughtException</h3><blockquote><p>当事件队列在循环的过程中，遇到一个未能捕获的JS异常的时候，沿着代码调用路径反向传递回event loop，就会触发该事件。<br>默认情况下，Node处理这样的异常是将追踪栈中的信息打印到标准的错误流中，然后退出。<br>如果给该事件添加了自己的监听器，那么会改写默认行为。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 回调接受唯一的一个Error对象</span></div><div class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">    fs.writeSync(<span class="number">1</span>, <span class="string">`Caught Exception: <span class="subst">$&#123;err&#125;</span>\n`</span>)    </div><div class="line">&#125;)</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'This will still run'</span>)</div><div class="line">&#125;, <span class="number">500</span>)</div><div class="line"></div><div class="line">nonexistentFun()</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'This will not run'</span>)</div></pre></td></tr></table></figure><p>Warning: 正确的使用<code>uncaughtException</code>事件</p><blockquote><p>该事件一般仅用着处理异常的最后的手段，因为它处理异常的机制是非常粗糙的。<br> 此事件不应该当作出了<code>错误就恢复让它继续</code>的等价机制。 未处理异常本身就意味着应用已经处于了未定义的状态。如果基于这种状态，尝试恢复应用正常进行，可能会造成未知或不可预测的问题。<br><br><br>此事件的监听器回调函数中抛出的异常，不会被捕获。为了避免出现无限循环的情况，进程会以非<code>0</code>的状态码结束，并打印堆栈信息。<br><br><br>正确的使用<code>uncaughtException</code>应该是在进程关闭之前做一些相关的资源清理工作（比如文件描述符，句柄等），而不应该是出现了<code>uncaughtException</code>异常之后做一些让应用恢复工作的事情，因为这样是不安全的。</p><p>想让一个已经崩溃的应用正常运行，更可靠的方式应该是启动另外一个进程来监测/探测应用是否出错， 无论uncaughtException事件是否被触发，如果监测到应用出错，则恢复或重启应用。</p></blockquote><h2 id="Signal-Events（信号事件）"><a href="#Signal-Events（信号事件）" class="headerlink" title="Signal Events（信号事件）"></a>Signal Events（信号事件）</h2><blockquote><p>当Node进程接受到信号时，就会触发相应的信号事件。<br>每个事件名称，以信号名称的大写表示 (比如事件’SIGINT’ 对应信号 SIGINT).</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">process.stdin.resume()</div><div class="line"></div><div class="line">process.<span class="literal">on</span>(<span class="string">'SIGINT'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Received SIGINT.  Press Control-D to exit.'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><blockquote><p>在大多数的终端上发出<code>SIGINT</code>信号最简单的方式就是按下<code>Ctrl+C</code>键。<br>所以上面的例子中，当你按下<code>Ctrl+C</code>后，就会触发<code>SIGINT</code>事件，输出’Received SIGINT.  Press Control-D to exit.’，当你在按下<code>Ctrl+D</code>时，进程退出。</p></blockquote><p>以下有很重要的几点需要牢记：</p><ul><li><code>SIGUSR1</code>是Node用来启动debugger程序的。可以为此事件绑定一个监听器，但是即使这样做也不会阻止调试器的启动。<br><br></li><li><code>SIGTERM</code>和<code>SIGINT</code>在非windows平台上，有默认的监听器，这样进程在携带<code>128 + signal number</code>退出码退出之前，可以重置终端模式。如果给他们添加了自己的监听器，那么默认行为就会被移除。（Node进程不会退出）<br><br></li><li><code>SIGPIPE</code>默认是被忽略的，但是你也可以给它添加监听程序。<br><br></li><li><code>SIGHUP</code>,在windows平台上，当console窗口被关闭时，触发该事件。在其他平台上有着不同的行为，可以参看<a href="http://man7.org/linux/man-pages/man7/signal.7.html" target="_blank" rel="external">这里</a>。可以对该信号添加监听器，及时添加了监听器，在windows平台上，大约10秒之后Node会无条件的终止。在非windows平台上个，<code>SIGHUP</code>信号默认行为是终止Node,如果添加了自己的监听器，那么默认行为就会被移除。<br><br></li><li><code>SIGTERM</code>,windows平台不支持，可以给其添加监听器。<br><br></li><li><code>SIGINT</code>,所有的平台都支持。一般情况下按下<code>Ctrl+C</code>（当然你可以配置成其他快捷方式是）就会发出该信号。但是如果终端的raw模式被激活，那么就不会发出该信号。<br><br></li><li><code>SIGBREAK</code>,在windows平台上按下<code>Ctrl+Break</code>就会传递该信号。在非windows平台上，可以对其添加监听器，但是没有方式触发或发送此事件。<br><br></li><li><code>SIGWINCH</code>,当console窗口大小发生改变的时候，就会触发该信号。在windows平台上，仅仅发生在当在console有写入并且光标发生移动的时候才会触发该信号，或者一个可读tty被用在raw模式。<br><br></li><li><code>SIGKILL</code>，无法对其添加监听器，在所有的平台上，他都会无条件终止Node。<br><br></li><li><code>SIGTOP</code>，无法对其添加监听器。<br></li></ul><p>Note:<br>windows平台不支持发射信号，但是Node通过<code>process.kill()</code>,<code>ChildProcess.kill()</code>提供了某些模拟机制。</p><ul><li>发射信号<code>0</code>可以用来测试一个进程的存在与否。</li><li>发射<code>SIGINT</code>,<code>SIGTERM</code>,<code>SIGKILL</code>可以无条件的终止目标进程。</li></ul><h2 id="process-abort"><a href="#process-abort" class="headerlink" title="process.abort()"></a>process.abort()</h2><blockquote><p>该方法可以迅速的终止Node进程，并且产生一个core file</p></blockquote><h2 id="prcess-arch-architecture"><a href="#prcess-arch-architecture" class="headerlink" title="prcess.arch(architecture)"></a>prcess.arch(architecture)</h2><p>return: &lt;string&gt;</p><blockquote><p>该属性返回当前正在运行的Node进程的处理器结构标识，如<code>arm</code>,<code>ia32</code>,<code>x64</code></p></blockquote><h2 id="process-argv"><a href="#process-argv" class="headerlink" title="process.argv"></a>process.argv</h2><p>return: &lt;Array&gt;</p><blockquote><p>返回当Node进程启动的时候在命令行传入的参数的数组。<br>数组的第一个元素就是<code>process.execPath</code>的值。<br>数组的第二个元素是被执行的文件的绝对路径。<br>余下的参数就是传入命令的其他的参数。</p></blockquote><p>process-args.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">process.argv.forEach(<span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>: <span class="subst">$&#123;val&#125;</span>`</span>)    </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>这样启动：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node <span class="built_in">process</span>-args.js <span class="literal">one</span> <span class="literal">two</span>=<span class="literal">three</span> <span class="literal">four</span></div></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>: /usr/<span class="built_in">local</span>/bin/node</div><div class="line"><span class="number">1</span>: /Users/qsch/workspace/tools/<span class="built_in">process</span>-args.js</div><div class="line"><span class="number">2</span>: <span class="literal">one</span></div><div class="line"><span class="number">3</span>: <span class="literal">two</span>=<span class="literal">three</span></div><div class="line"><span class="number">4</span>: <span class="literal">four</span></div></pre></td></tr></table></figure></p><h2 id="process-execPath"><a href="#process-execPath" class="headerlink" title="process.execPath"></a>process.execPath</h2><blockquote><p>返回启动Node进程的可执行程序的绝对路径, <code>&#39;/usr/local/bin/node&#39;</code></p></blockquote><h2 id="process-argv0"><a href="#process-argv0" class="headerlink" title="process.argv0"></a>process.argv0</h2><p>return: &lt;string&gt;</p><h2 id="process-channel"><a href="#process-channel" class="headerlink" title="process.channel"></a>process.channel</h2><blockquote><p>如果一个进程是通过<code>IPC</code>spawned出来的，那么<code>process.channel</code>属性返回IPC信道的引用。如果没有IPC信道存在，那么返回undefined。</p></blockquote><h2 id="process-chdir-directory"><a href="#process-chdir-directory" class="headerlink" title="process.chdir(directory)"></a>process.chdir(directory)</h2><p>directory: &lt;string&gt;</p><blockquote><p><code>process.chdir()</code>方法改变当前Node进程所在的工作目录。<br>如果操作失败（如指定的<code>directory</code>不存在），那么抛出一个异常。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">`Starting directory: <span class="subst">$&#123;process.cwd()&#125;</span>`</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  process.chdir(<span class="string">'/tmp'</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`New directory: <span class="subst">$&#123;process.cwd()&#125;</span>`</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">`chdir: <span class="subst">$&#123;err&#125;</span>`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="process-connected"><a href="#process-connected" class="headerlink" title="process.connected"></a>process.connected</h2><p>return: &lt;boolean&gt;</p><blockquote><p>如果一个Node进程是通过IPC信道spawned出来的，那么只要主进程和spawned出来的进程的IPC信道是链接的，那么返回true。如果调用<code>process.disconnect()</code>那么该属性就返回false.<br>一旦<code>process.connected</code>返回false，那么就不能再通过<code>process.send()</code>基于IPC信道发送消息。</p></blockquote><h2 id="process-cpuUsage-previousValue"><a href="#process-cpuUsage-previousValue" class="headerlink" title="process.cpuUsage([previousValue])"></a>process.cpuUsage([previousValue])</h2><p>previousValue: 上一次调用此方法<code>process.cpuUsage()</code>的返回值<br>return: &lt;Object&gt;</p><ul><li>user: &lt;integer&gt;</li><li>system: &lt;integer&gt;<blockquote><p><code>process.cpuUsage()</code>方法返回包含当前进程的用户CPU时间和系统CPU时间的对象。此对象包含user和system属性，属性值的单位都是微秒(百万分之一秒)。 user和system属性值分别计算了执行用户程序和系统程序的时间，如果此进程在执行任务时是基于多核CPU，值可能比实际花费的时间要大。</p></blockquote></li></ul><p>上一次调用process.cpuUsage()方法的结果，可以作为参数值传递给此方法，得到的结果是与上一次的差值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> startUsage = process.cpuUsage();</div><div class="line"><span class="comment">// &#123; user: 38579, system: 6986 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// spin the CPU for 500 milliseconds</span></div><div class="line"><span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">Date</span>.now() - now &lt; <span class="number">500</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(process.cpuUsage(startUsage));</div><div class="line"><span class="comment">// &#123; user: 514883, system: 11226 &#125;</span></div></pre></td></tr></table></figure><h2 id="process-cwd"><a href="#process-cwd" class="headerlink" title="process.cwd()"></a>process.cwd()</h2><blockquote><p>返回当前Node进程所在的工作目录。</p></blockquote><h2 id="prcess-disconnect"><a href="#prcess-disconnect" class="headerlink" title="prcess.disconnect()"></a>prcess.disconnect()</h2><blockquote><p>如果一个Node进程是通过IPC信道spawned出来的，那么该方法会关闭该进程和父进程之间的IPC信道。当没有更多的链接时，当前子进程就会优雅的退出。<br>调用当前进程的<code>process.disconnect()</code>方法和调用父进程的<code>ChildProcess.disconnect()</code>起到的想过是一样的。<br><br><br>如果某个进程不是通过IPC信道spawned出来的，那么<code>process.disconnect</code>属性是undefined。</p></blockquote><h2 id="process-env"><a href="#process-env" class="headerlink" title="process.env"></a>process.env</h2><p>return: &lt;Object&gt;</p><blockquote><p>返回一个包含当前用户环境的对象</p></blockquote><p>这个对象的形式看起来可能如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">TERM</span>: <span class="string">'xterm-256color'</span>,</div><div class="line">  <span class="attribute">SHELL</span>: <span class="string">'/usr/local/bin/bash'</span>,</div><div class="line">  <span class="attribute">USER</span>: <span class="string">'maciej'</span>,</div><div class="line">  <span class="attribute">PATH</span>: <span class="string">'~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'</span>,</div><div class="line">  <span class="attribute">PWD</span>: <span class="string">'/Users/maciej'</span>,</div><div class="line">  <span class="attribute">EDITOR</span>: <span class="string">'vim'</span>,</div><div class="line">  <span class="attribute">SHLVL</span>: <span class="string">'1'</span>,</div><div class="line">  <span class="attribute">HOME</span>: <span class="string">'/Users/maciej'</span>,</div><div class="line">  <span class="attribute">LOGNAME</span>: <span class="string">'maciej'</span>,</div><div class="line">  <span class="attribute">_</span>: <span class="string">'/usr/local/bin/node'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Note:<br>分配到<code>process.env</code>上的任何属性都会隐式的转化为字符串。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">process<span class="selector-class">.env</span><span class="selector-class">.test</span> = null</div><div class="line">console.log(process<span class="selector-class">.env</span><span class="selector-class">.test</span>) <span class="comment">// 'null'</span></div><div class="line"></div><div class="line">process<span class="selector-class">.env</span><span class="selector-class">.test</span> = undefined</div><div class="line">console.log(typeof process<span class="selector-class">.env</span><span class="selector-class">.test</span>) <span class="comment">// 'string'</span></div></pre></td></tr></table></figure><p>可以通过<code>delete</code>操作符来删除<code>process.env</code>上的属性：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">process<span class="selector-class">.env</span><span class="selector-class">.TEST</span> = <span class="number">1</span></div><div class="line">delete process<span class="selector-class">.env</span><span class="selector-class">.TEST</span></div><div class="line">console.log(process<span class="selector-class">.env</span><span class="selector-class">.TEST</span>) <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p><p>在windows平台上，环境变量大小写不敏感：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">process<span class="selector-class">.env</span><span class="selector-class">.TEST</span> = <span class="number">1</span></div><div class="line">console.log(process<span class="selector-class">.env</span><span class="selector-class">.test</span>) <span class="comment">// '1'</span></div></pre></td></tr></table></figure></p><h2 id="process-execArgv"><a href="#process-execArgv" class="headerlink" title="process.execArgv"></a>process.execArgv</h2><p>return: &lt;Object&gt;</p><blockquote><p>返回当Node进程启动的时候传入到命令行中的Node.js特定的命令行选项。这些特定选项不会出现在<code>process.argv</code>属性返回的数组中。<code>process.execArgv</code>返回的数组不包括Node可执行程序，执行当前脚本的名称和跟随在脚本名称后面的选项。<br>这些选项非常的有用，当spawned一个进程的时候，可以通过它保证spawned出来的子进程和父进程保持一致的环境。</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">node</span> <span class="title">--harmony</span> script.js --<span class="keyword">version</span></div></pre></td></tr></table></figure><p>那么process.execArgv返回：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'--harmony</span>']</div></pre></td></tr></table></figure></p><p>而process.argv返回：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'/usr/local/bin/node</span>', <span class="symbol">'script.js</span>', <span class="symbol">'--version</span>']</div></pre></td></tr></table></figure></p><h2 id="process-exit-code"><a href="#process-exit-code" class="headerlink" title="process.exit([code])"></a>process.exit([code])</h2><p>code: &lt;integer&gt; ,退出码，默认为0</p><blockquote><p>该方法告诉Node同步的终止进程并且携带一个退出码。如果没有传入code参数，那么默认使用代表成功的code<code>0</code>，或者使用<code>process.exitCode</code>(如果你曾经设置过)。当<code>exit</code>上的监听器全部执行完毕后，Node终止。</p></blockquote><p>Note: 调用<code>process.exit()</code>强制进程尽可能快的退出，即使有一些异步的工作还没有完全执行完毕，包括<code>process.stdout</code>, <code>process.stderr</code>的I/O操作。<br><br></p><p>在大多数的时候，，没有必要显示的调用<code>process.exit()</code>。Node进程会自动退出，当事件循环中没有更多的工作加入。可以通过设置<code>process.exitCode</code>来告诉进程当优雅的退出时使用什么样的状态码。<br><br></p><p>如下面的<code>process.exit()</code>错误用法演示了可能导致输出到标准输出的数据被切断和丢失：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (someConditionNotMet()) &#123;</div><div class="line">  printUsageToStdout();</div><div class="line">  process.<span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的用法有问题的原因就是：写入数据到<code>process.stdout</code>中的操作有可能是异步的操作，调用<code>process.exit()</code>会强制进程在这些异步完成之前就退出了。<br><br></p><p>不应该直接调用<code>process.exit()</code>方法，正确的做法应该是设置<code>process.exitCode</code>,这样就可以进程自然的退出，避免在安排一些额外的工作进入到事件循环中。</p><p>正确的做法：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">if</span> (someConditionNotMet()) &#123;</div><div class="line">  printUsageToStdout();</div><div class="line">  <span class="built_in">process</span>.exitCode = <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果因为发生了错误，抛出一个未捕获的错误，需要退出进程，通过设置<code>process.exitCode</code>要比直接调用<code>process.exit()</code>安全的多。</p><h2 id="process-exitCode"><a href="#process-exitCode" class="headerlink" title="process.exitCode"></a>process.exitCode</h2><p>return: &lt;integer&gt;</p><blockquote><p>进程退出的时携带的状态码。<br>调用<code>process.exit()</code>时指定了退出码，那么该退出码会覆盖之前通过<code>process.exitCode</code>设置的值。那么此时通过<code>process.exitCode</code>获取到的值就是<code>process.exit(code)</code>中指定的code。</p></blockquote><h2 id="process-kill-pid-signal"><a href="#process-kill-pid-signal" class="headerlink" title="process.kill(pid[,signal])"></a>process.kill(pid[,signal])</h2><p>pid: &lt;number&gt;,进程ID<br>signal: &lt;string&gt;|&lt;number&gt;,发射的信号，既可以是字符串，也可以是数字值，默认值是<code>SIGTERM</code>。</p><blockquote><p>该方法发送一个为<code>signal</code>的信号到<code>pid</code>的进程。</p></blockquote><p>如果<code>pid</code>不存在，那么该方法抛出一个错误。作为一种特殊情况，信号<code>0</code>可以被用来测试进程的存在性与否。在windows平台，如果<code>pid</code>被用来杀死一个进程组，那么会抛出一个错误。</p><p>Note: 尽管该方法的名字叫<code>kill</code>,但事实上它仅仅是一个信号发射器。发射信号的目的是去做一些事情，而不是杀死目标进程。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'SIGHUP'</span>, () =&gt; &#123;</div><div class="line">    console.log(<span class="string">'Got SIGHUP signal'</span>)    </div><div class="line">&#125;)</div><div class="line"></div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">    console.log(<span class="string">'Exiting'</span>)    </div><div class="line">    process.<span class="keyword">exit</span>(<span class="number">0</span>)</div><div class="line">&#125;, <span class="number">100</span>)</div><div class="line"></div><div class="line">process.kill(process.pid, <span class="string">'SIGHUP'</span>)</div></pre></td></tr></table></figure><p>Note: 当Node进程接收到一个<code>SIGUSR1</code>信号时，Node就会启动调试程序。</p><h2 id="process-memoryUsage"><a href="#process-memoryUsage" class="headerlink" title="process.memoryUsage()"></a>process.memoryUsage()</h2><p>return: &lt;Object&gt;</p><ul><li>rss: &lt;integer&gt;</li><li>heapTotal: &lt;integer&gt;</li><li>heapUsed: &lt;integer&gt;</li><li>external: &lt;integer&gt;<blockquote><p>方法返回一个对象，描述了Node使用内存的情况。</p></blockquote></li></ul><p>如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="selector-tag">process</span><span class="selector-class">.memoryUsage</span>())</div></pre></td></tr></table></figure></p><p>输出如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">rss</span>: <span class="number">4935680</span>,</div><div class="line">  heapTotal: <span class="number">1826816</span>,</div><div class="line">  heapUsed: <span class="number">650472</span>,</div><div class="line">  external: <span class="number">49879</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>heapTotal</code>,<code>heapUsed</code>指向V8的内存的使用情况。<br><code>external</code>指向被V8管理的绑定到JS对象上的C++对象的内存使用情况。</p><h2 id="process-nextTick-callback-…args"><a href="#process-nextTick-callback-…args" class="headerlink" title="process.nextTick(callback[,…args])"></a>process.nextTick(callback[,…args])</h2><p>callback: &lt;Function&gt;<br>..args: 当调用callback时传入的额外参数。</p><blockquote><p>该方法将<code>callback</code>添加到当前<code>microtask</code>循环的下一个轮次，一旦本轮的<code>microtask</code>循环结束，立马执行下一轮<code>microtask</code>中所有<code>callback</code>。<br><code>process.nextTick</code>不是<code>setTimeout(fn, 0)</code>的别名，它更加的高效，他在一下轮<code>macrotask</code>之前执行。</p></blockquote><p>关于<code>microtask</code>和<code>macrotask</code>，请参看<a href="https://xxxxxmiss.github.io/2017/07/14/event-loop/">这里</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>)</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)    </div><div class="line">&#125;, <span class="number">0</span>)</div><div class="line"></div><div class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'nextTick callback'</span>)    </div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'scheduled'</span>)</div><div class="line"></div><div class="line"><span class="comment">// start</span></div><div class="line"><span class="comment">// scheduled</span></div><div class="line"><span class="comment">// nextTick callback</span></div><div class="line"><span class="comment">// setTimeout</span></div></pre></td></tr></table></figure><p>当你在开发API时，你想给用户一个机会去添加事件处理器在对象被构造以后，在任何的I/O发生以前，这个方法就显得尤为重要。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyThing</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setupOptions(options)</div><div class="line"></div><div class="line">    process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span>f &#123;</div><div class="line">        <span class="keyword">this</span>.startDoingStuff()    </div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> thing = <span class="keyword">new</span> MyThing()</div><div class="line">thing.getReadyForStuff()</div><div class="line"></div><div class="line"><span class="comment">// thing.startDoingStuff() gets called now, not before.</span></div><div class="line"><span class="comment">// thing.startDoingStuff()在thing.getReadyForStuff()之后才执行。</span></div></pre></td></tr></table></figure><p>当不确定一个方法时100%同步还是100%异步的时候，<code>process.nextTick</code>可以起到很重要的流程控制。<br>如：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// WARNING!  <span class="keyword">DO</span> <span class="keyword">NOT</span> <span class="keyword">USE</span>!  BAD UNSAFE HAZARD!</div><div class="line"><span class="keyword">function</span> <span class="title">maybeSync</span>(arg, cb) &#123;</div><div class="line">  if (arg) &#123;</div><div class="line">    cb();</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  fs.stat(<span class="symbol">'file</span>', cb);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的<code>maybeSync</code>是一个非常不靠谱的API，因为可能出现如下情况：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> maybeTrue = <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>;</div><div class="line"></div><div class="line">maybeSync(maybeTrue, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  foo();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">bar();</div></pre></td></tr></table></figure><p>此次你并不清楚<code>foo()</code>,<code>bar()</code>那个先执行，如果<code>maybeTrue</code>为<code>true</code>,那么<code>foo()</code>先执行，否则<code>bar()</code>先执行。</p><p>如果改写为如下写法，那么就可以明确知道谁先执行了：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">definitelyAsync</span><span class="params">(arg, cb)</span></span> &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">arg</span>) &#123;</div><div class="line">    process.nextTick(cb);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  fs.stat(<span class="string">'file'</span>, cb);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此时，一定是<code>bar()</code>先执行，因为<code>process.nextTick</code>会将<code>cb</code>放到当前<code>microtask</code>的下一个轮次。</p><h2 id="process-pid"><a href="#process-pid" class="headerlink" title="process.pid"></a>process.pid</h2><p>return: &lt;integer&gt;</p><blockquote><p>返回当前进程的pid</p></blockquote><h2 id="process-platform"><a href="#process-platform" class="headerlink" title="process.platform"></a>process.platform</h2><p>return: &lt;string&gt;</p><blockquote><p>返回当前Node进程运行在那个操作系统的平台上。<br>如： <code>&#39;darwin&#39;</code>, <code>&#39;freebsd&#39;</code>, <code>&#39;linux&#39;</code>, <code>&#39;sunos&#39;</code> or <code>&#39;win32&#39;</code></p></blockquote><h2 id="prcess-send-message-sendHandle-options-callback"><a href="#prcess-send-message-sendHandle-options-callback" class="headerlink" title="prcess.send(message[, sendHandle[, options]][,callback])"></a>prcess.send(message[, sendHandle[, options]][,callback])</h2><p>message: &lt;Object&gt;<br>sendHandle: &lt;Handle object&gt;<br>options: &lt;Object&gt;<br>callback: &lt;Function&gt;<br>return: &lt;boolean&gt;</p><blockquote><p>如果一个进程是通过IPC信道spawned出来的，那么该进程可以通过<code>prcess.send()</code>方法发送信息到父进程。父进程可以通过<code>ChildProcess</code>来监听<code>message</code>事从而接收来自子进程的消息。<br>如果某个进程不是通过IPC信道spawned出来的，那么<code>process.send</code>属性为undefined。</p></blockquote><p>Note: 该方法内部使用<code>JSON.stringify()</code>来序列化<code>message</code>。</p><h2 id="process-stderr"><a href="#process-stderr" class="headerlink" title="process.stderr"></a>process.stderr</h2><p>return: &lg;Stream&gt;</p><blockquote><p>该方法返回一个连接到标准错误<code>stderr</code>(文件描述符为2)的流对象。<br>该流是一个<code>net.Socket</code>（这是一个双工流），当文件描述符<code>2</code>指向一个文件时，此时他是一个可写流。</p></blockquote><h2 id="process-stdin"><a href="#process-stdin" class="headerlink" title="process.stdin"></a>process.stdin</h2><p>return: &lg;Stream&gt;</p><blockquote><p>该方法返回一个连接到标注输入<code>stdin</code>(文件描述符为0)的流对象。<br>该流是一个<code>net.Socket</code>（这是一个双工流），当文件描述符<code>0</code>指向一个文件时，此时他是一个可读流。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">process<span class="selector-class">.stdin</span><span class="selector-class">.setEncoding</span>(<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line">process<span class="selector-class">.stdin</span><span class="selector-class">.on</span>(<span class="string">'readable'</span>, () =&gt; &#123;</div><div class="line">    const chunk = process<span class="selector-class">.stdin</span><span class="selector-class">.read</span>()    </div><div class="line"></div><div class="line">    <span class="keyword">if</span>(chunk !== null)&#123;</div><div class="line">        process<span class="selector-class">.stdout</span><span class="selector-class">.write</span>(`data: $&#123;chunk&#125;`)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">process<span class="selector-class">.stdin</span><span class="selector-class">.on</span>(<span class="string">'end'</span>, () =&gt; &#123;</div><div class="line">    process<span class="selector-class">.stdout</span><span class="selector-class">.write</span>(<span class="string">'end'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="process-stdout"><a href="#process-stdout" class="headerlink" title="process.stdout"></a>process.stdout</h2><p>return: &lt;Stream&gt;</p><blockquote><p>该方法返回一个连接到标注输出<code>stdout</code>(文件描述符为1)的流对象。<br>该流是一个<code>net.Socket</code>（这是一个双工流），当文件描述符<code>1</code>指向一个文件时，此时他是一个可写流。</p></blockquote><p>如：拷贝process.stdin到process.stdout<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">process</span>.<span class="keyword">stdin</span>.pipe(<span class="built_in">process</span>.<span class="keyword">stdout</span>)</div></pre></td></tr></table></figure></p><h3 id="关于process-I-O需要注意以下几点："><a href="#关于process-I-O需要注意以下几点：" class="headerlink" title="关于process I/O需要注意以下几点："></a>关于process I/O需要注意以下几点：</h3><blockquote><p><code>process.stdout</code>和<code>process.stderr</code>区别于Node中其他的流有以下几点：</p></blockquote><p>1, 他们分别被用于<code>console.log()</code>和<code>console.error()</code>内部<br>2, 他们不能被关闭<br>3, 他们不会触发<code>finish</code>事件<br>4, 写入有可能是同步的，取决于他们连接到哪里以及在哪个平台上：</p><ul><li>Files: 在windows和Linux平台上都是同步的</li><li>TTYs(Terminals): 在windows上异步，在Unix上同步</li><li>Pipes以及sockets: 在windows上同步，在Unix上异步</li></ul><p>之所以有这些因为，都是因为一些历史原因，但是又不能轻易的改变他们。<br><br></p><p>同步的写入可以避免一些问题，比如<code>console.log()</code>,<code>console.error()</code>, 我们知道当使用<code>process.exit()</code>会立马终止进程，如果是异步写入，那么就可能导致还没写完进程就终止了，导致数据写入不全。</p><p>Warning: ….</p><h2 id="process-uptime"><a href="#process-uptime" class="headerlink" title="process.uptime()"></a>process.uptime()</h2><p>return: &lt;number&gt;</p><blockquote><p>返回当前Node进程运行的秒数。<br>需要注意的是，这个秒数包括小数部分。</p></blockquote><h2 id="process-version"><a href="#process-version" class="headerlink" title="process.version"></a>process.version</h2><p>return: &lt;string&gt;</p><blockquote><p>返回当前Node的版本</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">process</span>.<span class="built_in">version</span><span class="comment"></span></div><div class="line">// v7.5.0</div></pre></td></tr></table></figure><h2 id="Exit-Codes-退出码"><a href="#Exit-Codes-退出码" class="headerlink" title="Exit Codes(退出码)"></a>Exit Codes(退出码)</h2><p><a href="https://nodejs.org/dist/latest-v8.x/docs/api/process.html#process_exit_codes" target="_blank" rel="external">具体参看这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Process-Events-进程事件&quot;&gt;&lt;a href=&quot;#Process-Events-进程事件&quot; class=&quot;headerlink&quot; title=&quot;Process Events(进程事件)&quot;&gt;&lt;/a&gt;Process Events(进程事件)&lt;/h2&gt;&lt;bl
      
    
    </summary>
    
      <category term="nodejs" scheme="https://xxxxxmiss.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://xxxxxmiss.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>RegExp</title>
    <link href="https://xxxxxmiss.github.io/2017/06/05/RegExp/"/>
    <id>https://xxxxxmiss.github.io/2017/06/05/RegExp/</id>
    <published>2017-06-05T03:35:04.000Z</published>
    <updated>2017-06-15T04:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Character-Classes-or-Character-Sets-字符类-字符集合"><a href="#Character-Classes-or-Character-Sets-字符类-字符集合" class="headerlink" title="Character Classes or Character Sets (字符类, 字符集合)"></a>Character Classes or Character Sets (字符类, 字符集合)</h2><blockquote><p>在正则表达式中，字符类就是用一对方括号<code>[]</code>包裹你要匹配的字符。需要注意以下几点：</p></blockquote><ul><li>一个字符类仅仅匹配一个单字符。如<code>/gr[ae]/y</code>, 只会匹配<code>gray</code>, <code>grey</code>, 不会匹配<code>graey</code>。<br><br></li><li>在字符类中，可以使用连接符<code>-</code>来表示一个范围。当然了，你可以使用多个连字符来表示多个范围。如<code>/[0-9a-fA-F]/</code>,并且字符的顺序是无关紧要的。也就是说，你可以用<code>/[0-9a-fA-F]/</code>, <code>/[a-f0-9A-F]/</code>等都可以用来表示一个16进制的单字符。<br><br></li><li>在字符类中除了 <code>\</code>, <code>^</code>, <code>-</code>外，所有的元字符都是普通的字符，不需要转义。当然了，你非要对这些元字符转义，也是没问题的，只是减少了可读性。就是说，原本一些有特殊意义的字符，用方括号包裹之后，就失去了它原本特殊的含义而变成了一个普通的字符。<br><br></li><li>还有一个比较特别的就是闭合方括号<code>]</code>。如<code>[]x]</code>, <code>[^]x]</code>等这些含有未转义的<code>]</code>正则，在不同的语言中可能会有不同的情况。以上列举的这2种情况，在javascript中是不能正常工作的。例如在ruby中，空的字符类<code>[]</code>被视为一个错误。 还有就是方括号中嵌套方括号，这时也需要注意的,如<code>/[-.*+?^${}()|[\]\/\\]/g</code>。<br><br></li><li>所以综上所述，对于字符类中的<code>]</code>, <code>\</code>, <code>^</code>, <code>-</code>，如果要把他们当做普通字符使用，最好都转义。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/[.*?+]/.test(<span class="string">'.'</span>) <span class="comment">// true</span></div><div class="line"></div><div class="line">/[.*?+]/.test(<span class="string">'a'</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure><h2 id="Negated-Character-Classes-（否定的字符类）"><a href="#Negated-Character-Classes-（否定的字符类）" class="headerlink" title="Negated Character Classes （否定的字符类）"></a>Negated Character Classes （否定的字符类）</h2><blockquote><p>表示的意思就是匹配任何不包含在这个字符类中的字符。需要注意以下几点：</p></blockquote><ul><li>我们知道，<code>/./</code>表示的是除换行符以外的任何字符（当然这里有范围的限制，此处暂不讨论），否定字符类恰好能匹配换行符，所以<code>/[^]/</code>表示的就是匹配任何字符（包括换行符）。所以如果你不想否定字符类匹配换行符，你需要在否定字符类中显示的包含换行符，如<code>/[^0-9\r\n]/</code>,匹配任何不是数字或者换行符的字符。</li></ul><p>举例验证<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// \u000A 为换行符所对应的unicode</span></div><div class="line"></div><div class="line">/./.test(<span class="string">'\u000A'</span>)  <span class="comment">// fasle</span></div><div class="line">/[^]/.test(<span class="string">'\u000A'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure></p><h2 id="Repeating-Character-Classes（重复字符类）"><a href="#Repeating-Character-Classes（重复字符类）" class="headerlink" title="Repeating Character Classes（重复字符类）"></a>Repeating Character Classes（重复字符类）</h2><blockquote><p>当你在字符类上使用<code>*</code>, <code>?</code>, <code>+</code>进行重复时，需要知道的是，你重复的是这些字符类，而不是重复字符类匹配的字符。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/[<span class="number">0</span><span class="number">-9</span>]+<span class="regexp">/ /</span><span class="regexp">/ match 837 as well as 222</span></div></pre></td></tr></table></figure><blockquote><p>如果你想重复字符类匹配的字符，可以使用<strong>反向引用</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/([<span class="number">0</span><span class="number">-9</span>])\<span class="number">1</span>+<span class="regexp">/ /</span><span class="regexp">/ match 222 but not 837</span></div></pre></td></tr></table></figure><h2 id="Shorthand-Character-Classes-字符类简写"><a href="#Shorthand-Character-Classes-字符类简写" class="headerlink" title="Shorthand Character Classes(字符类简写)"></a>Shorthand Character Classes(字符类简写)</h2><blockquote><p>因为一些特定的字符类经常被使用，所以就制定了一些特定的字符代表字符类。在不同的语言中，这些特定的字符所代表的字符不一定是完全一样的。</p></blockquote><ul><li>\w: [0-9a-zA-Z_]</li><li>\s: [ \t\r\n\f],在某些语言中还包括垂直制表符<code>\v</code></li><li>\d: [0-9]</li></ul><h2 id="Dot-or-Period-点"><a href="#Dot-or-Period-点" class="headerlink" title="Dot or Period(点)"></a>Dot or Period(点)</h2><blockquote><p>元字符<code>.</code>匹配除了换行符以外的任意一个单字符。<br>至于为什么不包含换行符是由于历史原因造成的：第一代工具使用正则表达式是基于行的。他们一行一行的读取文件，使用正则表达式分割行。由于这些工具的影响，导致了<code>.</code>元字符不包括换行符。</p></blockquote><p>NOTE: 虽然元字符<code>.</code>不包括换行符，但是在不同的语言中，实现并不相同，有些语言是可以通过一些选项来控制是否包含换行符的。但是在javascript和vbscript中，是没有任何选项来控制的。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 在js中，可以使用[<span class="symbol">\s</span><span class="symbol">\S</span>]来匹配任何字符</div><div class="line">/[<span class="symbol">\s</span><span class="symbol">\S</span>]/  // match any character, include line breaks</div></pre></td></tr></table></figure><h2 id="Line-Breaks-Character-换行符"><a href="#Line-Breaks-Character-换行符" class="headerlink" title="Line Breaks Character(换行符)"></a>Line Breaks Character(换行符)</h2><blockquote><p>换行符在不同的操作系统以及不同的语言中实现也有所不同，尽管如此，但是我们依然可以认为<code>\n</code>就是我们所说的换行符。因为在我们熟悉的脚本语言中，都只会将<code>\n</code>作为换行符，而不会将其他字符作为换行符。<br>尽管window系统中的换行符是<code>\r\n</code>,但是我们说换行符就是<code>\n</code>依然没有问题。这是因为这些脚本语言默认是处于<strong>文本模式</strong>下读写文件的。<br>当脚本运行在window系统中，在读取文件时，<code>\r\n</code>自动转换为<code>\n</code>;写文件时，<code>\n</code>自动转换为<code>\r\n</code>。</p></blockquote><h2 id="Word-Boundaries（单词边界）"><a href="#Word-Boundaries（单词边界）" class="headerlink" title="Word Boundaries（单词边界）"></a>Word Boundaries（单词边界）</h2><blockquote><p>元字符<code>\b</code>和<code>^</code>,<code>$</code>都属于锚点字符，用来匹配叫做<strong>单词边界</strong>的位置。他匹配的长度为0。<br>有3种不同的位置可以作为单词的边界：</p></blockquote><ul><li>字符串中的第一个字符的前面（第一个字符必须是单词）</li><li>字符串中的最后一个字符的后面（最后一个字符必须是单词）</li><li>字符串中两个字符之间的位置，这个两个字符必须一个是单词，一个非单词</li></ul><h2 id="Alternation（选择）"><a href="#Alternation（选择）" class="headerlink" title="Alternation（选择）"></a>Alternation（选择）</h2><blockquote><p>正则表达式中使用管道符（pipe character）<code>|</code>来对匹配模式进行选择匹配。<br>需要注意的是<strong>选择操作</strong>在正则表达式中的<strong>优先级是最低</strong>的。</p></blockquote><p>如：假设我们要匹配的是一个单词及其左右边界，正则如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\bcat|dog\b/  <span class="comment">// 能匹配catxx或者xxdog等</span></div></pre></td></tr></table></figure></p><p>解释：按照上面的写法只会匹配cat及其左边界或者dog及其右边界，如果要匹配cat或则dog及其左右边界，必须使用分组来改变其优先级。如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\b(cat|dog)\b/</div></pre></td></tr></table></figure></p><p>关于正则表达式中的“选择”，下面我们来通过例子详细的说明他们是如何工作的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animalCount = <span class="regexp">/\b\d+ (pig|cow|chicken)s?\b/</span></div><div class="line"><span class="built_in">console</span>.log(animalCount.test(<span class="string">"15 pigs"</span>))</div><div class="line"><span class="comment">// → true</span></div><div class="line"><span class="built_in">console</span>.log(animalCount.test(<span class="string">"15 pigchickens"</span>))</div><div class="line"><span class="comment">// → false</span></div></pre></td></tr></table></figure></p><img src="/2017/06/05/RegExp/re_pigchickens.svg" alt="/bd+ (pig|cow|chicken)s?b/" title="/bd+ (pig|cow|chicken)s?b/"><p>假设我们的正则表达式已经实例化成上面的图表，图表中的每个正则<code>token</code>看成一个盒子。要匹配的字符串为<code>the 3 pigs</code>。那么匹配的流程会像下面的步骤进行：</p><ul><li>在第4个位置（从0开始），有一个单词边界，因此通过了第一个盒子。<br><br></li><li>此次仍然在第4个位置（因为单词边界是不占据长度的），找到了一个数字，因此通过了第二个盒子。<br><br></li><li>在进入第5个位置时，有2个条路径，一条回到第二个盒子形成一个环路，一条直接进入第5个位置。我们要匹配的字符串的第5个位置是一个空白字符，因此直接进入第5个位置。<br><br></li><li>在进入第6个位置时(<code>pigs</code>的第一个字符)，有三条路径。但我们要匹配的字符串中并没有<code>cow</code>或者<code>chicken</code>, 有的是<code>pig</code>，因此进入<code>pig</code>这条路径。<br><br></li><li>在进入第9个位置时，又出现了2条路径，一条跳过了<code>s</code>这个盒子直接进入最终的单词边界的盒子，一条进入<code>s</code>这个盒子。要匹配的字符中含有字符<code>s</code>，因此进入到<code>s</code>这个盒子。<br><br></li><li>在第10个位置（末尾单词边界的位置），要匹配的字符串已经到达末尾（字符串的末尾算着一个单词边界）。因此通过了最后单词边界这个盒子，完成了整个的匹配。<br><br></li></ul><hr><p>综上所述, 在一个字符串中搜寻匹配的字符时，正则表达式引擎会进行如下的查找了流程：<br>从一个字符串的起始位置，一个一个字符进行匹配，直到找到了一个匹配或者达到字符串的末尾才能决定最终的匹配情况。</p><h3 id="Backtracking-回溯"><a href="#Backtracking-回溯" class="headerlink" title="Backtracking(回溯)"></a>Backtracking(回溯)</h3><blockquote><p>在正则表达式中，有一种叫做<strong>回溯查找</strong>，就是沿着某一条路径匹配多次。回溯通常出现在数量匹配中，如<code>*</code>, <code>+</code>, <code>{m, n}</code>。<br>下面以具体的图表和例子来说明匹配情况。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\b([<span class="number">01</span>]+b|\d+|[\da-f]+h)\b/.test(<span class="string">'103'</span>)</div></pre></td></tr></table></figure><img src="/2017/06/05/RegExp/re_number.svg" alt="/b([01]+b|d+|[da-f]+h)b/" title="/b([01]+b|d+|[da-f]+h)b/"><ul><li>上面的例子中，匹配器会一直在最上面的那条路径进行匹配，只有达到字符<code>3</code>，才知道进错了路径。</li><li>此时匹配器进行回溯。其实在选择匹配的时候，匹配器首先会记录当前的位置（也就是每条路径中第一个字符的位置）以便于当进入到错误的路径时可以快速返回到这个位置。</li><li>此时进入到第二条路径（从上往下），发现可以完整匹配，匹配结束。</li></ul><p>NOTE: 一旦找到一个完整匹配，匹配器会立马停止匹配。这就意味着如果多个分支可以匹配这个正则，那么返回的匹配是第一个（每个分支按在正则表达式中出现的先后顺序来排序）<br>举例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^(h|hello)(.*)$/.exec(<span class="string">"hello"</span>) <span class="comment">// ['hello', 'h', 'ello']</span></div></pre></td></tr></table></figure></p><p>下面来看一个正则表达式中类似于多次循环的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/([<span class="number">01</span>]+)+b/</div></pre></td></tr></table></figure></p><img src="/2017/06/05/RegExp/re_slow.svg" alt="/([01]+)+b/" title="/([01]+)+b/"><p>关于上面的例子中的正则表达式有什么问题，此处先不做说明。</p><h2 id="Greedy-and-non-greedy-贪婪匹配和非贪婪匹配"><a href="#Greedy-and-non-greedy-贪婪匹配和非贪婪匹配" class="headerlink" title="Greedy and non-greedy(贪婪匹配和非贪婪匹配)"></a>Greedy and non-greedy(贪婪匹配和非贪婪匹配)</h2><blockquote><p>正则引擎默认是贪婪匹配的，就是尽可能多的匹配。除非尽可能多的导致整个匹配失败，那么才会回溯到重复的位置重新开始匹配。贪婪匹配一般出现在量词中，如下：</p></blockquote><ul><li><code>?</code> &lt;=&gt; <code>{0,1}</code></li><li><code>*</code> &lt;=&gt; <code>{0,}</code></li><li><code>+</code> &lt;=&gt; <code>{1,}</code></li><li><code>{m, n}</code></li></ul><p>下面以一个具体的例子来说明贪婪匹配，<br>假设我们要匹配一个字符串中不带任何属性的html标签，你的正则可能会像下面这样：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/<span class="tag">&lt;<span class="name">.+</span>&gt;</span>/.exec('This is a <span class="tag">&lt;<span class="name">EM</span>&gt;</span>first<span class="tag">&lt;/<span class="name">EM</span>&gt;</span> test')</div><div class="line">// prints: ['<span class="tag">&lt;<span class="name">EM</span>&gt;</span>first<span class="tag">&lt;/<span class="name">EM</span>&gt;</span>']</div></pre></td></tr></table></figure></p><p>你会看到匹配的结果和我们所期盼的<code>&lt;EM&gt;</code>,<code>&lt;/EM&gt;</code>并不一样。究其原因就是因为量词<code>+</code>是贪婪的，它会让正则引擎尽可能多的匹配。其实这个匹配过程可以用上面的图表来解释更加的清楚：<br>匹配完第一个<code>.</code>所代表的字符后，进入到下一个字符会有2条路径：一条是<code>.</code>形成的环路，一条直接进入<code>&gt;</code>, 但是<code>+</code>是贪婪的，那么正则引擎会一直进入这条环路，直接匹配失败了才会退出这条路径。<br><br><br>下面是更加详细的关于正则引擎是如何匹配<code>&lt;EM&gt;first&lt;/EM&gt;</code>的：</p><blockquote><p>The first token in the regex is <code>&lt;</code>. As we already know, the first place where it will match is the first <code>&lt;</code> in the string. The next token is dot, which matches any character except newlines. The dot is repeated by the plus. The plus is greedy. Therefore, the engine will repeat the dot as many times as it can. The dot matches <code>E</code>, so the regex continues to try to match the dot with the next character. <code>M</code> is matched, and the dot is repeated once more. The next character is <code>&gt;</code>. You should see the problem by now. The dot matches the <code>&gt;</code>, and the engine continues repeating the dot. The dot will match all characters in the string. The dot fails when the engine has reached the void after the end of the string. Only at this point does the regex engine continue with next token <code>&gt;</code>.<br><br><br>So far, <code>&lt;.+</code> has matched <code>&lt;EM&gt;first&lt;/EM&gt; test</code> and the regex engine has arrived at the end of the string. <code>&gt;</code> cannot match here. The engine remembers that the plus has repeated the dot more often than is required. (Remember that the plus requires the dot to match only once.) Rather than admitting failure, the engine will backtrack. It will reduce the repetition of the plus by one, and then continue trying the remainder of the regex.<br><br><br>So the match of <code>.+</code> is reduced to <code>EM&gt;first&lt;/EM&gt;</code> tes. The next token in the regex is still <code>&gt;</code>. But now the next character in the string is the last <code>t</code>. Again, these cannot match, causing the engine to backtrack further. The total match so far is reduced to <code>&lt;EM&gt;first&lt;/EM&gt; te</code>. But <code>&gt;</code> still cannot match. So the engine continues backtracking until the match of <code>.+</code> is reduced to <code>EM&gt;first&lt;/EM. Now</code>, <code>&gt;</code> can match the next character in the string. The last token in the regex has been matched. The engine reports that <code>&lt;EM&gt;first&lt;/EM&gt;</code> has been successfully matched.</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^(.+) ((?<span class="symbol">:BBB</span> )?CCC)<span class="variable">$/</span>.exec(<span class="string">'AAA BBB CCC'</span>)</div></pre></td></tr></table></figure><h2 id="正则相关方法"><a href="#正则相关方法" class="headerlink" title="正则相关方法"></a>正则相关方法</h2><blockquote><p>操作字符串的一些常用方法，如replace, split, match, search等，这些方法的第一个参数都可以是一个正则表达式对象，也可以是一个子字符串，此处主要讲解第一个参数是正则表达式的情况。<br>RegExp的一些实例方法，如test, exec等</p></blockquote><h3 id="str-replace-regexp-substr-newSubstr-function"><a href="#str-replace-regexp-substr-newSubstr-function" class="headerlink" title="str.replace(regexp|substr, newSubstr|function)"></a>str.replace(regexp|substr, newSubstr|function)</h3><p>先来看一个例子：假设我们要匹配动态的匹配一个人的姓名，在匹配到姓名前后插入下划线，但是这个人的姓名很特殊（含有一些特殊的符号）。所以我们可以按照下面的做法来处理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'dea+hl[]rd'</span></div><div class="line"><span class="keyword">var</span> text = <span class="string">'This dea+hl[]rd guy is super annoying.'</span></div><div class="line"><span class="comment">// 匹配除了单词和空白以外的任何字符</span></div><div class="line"><span class="comment">// 不能对任何字符进行转义，以为\n,\b这些字符也是有特殊意义的</span></div><div class="line"><span class="keyword">var</span> escaped = name.replace(<span class="regexp">/[^\w\s]/g</span>, <span class="string">"\\$&amp;"</span>)</div><div class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b("</span> + escaped + <span class="string">")\\b"</span>, <span class="string">"gi"</span>);</div><div class="line"><span class="built_in">console</span>.log(text.replace(regexp, <span class="string">"_$1_"</span>));</div><div class="line"><span class="comment">// → This _dea+hl[]rd_ guy is super annoying.</span></div></pre></td></tr></table></figure></p><p>第二个参数<code>newSubstr</code>可以使用下面的这些特殊的变量名。</p><table><thead><tr><th>变量名</th><th>代表的值</th></tr></thead><tbody><tr><td>$$</td><td>插入一个$</td></tr><tr><td>$&amp;</td><td>插入匹配的子串</td></tr><tr><td>$`</td><td>插入当前匹配的子串的左边的内容</td></tr><tr><td>$’</td><td>插入当前匹配的子串的右边的内容</td></tr><tr><td>$n</td><td>假如repalce方法的第一个参数是一个RegExp对象，并且n是小于100的从1开始的整数，那么插入第n个捕获性分组</td></tr></tbody></table><p>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dea+hl[]rd"</span>.replace(<span class="regexp">/[^\w\s]/g</span>, <span class="string">"\\$`"</span>)</div><div class="line"><span class="comment">// prints: "dea\deahl\dea+hl\dea+hl[rd"</span></div></pre></td></tr></table></figure></p><p>第二个参数可以是一个函数，在这种情况下，当匹配执行后， 该函数就会执行。 函数的返回值作为替换字符串。 (注意:  上面提到的特殊替换参数在这里不能被使用。) 另外要注意的是， 如果第一个参数是正则表达式， 并且其为全局匹配模式， 那么这个方法将被多次调用， 每次匹配都会被调用。</p><table><thead><tr><th>变量名</th><th>代表的值</th></tr></thead><tbody><tr><td>match</td><td>匹配的子串。（对应于上述的$&amp;。）</td></tr><tr><td>p1, p2, …</td><td>假如replace()方法的第一个参数是一个RegExp 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。）</td></tr><tr><td>offset</td><td>匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串时“bc”，那么这个参数将是1）</td></tr><tr><td>string</td><td>被匹配的原字符串</td></tr></tbody></table><p>NOTE: 精确的参数个数依赖于replace()的第一个参数是否是一个正则表达式对象， 以及这个正则表达式中指定了多少个括号子串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">match, p1, p2, p3, offset, string</span>) </span>&#123;</div><div class="line">  <span class="comment">// p1 is nondigits, p2 digits, and p3 non-alphanumerics</span></div><div class="line">  <span class="keyword">return</span> [p1, p2, p3].join(<span class="string">' - '</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> newString = <span class="string">'abc12345#$*%'</span>.replace(<span class="regexp">/([^\d]*)(\d*)([^\w]*)/</span>, replacer)</div><div class="line"><span class="comment">// prints: 'abc - 12345 - #$*%'</span></div></pre></td></tr></table></figure><p>该方法的详细用法可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="external">参考这里</a></p><h3 id="str-search-regexp"><a href="#str-search-regexp" class="headerlink" title="str.search(regexp)"></a>str.search(regexp)</h3><blockquote><p>我们知道，字符串有个<code>indexOf</code>方法，但是它不能使用正则表达式作为参数，而search方法就需要一个正则表达式作为参数。和indexOf方法一样，它返回第一个匹配字符串的索引；没有找到任何匹配，返回-1。</p></blockquote><p>NOTE: indexOf方法可以传入第二个参数作为搜索的起始偏移量，而search却不能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"  word"</span>.search(<span class="regexp">/\S/</span>));</div><div class="line"><span class="comment">// → 2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"    "</span>.search(<span class="regexp">/\S/</span>));</div><div class="line"><span class="comment">// → -1</span></div></pre></td></tr></table></figure><h3 id="str-split-separator-limit"><a href="#str-split-separator-limit" class="headerlink" title="str.split([separator, [limit]])"></a>str.split([separator, [limit]])</h3><blockquote><p>分割一个字符串，返回分割后的字符串组成的数组。</p></blockquote><ul><li>如果忽略了separator或者在str中没有找到separator, 那么返回的是整个字符串组成的一个元素的数组。</li><li>如果separator是长度为0的字符串，那么返回的是str中每个字符组成的数组。</li><li>只有在str长度为0, separator长度也为0的时候，才会返回一个空数组。</li><li>支持第二个参数limit, 代表切割后返回的数组的长度。如<code>limit=3</code>，表示需要切割3次（形成4个子串），返回前3个元素组成的数组。</li></ul><p>当separator是一个正则时，需要注意：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'abc2d3f'</span>.split(<span class="regexp">/\d/</span>) <span class="comment">// ["abc", "d", "f"]</span></div><div class="line"></div><div class="line"><span class="string">'abc2d3f'</span>.split(<span class="regexp">/(\d)/</span>) <span class="comment">// ["abc", "2", "d", "3", "f"]</span></div></pre></td></tr></table></figure><blockquote><p>由上面的例子可以看出，当split方法第一个参数为正则时，如果这个正则包含捕获性分组时，这个分组匹配的子串是不会被移除的，而是会被包含到返回的数组中。</p></blockquote><h3 id="str-match-regexp"><a href="#str-match-regexp" class="headerlink" title="str.match(regexp)"></a>str.match(regexp)</h3><blockquote><p>一个正则表达式对象。如果传入一个非正则表达式对象，则会隐式地使用 new RegExp(obj) 将其转换为一个 RegExp 。如果你未提供任何参数，直接使用 match() ，那么你会得到一个包含空字符串的 Array ：[“”]</p></blockquote><p>NOTE:<br>如果使用的正则不包含全局修饰符<code>g</code>, 那么返回的数组会有额外的2个属性, 并且包好捕获性分组：</p><ul><li>input: 包含被解析的原始字符串</li><li>index: 该属性表示匹配结果在原字符串中的索引（以0开始）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'bac12d3'</span>.match(<span class="regexp">/[a-z]+(\d)*/</span>)</div><div class="line"><span class="comment">// prints: ["bac12", "2", index: 0, input: "bac12d3"]</span></div></pre></td></tr></table></figure><p>此时它和正则对象的<code>exec</code>方法返回值是一样的:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/[a-z]+(\d)*/.exec('bac12d3')</div><div class="line">// prints: ["bac12", "2", index: 0, input: "bac12d3"]</div></pre></td></tr></table></figure></p><p>如果使用的正则包含修饰符<code>g</code>, 那么返回的数组只包含所有的子匹配，并不包含额外的属性以及捕获性分组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'bac12d3'</span>.match(<span class="regexp">/[a-z]+(\d)*/g</span>)</div><div class="line"><span class="comment">// prints: ["bac12", "d3"]</span></div></pre></td></tr></table></figure><p>不管是哪种情况，没有找到任何匹配，那么返回<code>null</code>。</p><p>该方法的详细用法可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="external">参考这里</a></p><h3 id="regex-exec"><a href="#regex-exec" class="headerlink" title="regex.exec"></a>regex.exec</h3><blockquote><p>我们知道，字符串的indexOf方法提供了起始搜索偏移量这个参数，可以更加高效的执行字符串查找。但是字符串的一些有关正则方法并没有直接提供这样的方式。正则对象虽然也没有直接提供这样的快捷方式，但是正则对象的exec方法提供了一种”不是很方便”的方式来让我们做这样一个操作, 那就是通过<code>lastIndex</code>这个正则属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re = <span class="regexp">/quick\s(brown).+?(jumps)/ig</span></div><div class="line"><span class="keyword">var</span> result = re.exec(<span class="string">'The Quick Brown Fox Jumps Over The Lazy Dog'</span>)</div><div class="line"><span class="comment">// prints: ["Quick Brown Fox Jumps", "Brown", "Jumps", index: 4, input: "The Quick Brown Fox Jumps Over The Lazy Dog"]</span></div></pre></td></tr></table></figure><p>关于上面的脚本中的<code>re</code>,<code>result</code>对象相关属性说明如下：</p><table><br>    <thead><br>        <tr><br>            <th width="10%" align="center">对象</th><br>            <th width="10%" align="center">属性/索引</th><br>            <th width="40%" align="center">描述</th><br>            <th width="40%" align="center">例子</th><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>            <td rowspan="4">result</td><br>            <td>[0]</td><br>            <td>完全匹配</td><br>            <td>Quick Brown Fox Jumps</td><br>        </tr><br>        <tr><br>            <td>[1], …[n]</td><br>            <td>捕获性分组</td><br>            <td>[1] = Brown<br>[2] = Jumps</td><br>        </tr><br>        <tr><br>            <td>index</td><br>            <td>完整的匹配在整个字符串中的索引</td><br>            <td>4</td><br>        </tr><br>        <tr><br>            <td>input</td><br>            <td>要匹配的原始字符串</td><br>            <td>The Quick Brown Fox Jumps Over The Lazy Dog</td><br>        </tr><br>        <tr><br>            <td rowspan="5">re</td><br>            <td>lastIndex</td><br>            <td>执行下一次搜索时起始的位置</td><br>            <td>25</td><br>        </tr><br>        <tr><br>            <td>ignoreCase</td><br>            <td>表示是否使用了i标记</td><br>            <td>true</td><br>        </tr><br>        <tr><br>            <td>global</td><br>            <td>表示是否使用了g标记</td><br>            <td>true</td><br>        </tr><br>        <tr><br>            <td>multiline</td><br>            <td>表示是否使用了m标记</td><br>            <td>false</td><br>        </tr><br>        <tr><br>            <td>source</td><br>            <td>匹配模式的字符串文本</td><br>            <td>quick\s(brown).+?(jumps)</td><br>        </tr><br>    </tbody><br></table><blockquote><p>下面就关于上表中的相关注意事项做下说明： 我们知道，正则引擎是eager(急切的，渴望的)的，也就是说当从整个字符串中找到一个匹配时，会立马停止继续查找，并返回找到的子串。<br>像字符串的<code>match</code>, <code>replace</code>方法，当第一个参数为正则对象时，可以传入修饰符<code>g</code>来进行全局的查找，也就说找到从一行字符中找到所有的匹配，直到查找到这行字符串的尽头。<br>但是正则对象的exec方法却并不是这样的，即使你传入全局标记<code>g</code>,依然只是返回第一个匹配。我们测试下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/(\d)/g.exec(<span class="string">'ab12c45'</span>)</div><div class="line"><span class="comment">// prints: ["1", "1", index: 2, input: "ab12c45"]</span></div></pre></td></tr></table></figure><p>经过上面例子的验证，我们看到确实如我们所言：尽管是全局匹配，但是依然只是返回了第一个匹配。<br>还有就是需要注意exec方法和match方法的对比：</p><ul><li>exec方法使用了全局标记<code>g</code>,它虽然只返回了第一个匹配，但是它返回的信息非常全面，包含<code>index</code>,<code>innput</code>属性以及捕获性分组。</li><li>match方法不使用全局标记<code>g</code>时，返回的信心包含<code>index</code>,<code>input</code>属性以及捕获性分组。</li><li>match方法使用了全局标记<code>g</code>, 返回的信息只包含所有匹配的子串。<br><br><br>既然exec方法有没有全局标记<code>g</code>，返回的信息都一样，那么全局<code>g</code>有什么用？</li></ul><h3 id="正则对象的lastIndex属性"><a href="#正则对象的lastIndex属性" class="headerlink" title="正则对象的lastIndex属性"></a>正则对象的lastIndex属性</h3><blockquote><p>一当一个正则对象或者正则字面量开启了全局标记<code>g</code>，那么配合正则对象的<code>lastIndex</code>属性，我们就可以指定下次搜索时，从什么位置开始搜索。并且通过循环判断exec方法来的返回值对字符串进行一个全局的匹配。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span></div><div class="line"><span class="built_in">console</span>.log(reg.lastIndex) <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(reg.exec(<span class="string">'abc12d3bb4'</span>)) <span class="comment">// ["12", index: 3, input: "abc12d3bb4"]</span></div><div class="line"><span class="built_in">console</span>.log(reg.lastIndex) <span class="comment">// 5</span></div></pre></td></tr></table></figure><blockquote><p>默认情况下正则对象的<code>lastIndex</code>值是0，表示起始偏移量。<br>一旦成功的找到一个匹配后，正则引擎会自动更新<code>lastIndex</code>的值，表示下一次匹配时默认从这个地方开始。<br>什么从一开始就没有找到任何匹配，那么<code>lastIndex</code>的值还是0。</p></blockquote><p>当然了，你可以设置<code>lastIndex</code>的值，表示一开始就从你设置的这个位置开始查找：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span></div><div class="line">reg.lastIndex = <span class="number">5</span></div><div class="line"><span class="built_in">console</span>.log(reg.exec(<span class="string">'abc12d3bb4'</span>)) <span class="comment">// ["3", index: 6, input: "abc12d3bb4"]</span></div><div class="line"><span class="built_in">console</span>.log(reg.lastIndex) <span class="comment">// 7</span></div></pre></td></tr></table></figure><p>使用exec方法找到所有匹配，一般这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span></div><div class="line"><span class="keyword">var</span> match = <span class="literal">null</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'abc12d3bb4'</span></div><div class="line"><span class="keyword">while</span>(match = reg.exec(str))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'$&amp;: '</span>, match[<span class="number">0</span>])</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'lastIndex: '</span>, reg.lastIndex)</div><div class="line">&#125;</div><div class="line"><span class="comment">// prints: </span></div><div class="line"><span class="comment">// $&amp;:  12</span></div><div class="line"><span class="comment">// lastIndex:  5</span></div><div class="line"><span class="comment">// $&amp;:  3</span></div><div class="line"><span class="comment">// lastIndex:  7</span></div><div class="line"><span class="comment">// $&amp;:  4</span></div><div class="line"><span class="comment">// lastIndex:  10</span></div></pre></td></tr></table></figure></p><h2 id="字符串相关方法-VS-正则对象的相关方法"><a href="#字符串相关方法-VS-正则对象的相关方法" class="headerlink" title="字符串相关方法 VS 正则对象的相关方法"></a>字符串相关方法 VS 正则对象的相关方法</h2><blockquote><p>// TODO …</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Character-Classes-or-Character-Sets-字符类-字符集合&quot;&gt;&lt;a href=&quot;#Character-Classes-or-Character-Sets-字符类-字符集合&quot; class=&quot;headerlink&quot; title=&quot;Char
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>词法作用域VS动态作用</title>
    <link href="https://xxxxxmiss.github.io/2017/05/28/js-scope/"/>
    <id>https://xxxxxmiss.github.io/2017/05/28/js-scope/</id>
    <published>2017-05-28T15:54:27.000Z</published>
    <updated>2017-07-16T05:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="词法作用域-lexical-scoping"><a href="#词法作用域-lexical-scoping" class="headerlink" title="词法作用域(lexical scoping)"></a>词法作用域(lexical scoping)</h2><blockquote><p>js中有2种作用域，词法作用域和动态作用域。下面用例子来解释这2种作用域的概念。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> outerFunction  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">      <span class="keyword">var</span> x = <span class="number">5</span>;</div><div class="line">      <span class="comment">//console.log(y); //line 1, ReferenceError: y not defined</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">var</span> nestedFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">         <span class="keyword">var</span> y = <span class="number">7</span>;</div><div class="line">         <span class="built_in">console</span>.log(x); <span class="comment">//line 2, x will still be known prints 5</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">         <span class="built_in">console</span>.log(y); <span class="comment">//line 3, prints 7</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> nestedFunction;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myFunction = outerFunction();</div><div class="line">myFunction();</div></pre></td></tr></table></figure><p>在上面的例子中，变量<code>x</code>可以在<code>outerFunction</code>中各个地方访问，变量<code>y</code>可以在<code>nestedFunction</code>中各个地方访问，但是变量<code>x</code>,<code>y</code>不能在他们所在的函数的外部访问。这种行为可以通过<strong>词法作用域</strong>来解释：</p><blockquote><p>词法作用域：变量的作用域是由他们被定义时处在源代码中的位置决定。为了去解析这些变量，js从最内层作用域向外层作用域查找，直到查找到该变量为止。</p></blockquote><p>再来看一个典型的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// 2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">3</span></div><div class="line">  foo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">2</span></div><div class="line">bar()</div></pre></td></tr></table></figure></p><blockquote><p>这个例子中，会输出2。我们按照词法作用来分析下：首先foo在自己的作用域中寻找变量a, 没有找到，那么到父级作用域中查找，本例子中foo的父级作用域就是全局作用域。因为foo函数定义时处在全局环境中有个变量a，所以在bar函数中调用foo时，会输出2。如果寻找到顶级作用域都没有找到变量a, 那么就抛出一个<code>Uncaught ReferenceError: a is not defined</code><br>如果按照动态作用域来分析：foo执行时所在的作用域是bar函数的作用域，那么此时输出的就是3了。</p></blockquote><p>词法作用域很清晰明了，但是动态作用域就不是这么清晰明了了，动态作用域是由运行时的环境决定的。为了说明说明什么叫动态作用域，先来看什么叫闭包。</p><h2 id="闭包-closures"><a href="#闭包-closures" class="headerlink" title="闭包(closures)"></a>闭包(closures)</h2><p>我们看上面的例子，事实上对于为什么在<code>nestedFunction</code>中可以访问变量<code>x</code>依然是模糊的。因为我们知道：通常一个函数中的本地变量，会随着函数的执行完毕而销毁。那么我们调用函数<code>outerFunction</code>并将它的返回值赋值给<code>myFunction</code>, 为什么<code>outerFunction</code>函数已经执行完毕而变量<code>x</code>依然存在？</p><p>MDN上对闭包的定义如下:</p><blockquote><p>A closure is a special kind of object that combines two things: a function, and the environment in which that function was created. The environment consists of any local variables that were in-scope at the time that the closure was created.<br>意思就是：<br>闭包是一种特殊的函数，该函数可以记住当时创建时的环境。</p></blockquote><p>那上面的例子来解释就是：<code>nestedFunction</code>被创建时，是在<code>outerFunction</code>作用域中，该作用域中有变量<code>x</code>, 那么当<code>outerFunction</code>函数执行完毕时，返回的<code>nestedFunction</code>是可以记住变量<code>x</code>的。换句话说，就是原本随函数执行完毕而销毁的变量，因为有别人对他的引用，因此当函数执行完毕时该变量并不会被销毁。</p><h2 id="函数的执行上下文-this，动态作用域"><a href="#函数的执行上下文-this，动态作用域" class="headerlink" title="函数的执行上下文(this，动态作用域)"></a>函数的执行上下文(this，动态作用域)</h2><blockquote><p>上面对于闭包的解释，一种可以记住当时被创建时的环境，这个环境主要是指各种本地变量。但是一种特殊的变量<code>this</code>，他的行为和普通变量完全不同，看下面的例子：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cat = &#123;</div><div class="line"> </div><div class="line">   <span class="attr">name</span>: <span class="string">"Gus"</span>,</div><div class="line">   <span class="attr">color</span>: <span class="string">"gray"</span>,</div><div class="line">   <span class="attr">age</span>: <span class="number">15</span>,</div><div class="line"> </div><div class="line">   <span class="attr">printInfo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Name:"</span>, <span class="keyword">this</span>.name, <span class="string">"Color:"</span>, <span class="keyword">this</span>.color, <span class="string">"Age:"</span>, <span class="keyword">this</span>.age); <span class="comment">//line 1, prints correctly</span></div><div class="line"> </div><div class="line">      nestedFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">"Name:"</span>, <span class="keyword">this</span>.name, <span class="string">"Color:"</span>, <span class="keyword">this</span>.color, <span class="string">"Age:"</span>, <span class="keyword">this</span>.age); <span class="comment">//line 2, loses cat scope</span></div><div class="line">      &#125;</div><div class="line"> </div><div class="line">      nestedFunction();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">cat.printInfo(); <span class="comment">//prints Name: '' Color: undefined Age: undefined</span></div></pre></td></tr></table></figure><blockquote><p>上面的例子，第一处的<code>console</code>语句能正常的输出,但是对于<code>nestedFunction</code>中的输出语句，却未能按照预期输出。</p></blockquote><p>对于第二个<code>console</code>输出，当一个函数处在另一个函数的内部时，js会丢失<code>this</code>作用域，一旦丢失，默认情况下<code>this</code>会指向全局的<code>window</code>对象。所以上面的例子，<code>nestedFunction</code>中的<code>this.color</code>和<code>this.age</code>输出<code>undefined</code>, 而<code>this.name</code>会输出空字符串, 是因为<code>window</code>对象默认有个<code>name</code>属性，默认值就是空。</p><p>关于window对象的<code>name</code>属性，可以参看<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/name" target="_blank" rel="external">这里</a></p><h2 id="控制上下文-context"><a href="#控制上下文-context" class="headerlink" title="控制上下文(context)"></a>控制上下文(context)</h2><blockquote><p>我们无法改变词法作用域在js中的工作机制，但是我们可以改变一个函数的执行问下文。<br><strong>js中的上下文是由函数运行时决定的，并且他总是被绑定到调用该函数的对象上</strong>,但是唯一不适用这条规则的就是上面出现的函数嵌套的情况。</p></blockquote><p>换句话说，改变上下文就是改变<code>this</code>的指向。看个简单的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">   <span class="attr">printThis</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> func1 = obj1.printThis;</div><div class="line">obj1.printThis(); <span class="comment">//line 1</span></div><div class="line">func1(); <span class="comment">//line 2</span></div></pre></td></tr></table></figure></p><p>line1会输出<code>ojb1</code>, line2会输出<code>window</code>。</p><h2 id="Call-Bind-Apply"><a href="#Call-Bind-Apply" class="headerlink" title="Call, Bind, Apply"></a>Call, Bind, Apply</h2><blockquote><p>我们可以有多种方式来控制<code>this</code>的指向，常见的有以下几种：</p></blockquote><ul><li>存储<code>this</code>的引用到另外一个变量</li><li>call()</li><li>apply()</li><li>bind()</li></ul><p>存储<code>this</code>的引用到另外一个变量:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cat = &#123;</div><div class="line">   <span class="attr">name</span>: <span class="string">"Gus"</span>,</div><div class="line">   <span class="attr">color</span>: <span class="string">"gray"</span>,</div><div class="line">   <span class="attr">age</span>: <span class="number">15</span>,</div><div class="line"> </div><div class="line">   <span class="attr">printInfo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Name:"</span>, <span class="keyword">this</span>.name, <span class="string">"Color:"</span>, <span class="keyword">this</span>.color, <span class="string">"Age:"</span>, <span class="keyword">this</span>.age); <span class="comment">//prints correctly</span></div><div class="line"> </div><div class="line">      nestedFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">"Name:"</span>, that.name, <span class="string">"Color:"</span>, that.color, <span class="string">"Age:"</span>, that.age); <span class="comment">//prints correctly</span></div><div class="line">      &#125;</div><div class="line">   nestedFunction();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">cat.printInfo();</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cat = &#123;</div><div class="line">   <span class="attr">name</span>: <span class="string">"Gus"</span>,</div><div class="line">   <span class="attr">color</span>: <span class="string">"gray"</span>,</div><div class="line">   <span class="attr">age</span>: <span class="number">15</span>,</div><div class="line"></div><div class="line">   <span class="attr">printInfo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Name:"</span>, <span class="keyword">this</span>.name, <span class="string">"Color:"</span>, <span class="keyword">this</span>.color, <span class="string">"Age:"</span>, <span class="keyword">this</span>.age);</div><div class="line">      nestedFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">"Name:"</span>, <span class="keyword">this</span>.name, <span class="string">"Color:"</span>, <span class="keyword">this</span>.color, <span class="string">"Age:"</span>, <span class="keyword">this</span>.age);</div><div class="line">      &#125;</div><div class="line">      nestedFunction.call(<span class="keyword">this</span>);</div><div class="line">      nestedFunction.apply(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">      <span class="keyword">var</span> storeFunction = nestedFunction.bind(<span class="keyword">this</span>);</div><div class="line">      storeFunction();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">cat.printInfo();</div></pre></td></tr></table></figure><p>关于<code>call</code>, <code>apply</code>, <code>bind</code>详细使用方法，这里不讲解了。<br>这里说下他们三者的区别：</p><ul><li>call, apply, 主要的不同就是传递额外参数的方式不同。call传递一个以逗号分割的列表，bind也是用这样的方式传递额外参数。apply需要传递的是一个数组。</li><li>相对于call, apply，bind的使用要更加的灵巧一些：因为bind不但可以改变<code>this</code>的指向，而且他会返回一个新的函数，那么我们可以将这个新函数保存到另外一个变量中，在需要使用的地方再调用。<br>但是call和apply会立即调用函数，返回函数的结果。</li></ul><h2 id="关于setTimeout中的this"><a href="#关于setTimeout中的this" class="headerlink" title="关于setTimeout中的this"></a>关于setTimeout中的this</h2><blockquote><p>我们知道，可以使用call, apply, 来改变函数的执行上下文，那么他们是否也适用于setTimeout呢？</p></blockquote><p>看例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">myArray = [<span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>];</div><div class="line">myArray.myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">sProperty</span>) </span>&#123;</div><div class="line">    alert(<span class="built_in">arguments</span>.length &gt; <span class="number">0</span> ? <span class="keyword">this</span>[sProperty] : <span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">myArray.myMethod(); <span class="comment">// prints "zero,one,two"</span></div><div class="line">myArray.myMethod(<span class="number">1</span>); <span class="comment">// prints "one"</span></div><div class="line">setTimeout(myArray.myMethod, <span class="number">1000</span>); <span class="comment">// prints "[object Window]" after 1 second</span></div><div class="line">setTimeout(myArray.myMethod, <span class="number">1500</span>, <span class="string">"1"</span>); <span class="comment">// prints "undefined" after 1,5 seconds</span></div><div class="line"></div><div class="line"><span class="comment">// let's try to pass the 'this' object</span></div><div class="line">setTimeout.call(myArray, myArray.myMethod, <span class="number">2000</span>); <span class="comment">// Uncaught TypeError: Illegal invocation</span></div><div class="line">setTimeout.call(myArray, myArray.myMethod, <span class="number">2500</span>, <span class="number">2</span>); <span class="comment">// same error</span></div></pre></td></tr></table></figure></p><p>我们知道，正常情况下setTimeout/setInterval中的<code>this</code>是指向<code>window</code>对象的，我们还知道<code>call</code>方法可以改变<code>this</code>的指向，但是上面的例子中，使用setTimeout.call抛出错误。至于为什么这样，目前还不知道。。。？</p><p>一种解决setTimeout中<code>this</code>指向不正确的方案就是重写原生的setTimeout,如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> __nativeST__ = <span class="built_in">window</span>.setTimeout</div><div class="line"><span class="built_in">window</span>.setTimeout = <span class="function"><span class="keyword">function</span>(<span class="params">callback, delay</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>, args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> __nativeST__(callback <span class="keyword">instanceof</span> <span class="built_in">Function</span> ? <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            callback.apply(self, args)</div><div class="line">        &#125; : callback, delay)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>经过上面的处理之后，此时再来调用发现就正确了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">myArray = [<span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>];</div><div class="line">myArray.myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">sProperty</span>) </span>&#123;</div><div class="line">    alert(<span class="built_in">arguments</span>.length &gt; <span class="number">0</span> ? <span class="keyword">this</span>[sProperty] : <span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">setTimeout(alert, <span class="number">1500</span>, <span class="string">"Hello world!"</span>); <span class="comment">// the standard use of setTimeout and setInterval is preserved, but...</span></div><div class="line">setTimeout.call(myArray, myArray.myMethod, <span class="number">2000</span>); <span class="comment">// prints "zero,one,two" after 2 seconds</span></div><div class="line">setTimeout.call(myArray, myArray.myMethod, <span class="number">2500</span>, <span class="number">2</span>); <span class="comment">// prints "two" after 2,5 seconds</span></div></pre></td></tr></table></figure></p><p><a href="https://spin.atomicobject.com/2014/10/20/javascript-scope-closures/" target="_blank" rel="external">参考文章链接</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout" target="_blank" rel="external">参考文章链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;词法作用域-lexical-scoping&quot;&gt;&lt;a href=&quot;#词法作用域-lexical-scoping&quot; class=&quot;headerlink&quot; title=&quot;词法作用域(lexical scoping)&quot;&gt;&lt;/a&gt;词法作用域(lexical scoping)
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue-src-overview</title>
    <link href="https://xxxxxmiss.github.io/2017/05/28/vue-src-overview/"/>
    <id>https://xxxxxmiss.github.io/2017/05/28/vue-src-overview/</id>
    <published>2017-05-28T11:12:10.000Z</published>
    <updated>2017-08-15T08:36:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码目录总览"><a href="#源码目录总览" class="headerlink" title="源码目录总览"></a>源码目录总览</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line">├── src</div><div class="line">│   ├── compiler</div><div class="line">│   │   ├── codegen</div><div class="line">│   │   │   ├── events.<span class="keyword">js</span></div><div class="line">│   │   │   └── index.<span class="keyword">js</span></div><div class="line">│   │   ├── <span class="keyword">directives</span></div><div class="line">│   │   │   ├── <span class="keyword">bind.js</span></div><div class="line">│   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   └── model.<span class="keyword">js</span></div><div class="line">│   │   ├── error-detector.<span class="keyword">js</span></div><div class="line">│   │   ├── helpers.<span class="keyword">js</span></div><div class="line">│   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   ├── optimizer.<span class="keyword">js</span></div><div class="line">│   │   └── parser</div><div class="line">│   │       ├── entity-decoder.<span class="keyword">js</span></div><div class="line">│   │       ├── filter-parser.<span class="keyword">js</span></div><div class="line">│   │       ├── html-parser.<span class="keyword">js</span></div><div class="line">│   │       ├── index.<span class="keyword">js</span></div><div class="line">│   │       └── text-parser.<span class="keyword">js</span></div><div class="line">│   ├── core</div><div class="line">│   │   ├── components</div><div class="line">│   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   └── keep-alive.<span class="keyword">js</span></div><div class="line">│   │   ├── <span class="built_in">config</span>.<span class="keyword">js</span></div><div class="line">│   │   ├── global-api</div><div class="line">│   │   │   ├── assets.<span class="keyword">js</span></div><div class="line">│   │   │   ├── <span class="keyword">extend.js</span></div><div class="line">│   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   ├── mixin.<span class="keyword">js</span></div><div class="line">│   │   │   └── use.<span class="keyword">js</span></div><div class="line">│   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   ├── <span class="keyword">instance</span></div><div class="line">│   │   │   ├── events.<span class="keyword">js</span></div><div class="line">│   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   ├── init.<span class="keyword">js</span></div><div class="line">│   │   │   ├── inject.<span class="keyword">js</span></div><div class="line">│   │   │   ├── lifecycle.<span class="keyword">js</span></div><div class="line">│   │   │   ├── proxy.<span class="keyword">js</span></div><div class="line">│   │   │   ├── render-helpers</div><div class="line">│   │   │   │   ├── <span class="keyword">bind-object-props.js</span></div><div class="line">│   │   │   │   ├── check-keycodes.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── render-list.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── render-slot.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── render-static.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── resolve-filter.<span class="keyword">js</span></div><div class="line">│   │   │   │   └── resolve-slots.<span class="keyword">js</span></div><div class="line">│   │   │   ├── render.<span class="keyword">js</span></div><div class="line">│   │   │   └── state.<span class="keyword">js</span></div><div class="line">│   │   ├── observer</div><div class="line">│   │   │   ├── array.<span class="keyword">js</span></div><div class="line">│   │   │   ├── dep.<span class="keyword">js</span></div><div class="line">│   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   ├── <span class="keyword">scheduler.js</span></div><div class="line">│   │   │   └── watcher.<span class="keyword">js</span></div><div class="line">│   │   ├── util</div><div class="line">│   │   │   ├── <span class="built_in">debug</span>.<span class="keyword">js</span></div><div class="line">│   │   │   ├── env.<span class="keyword">js</span></div><div class="line">│   │   │   ├── error.<span class="keyword">js</span></div><div class="line">│   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   ├── lang.<span class="keyword">js</span></div><div class="line">│   │   │   ├── options.<span class="keyword">js</span></div><div class="line">│   │   │   ├── perf.<span class="keyword">js</span></div><div class="line">│   │   │   └── props.<span class="keyword">js</span></div><div class="line">│   │   └── vdom</div><div class="line">│   │       ├── create-component.<span class="keyword">js</span></div><div class="line">│   │       ├── create-element.<span class="keyword">js</span></div><div class="line">│   │       ├── helpers</div><div class="line">│   │       │   ├── index.<span class="keyword">js</span></div><div class="line">│   │       │   ├── merge-hook.<span class="keyword">js</span></div><div class="line">│   │       │   ├── <span class="keyword">normalize-children.js</span></div><div class="line">│   │       │   └── update-listeners.<span class="keyword">js</span></div><div class="line">│   │       ├── modules</div><div class="line">│   │       │   ├── <span class="keyword">directives.js</span></div><div class="line">│   │       │   ├── index.<span class="keyword">js</span></div><div class="line">│   │       │   └── ref.<span class="keyword">js</span></div><div class="line">│   │       ├── patch.<span class="keyword">js</span></div><div class="line">│   │       └── vnode.<span class="keyword">js</span></div><div class="line">│   ├── entries</div><div class="line">│   │   ├── web-compiler.<span class="keyword">js</span></div><div class="line">│   │   ├── web-runtime-with-compiler.<span class="keyword">js</span></div><div class="line">│   │   ├── web-runtime.<span class="keyword">js</span></div><div class="line">│   │   ├── web-server-renderer.<span class="keyword">js</span></div><div class="line">│   │   ├── weex-compiler.<span class="keyword">js</span></div><div class="line">│   │   ├── weex-factory.<span class="keyword">js</span></div><div class="line">│   │   └── weex-framework.<span class="keyword">js</span></div><div class="line">│   ├── platforms</div><div class="line">│   │   ├── web</div><div class="line">│   │   │   ├── compiler</div><div class="line">│   │   │   │   ├── <span class="keyword">directives</span></div><div class="line">│   │   │   │   │   ├── html.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── model.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   └── text.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── modules</div><div class="line">│   │   │   │   │   ├── class.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   └── style.<span class="keyword">js</span></div><div class="line">│   │   │   │   └── util.<span class="keyword">js</span></div><div class="line">│   │   │   ├── runtime</div><div class="line">│   │   │   │   ├── class-util.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── components</div><div class="line">│   │   │   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── transition-group.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   └── transition.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── <span class="keyword">directives</span></div><div class="line">│   │   │   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── model.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   └── <span class="keyword">show.js</span></div><div class="line">│   │   │   │   ├── modules</div><div class="line">│   │   │   │   │   ├── attrs.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── class.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── dom-props.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── events.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── style.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   └── transition.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── node-ops.<span class="keyword">js</span></div><div class="line">│   │   │   │   ├── patch.<span class="keyword">js</span></div><div class="line">│   │   │   │   └── transition-util.<span class="keyword">js</span></div><div class="line">│   │   │   ├── server</div><div class="line">│   │   │   │   ├── <span class="keyword">directives</span></div><div class="line">│   │   │   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   └── <span class="keyword">show.js</span></div><div class="line">│   │   │   │   ├── modules</div><div class="line">│   │   │   │   │   ├── attrs.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── class.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── dom-props.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │   │   │   │   └── style.<span class="keyword">js</span></div><div class="line">│   │   │   │   └── util.<span class="keyword">js</span></div><div class="line">│   │   │   └── util</div><div class="line">│   │   │       ├── attrs.<span class="keyword">js</span></div><div class="line">│   │   │       ├── class.<span class="keyword">js</span></div><div class="line">│   │   │       ├── compat.<span class="keyword">js</span></div><div class="line">│   │   │       ├── element.<span class="keyword">js</span></div><div class="line">│   │   │       ├── index.<span class="keyword">js</span></div><div class="line">│   │   │       └── style.<span class="keyword">js</span></div><div class="line">│   │   └── weex</div><div class="line">│   │       ├── compiler</div><div class="line">│   │       │   ├── <span class="keyword">directives</span></div><div class="line">│   │       │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │       │   │   └── model.<span class="keyword">js</span></div><div class="line">│   │       │   ├── index.<span class="keyword">js</span></div><div class="line">│   │       │   └── modules</div><div class="line">│   │       │       ├── append.<span class="keyword">js</span></div><div class="line">│   │       │       ├── class.<span class="keyword">js</span></div><div class="line">│   │       │       ├── index.<span class="keyword">js</span></div><div class="line">│   │       │       ├── props.<span class="keyword">js</span></div><div class="line">│   │       │       └── style.<span class="keyword">js</span></div><div class="line">│   │       ├── framework.<span class="keyword">js</span></div><div class="line">│   │       ├── runtime</div><div class="line">│   │       │   ├── components</div><div class="line">│   │       │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │       │   │   ├── transition-group.<span class="keyword">js</span></div><div class="line">│   │       │   │   └── transition.<span class="keyword">js</span></div><div class="line">│   │       │   ├── <span class="keyword">directives</span></div><div class="line">│   │       │   │   └── index.<span class="keyword">js</span></div><div class="line">│   │       │   ├── index.<span class="keyword">js</span></div><div class="line">│   │       │   ├── modules</div><div class="line">│   │       │   │   ├── attrs.<span class="keyword">js</span></div><div class="line">│   │       │   │   ├── class.<span class="keyword">js</span></div><div class="line">│   │       │   │   ├── events.<span class="keyword">js</span></div><div class="line">│   │       │   │   ├── index.<span class="keyword">js</span></div><div class="line">│   │       │   │   ├── style.<span class="keyword">js</span></div><div class="line">│   │       │   │   └── transition.<span class="keyword">js</span></div><div class="line">│   │       │   ├── node-ops.<span class="keyword">js</span></div><div class="line">│   │       │   ├── patch.<span class="keyword">js</span></div><div class="line">│   │       │   └── text-node.<span class="keyword">js</span></div><div class="line">│   │       └── util</div><div class="line">│   │           └── index.<span class="keyword">js</span></div><div class="line">│   ├── server</div><div class="line">│   │   ├── create-<span class="keyword">bundle-renderer.js</span></div><div class="line">│   │   ├── create-<span class="keyword">bundle-runner.js</span></div><div class="line">│   │   ├── create-renderer.<span class="keyword">js</span></div><div class="line">│   │   ├── render-<span class="built_in">context</span>.<span class="keyword">js</span></div><div class="line">│   │   ├── render-stream.<span class="keyword">js</span></div><div class="line">│   │   ├── render.<span class="keyword">js</span></div><div class="line">│   │   ├── source-map-support.<span class="keyword">js</span></div><div class="line">│   │   └── write.<span class="keyword">js</span></div><div class="line">│   ├── sfc</div><div class="line">│   │   └── parser.<span class="keyword">js</span></div><div class="line">│   └── <span class="keyword">shared</span></div><div class="line">│       └── util.<span class="keyword">js</span></div></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>src/core/instance/lifecycle.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">callHook</span> (<span class="params">vm: Component, hook: string</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> handlers = vm.$options[hook]</div><div class="line">  <span class="keyword">if</span> (handlers) &#123;</div><div class="line">    <span class="comment">// 从此处可以看出一个钩子，可以对应多个处理器</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = handlers.length; i &lt; j; i++) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        handlers[i].call(vm)</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        handleError(e, vm, <span class="string">`<span class="subst">$&#123;hook&#125;</span> hook`</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (vm._hasHookEvent) &#123;</div><div class="line">    vm.$emit(<span class="string">'hook:'</span> + hook)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>就是说你可以这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">created</span>: [</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'hook-created-1'</span>) &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'hook-created-2'</span>) &#125;</div><div class="line">    ]    </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="data-props-computed-methods-watch相关"><a href="#data-props-computed-methods-watch相关" class="headerlink" title="data, props, computed, methods, watch相关"></a>data, props, computed, methods, watch相关</h3><blockquote><p>src/core/instance/state.js</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function initComputed (vm: Component, computed: <span class="keyword">Object</span>) &#123;</div><div class="line">  <span class="keyword">const</span> watchers = vm._computedWatchers = <span class="keyword">Object</span>.create(<span class="keyword">null</span>)</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="built_in">key</span> in computed) &#123;</div><div class="line">    <span class="keyword">const</span> userDef = computed[<span class="built_in">key</span>]</div><div class="line">    <span class="comment">// 如果计算属性不是函数，那么应该是一个对象，并且应该提供一个get方法</span></div><div class="line">    <span class="keyword">const</span> getter = typeof userDef === <span class="string">'function'</span> ? userDef : userDef.<span class="built_in">get</span></div><div class="line">    <span class="comment">// create internal watcher for the computed property.</span></div><div class="line">    watchers[<span class="built_in">key</span>] = <span class="keyword">new</span> Watcher(vm, getter, noop, computedWatcherOptions)</div><div class="line"></div><div class="line">    <span class="comment">// component-defined computed properties are already defined on the</span></div><div class="line">    <span class="comment">// component prototype. We only need to define computed properties defined</span></div><div class="line">    <span class="comment">// at instantiation here.</span></div><div class="line">    <span class="keyword">if</span> (!(<span class="built_in">key</span> in vm)) &#123;</div><div class="line">      defineComputed(vm, <span class="built_in">key</span>, userDef)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在通过下面定义的<code>defineComputed</code>, 可以知道我们还可以这样定义计算属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">Vue</span>(&#123;</div><div class="line">    <span class="attribute">computed</span>: &#123;</div><div class="line">        name: &#123;</div><div class="line">            cache: true,</div><div class="line">            <span class="built_in">get</span>()&#123;</div><div class="line">                return <span class="string">'xxx'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="selector-tag">set</span>()&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源码目录总览&quot;&gt;&lt;a href=&quot;#源码目录总览&quot; class=&quot;headerlink&quot; title=&quot;源码目录总览&quot;&gt;&lt;/a&gt;源码目录总览&lt;/h2&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Object类方法之keys()</title>
    <link href="https://xxxxxmiss.github.io/2017/05/20/Object-keys/"/>
    <id>https://xxxxxmiss.github.io/2017/05/20/Object-keys/</id>
    <published>2017-05-20T11:55:45.000Z</published>
    <updated>2017-06-17T16:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><blockquote><p>返回一个由给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）。</p></blockquote><p>通过例子来看下什么叫“和for…in”顺序一致：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意，这并不是类数组</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="number">100</span>: <span class="string">'a'</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">'b'</span>,</div><div class="line">    <span class="number">7</span>: <span class="string">'c'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) <span class="built_in">console</span>.log(key) <span class="comment">// '2' '7' '100'</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// ['2', '7', '100']</span></div></pre></td></tr></table></figure></p><p>在通过例子看看什么叫Object.keys()不会列出原型上的属性:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'js'</span>,</div><div class="line">  <span class="attr">price</span>: <span class="number">100</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">target.__proto__ = &#123;</div><div class="line">  <span class="attr">ISBN</span>: <span class="number">2017</span>,</div><div class="line">  <span class="attr">publish</span>: <span class="string">'construction house'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> target)&#123;</div><div class="line">  <span class="built_in">console</span>.log(key) <span class="comment">// 会输出'name', 'price', 'ISBN', 'publish'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(target)) <span class="comment">// 会输出 ['name', 'price']</span></div></pre></td></tr></table></figure></p><p>在通过例子看看什么叫Object.keys()只会列出对象<strong>自身可枚举</strong>的属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'js'</span>,</div><div class="line">  <span class="attr">price</span>: <span class="number">100</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">Object</span>.defineProperty(target, <span class="string">'ISBN'</span>, &#123;</div><div class="line">  <span class="attr">value</span>: <span class="number">2017</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(target.propertyIsEnumerable(<span class="string">'ISBN'</span>)) <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// for...in循环也只会列出自身和原型上的可枚举属性</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> target)&#123;</div><div class="line">  <span class="built_in">console</span>.log(key) <span class="comment">// 'name', 'price'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 因为'ISBN'通过Object.defineProperty()添加的，默认是不可枚举的</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(target)) <span class="comment">// ['name', 'price']</span></div></pre></td></tr></table></figure></p><p>关于Object.defineProperty()和obj.propertyIsEnumerable()的详细说明可要参看这里。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty()</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable" target="_blank" rel="external">obj.propertyIsEnumerable()</a></p><h3 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h3><blockquote><p>通过上面的例子，我们看出<code>for...in</code>迭代这个对象的属性和我们平常迭代一个通过对象的属性不一样，造成这个原因就是因为这个对象的属性是数字。<br>我们知道，js迭代一个对象的顺序是无法保证按我们书写先后顺序一样，如果要保证顺序我们可以使用类数组。<br>类数组的定义：就是一个普通的对象，但是该对象必须保证2点：<br>①每个属性的值必须是一个数字<br>②必须有lenth属性。</p></blockquote><p>NOTE: 将一个类数组转化为正真的数组，如果类数组的<code>length</code>属性的值和数字属性的个数不一致，那么会出现以下几种情况:</p><ul><li>length的值和数字属性的个数一致：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrlike = &#123;</div><div class="line">    <span class="number">0</span>: <span class="string">'a'</span>,</div><div class="line">    <span class="number">1</span>: <span class="string">'b'</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">'c'</span>,</div><div class="line">    <span class="attr">length</span>: <span class="number">3</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log([].slice.call(arrlike)) <span class="comment">// [ 'a', 'b', 'c' ]</span></div></pre></td></tr></table></figure><ul><li>length的值大于数字属性的个数，会出现稀疏数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrlike = &#123;</div><div class="line">    <span class="number">0</span>: <span class="string">'a'</span>,</div><div class="line">    <span class="number">1</span>: <span class="string">'b'</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">'c'</span>,</div><div class="line">    <span class="attr">length</span>: <span class="number">5</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log([].slice.call(arrlike)) <span class="comment">// [ 'a', 'b', 'c', ,  ]</span></div></pre></td></tr></table></figure><ul><li>length的值小于数字属性的个数，会截断数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrlike = &#123;</div><div class="line">    <span class="number">0</span>: <span class="string">'a'</span>,</div><div class="line">    <span class="number">1</span>: <span class="string">'b'</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">'c'</span>,</div><div class="line">    <span class="attr">length</span>: <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log([].slice.call(arrlike)) <span class="comment">// [ 'a', 'b' ]</span></div></pre></td></tr></table></figure><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><blockquote><p>在es5中，如果该方法的参数不是一个对象，那么会造成<code>TypeError</code>。<br>在es2015中，非对象的参数将会被强制转换为一个对象。如果转化失败，则会抛出转化类型错误。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="built_in">Object</span>.keys(<span class="string">'foo'</span>)</div><div class="line"><span class="comment">// TypeError: 'foo' is not an object</span></div><div class="line"></div><div class="line"><span class="comment">// ES2015</span></div><div class="line"><span class="built_in">Object</span>.keys(<span class="string">'foo'</span>)</div><div class="line"><span class="comment">// ['0', '1', '2']</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(<span class="literal">null</span>)</div><div class="line"><span class="built_in">Object</span>.keys(<span class="literal">undefined</span>)</div><div class="line"><span class="comment">// Uncaught TypeError: Cannot convert undefined or null to object</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(<span class="number">3</span>) <span class="comment">// []</span></div><div class="line"><span class="built_in">Object</span>.keys(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// []</span></div><div class="line"><span class="built_in">Object</span>.keys(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// []</span></div></pre></td></tr></table></figure><p>所以可以简单做如下总结(在es2015中)</p><ul><li>参数为null,undefined，抛出转换失败错误</li><li>原始类型返回空数组</li><li>引用类型返回空的数组</li><li>symbol类型返回空数组</li><li>数组，类数组, 非空的字符串，都返回他们的索引组成的数组</li><li>只有纯对象才返回属性名组成的字符串数组</li></ul><h3 id="什么叫纯对象"><a href="#什么叫纯对象" class="headerlink" title="什么叫纯对象"></a>什么叫纯对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Object]'</span></div></pre></td></tr></table></figure><p>满足这个条件的对象就叫纯对象。</p><h2 id="Object-keys简单的polyfill"><a href="#Object-keys简单的polyfill" class="headerlink" title="Object.keys简单的polyfill"></a>Object.keys简单的polyfill</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.keys) <span class="built_in">Object</span>.keys = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(o !== <span class="built_in">Object</span>(o)) </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Object.keys called on a non-object'</span>)</div><div class="line">    <span class="keyword">var</span> k = [], p</div><div class="line">    <span class="keyword">for</span>(p <span class="keyword">in</span> o) <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(o, p)) k.push(p)</div><div class="line">    <span class="keyword">return</span> k</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Object的使用之一"><a href="#Object的使用之一" class="headerlink" title="Object的使用之一"></a>Object的使用之一</h2><blockquote><p>在上面的polyfill中，判断类型时，使用了<code>o !== Object(o)</code>, 直接调用<code>Object</code>构造函数，可以将一个原始类型转化为引用类型。还有其他的类似的构造函数<code>Number</code>, <code>String</code>, <code>Boolean</code>等也是将对应的原始类型转化为引用类型。<br>也就是说可以利用Object构造函数来判断一个变量引用类型还是原始类型</p></blockquote><p>通过例子看下是不是这么回事：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> n) <span class="comment">// 'number'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>(n)) <span class="comment">// 'object'</span></div></pre></td></tr></table></figure></p><p>需要注意的是：使用<code>Object</code>构造函数来判断是原始类型还是引用类型的时候，一定要使用<code>===</code>全等判断符号</p><p>再来看例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>(str)) <span class="comment">// &#123;0: "h", 1: "e", 2: "l", 3: "l", 4: "o", length: 5, [[PrimitiveValue]]: "hello"&#125;</span></div></pre></td></tr></table></figure></p><ul><li>通过<code>Object(str)</code>将一个字符串转化为类数组对象了，其实这也就是为什么平时我们可以对一个原始类型的字符串使用<code>length</code>属性，其实真正的是将该字符串转化为对应的引用类型，再去使用该引用类型上的<code>length</code>属性。</li><li>一般情况下，我们取字符串某个位置上的字符，可能会这样<code>str.charAt(index)</code>。通过上面的例子可以看出还可以按照数组取值的方式来。比如<code>hello[0]</code>。</li></ul><h2 id="symbol作为对象的属性"><a href="#symbol作为对象的属性" class="headerlink" title="symbol作为对象的属性"></a>symbol作为对象的属性</h2><blockquote><p>js中对象的定义就是：一些属性的集合。这个属性，包括2种，一种是普通的字符串（包括空字符串），另一种就是symbol。这里需要注意的就是：当使用symbol作为对象的属性时，那么<code>for in</code>循环和<code>Object.keys</code>是不会列出这些symbol属性的。如果要获取symbol属性的值，那么可以通过以下2种方法：</p></blockquote><ul><li>Object.getOwnPropertySymbols()</li><li>Reflect.ownKeys()</li></ul><h3 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols"></a>Object.getOwnPropertySymbols</h3><blockquote><p>返回一个对象自有的symbol属性组成的数组。因为所有的对象都没有初始化的symbol属性，所以默认情况下它会返回一个空数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)) <span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> symbol = <span class="built_in">Symbol</span>(<span class="string">'s'</span>)</div><div class="line">obj[symbol] = <span class="string">'ss'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)) <span class="comment">// [Symbol(s)]</span></div></pre></td></tr></table></figure><h3 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys"></a>Reflect.ownKeys</h3><blockquote><p>返回一个对象所有的自有属性组成的数组。<br>其实就相当于Object.getOwnPropertyNames(target).cancat(Object.getOwnPropertySymbols())</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Reflect</span>.ownKeys(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;); <span class="comment">// [ "z", "y", "x" ]</span></div><div class="line"><span class="built_in">Reflect</span>.ownKeys([]); <span class="comment">// ["length"]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> sym = <span class="built_in">Symbol</span>.for(<span class="string">'comet'</span>);</div><div class="line"><span class="keyword">var</span> sym2 = <span class="built_in">Symbol</span>.for(<span class="string">'meteor'</span>);</div><div class="line"><span class="keyword">var</span> obj = &#123;[sym]: <span class="number">0</span>, <span class="string">'str'</span>: <span class="number">0</span>, <span class="string">'773'</span>: <span class="number">0</span>, <span class="string">'0'</span>: <span class="number">0</span>,</div><div class="line">           [sym2]: <span class="number">0</span>, <span class="string">'-1'</span>: <span class="number">0</span>, <span class="string">'8'</span>: <span class="number">0</span>, <span class="string">'second str'</span>: <span class="number">0</span>&#125;;</div><div class="line"><span class="built_in">Reflect</span>.ownKeys(obj);</div><div class="line"><span class="comment">// [ "0", "8", "773", "str", "-1", "second str", Symbol(comet), Symbol(meteor) ]</span></div><div class="line"><span class="comment">// Indexes in numeric order, </span></div><div class="line"><span class="comment">// strings in insertion order, </span></div><div class="line"><span class="comment">// symbols in insertion order</span></div></pre></td></tr></table></figure><blockquote><p>观察上面的例子，需要注意的是：当一个对象的属性由各种类型的字符串和symbol组成时，返回的数组元素按照这样的顺序来排列：索引字符串（从0开始，-1被列入字符串属性）属性按照从小到大，其次是字符串属性按照最初插入的顺序，最后才是symbol属性按照最初插入的顺序。</p></blockquote><h2 id="Object-getOwnPropertyNames-obj"><a href="#Object-getOwnPropertyNames-obj" class="headerlink" title="Object.getOwnPropertyNames(obj)"></a>Object.getOwnPropertyNames(obj)</h2><blockquote><p>该方法会返回obj自身（不包括原型链上的属性）所有的属性（包括不可枚举的属性）组成的字符串数组。<br>返回的数组的元素的顺序和for…in遍历时的顺序一致。</p></blockquote><p>包括不可枚举的属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123;</div><div class="line">  <span class="attr">getFoo</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.foo</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">obj.foo = <span class="number">1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj))</div><div class="line"><span class="comment">// prints: ["getFoo", "foo"]</span></div></pre></td></tr></table></figure></p><p>不包括原型链上的属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.foo = <span class="string">'foo'</span></div><div class="line">&#125;</div><div class="line">Foo.prototype.getFoo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.foo</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(<span class="keyword">new</span> Foo()))</div><div class="line"><span class="comment">// prints: ['foo']</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Object-keys&quot;&gt;&lt;a href=&quot;#Object-keys&quot; class=&quot;headerlink&quot; title=&quot;Object.keys()&quot;&gt;&lt;/a&gt;Object.keys()&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;返回一个由给定对象的自身可枚举属性
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>encodeURIComponent</title>
    <link href="https://xxxxxmiss.github.io/2017/05/20/encodeURIComponent/"/>
    <id>https://xxxxxmiss.github.io/2017/05/20/encodeURIComponent/</id>
    <published>2017-05-20T06:36:29.000Z</published>
    <updated>2017-06-07T01:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="encodeURIComponent概述"><a href="#encodeURIComponent概述" class="headerlink" title="encodeURIComponent概述"></a>encodeURIComponent概述</h2><blockquote><p>是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">encodeURIComponent</span><span class="params">(str)</span></span></div></pre></td></tr></table></figure><blockquote><p>NOTE: encodeURIComponent不转义以下字符：</p></blockquote><table><thead><tr><th>字符</th><th>编码</th></tr></thead><tbody><tr><td>字母</td><td>—</td></tr><tr><td>数字</td><td>—</td></tr><tr><td>(</td><td>%28</td></tr><tr><td>)</td><td>%29</td></tr><tr><td>.</td><td>%2e</td></tr><tr><td>!</td><td>%21</td></tr><tr><td>~</td><td>%7e</td></tr><tr><td>*</td><td>%2a</td></tr><tr><td>‘</td><td>%27</td></tr><tr><td>-</td><td>%2d</td></tr><tr><td>_</td><td>%5f</td></tr></tbody></table><h2 id="手动转义encodeURIComponent未转义的字符"><a href="#手动转义encodeURIComponent未转义的字符" class="headerlink" title="手动转义encodeURIComponent未转义的字符"></a>手动转义encodeURIComponent未转义的字符</h2><blockquote><p>因为encodeURIComponent并不对<code>!</code>, <code>~</code>, <code>*</code>, <code>(</code>, <code>)</code>, <code>&#39;</code>等这些字符转义，而已这些字符也没有被正式划定URI的用途，所以当你需要对这些字符转义的时候，可以按照下面的方法：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixedEncodeURIComponent</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(str)</div><div class="line">        .replace(<span class="regexp">/[!\(\)\*~']/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'%'</span> + c.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>)</div><div class="line">        &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="手动解码encodeURIComponent编码的字符"><a href="#手动解码encodeURIComponent编码的字符" class="headerlink" title="手动解码encodeURIComponent编码的字符"></a>手动解码encodeURIComponent编码的字符</h2><blockquote><p>URI中常见的一些字符，如<code>?</code>, <code>&amp;</code>, ‘#’等，如果使用encodeURIComponent转义，那么uri就变得不是那么直观了，为了使uri直观易读，我们可以手动反转这些字符：</p></blockquote><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function fixedEncodeURIComponent(str)&#123;</div><div class="line">    <span class="keyword">return</span> encodeURIComponent(str)</div><div class="line">        .<span class="built_in">replace</span>(/%(<span class="number">23</span>|<span class="type">24</span>|<span class="type">26</span>|<span class="type">2B</span>|<span class="type">3A</span>|<span class="type">3C</span>|<span class="type">3E</span>|<span class="type">3D</span>|<span class="type">2F</span>|<span class="type">3F</span>|<span class="type">40</span>|<span class="type">5B</span>|<span class="type">5D</span>|<span class="type">5E</span>|<span class="type">60</span>|<span class="type">7B</span>|<span class="type">7D</span>|<span class="type">7C</span>)/g, decodeURIComponent)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="常见字符在encodeURIComponent中编码的字符对照表"><a href="#常见字符在encodeURIComponent中编码的字符对照表" class="headerlink" title="常见字符在encodeURIComponent中编码的字符对照表"></a>常见字符在encodeURIComponent中编码的字符对照表</h2><table><thead><tr><th>字符</th><th>编码</th></tr></thead><tbody><tr><td>#</td><td>%23</td></tr><tr><td>$</td><td>%24</td></tr><tr><td>&amp;</td><td>%26</td></tr><tr><td>+</td><td>%2B</td></tr><tr><td>:</td><td>%3A</td></tr><tr><td>&lt;</td><td>%3C</td></tr><tr><td>=</td><td>%3D</td></tr><tr><td>/</td><td>%2F</td></tr><tr><td>?</td><td>%3F</td></tr><tr><td>@</td><td>%40</td></tr><tr><td>[</td><td>%5B</td></tr><tr><td>]</td><td>%5D</td></tr><tr><td>^</td><td>%5E</td></tr><tr><td>`</td><td>%60</td></tr><tr><td>{</td><td>%7B</td></tr><tr><td>}</td><td>%7D</td></tr><tr><td>&#124;</td><td>%7C</td></tr></tbody></table><h2 id="关于charCodeAt-方法"><a href="#关于charCodeAt-方法" class="headerlink" title="关于charCodeAt()方法"></a>关于charCodeAt()方法</h2><blockquote><p>charCodeAt() 方法返回0到65535(0xffff)之间的整数，表示给定索引处的UTF-16代码单元 (在 Unicode 编码单元表示一个单一的 UTF-16 编码单元的情况下，UTF-16 编码单元匹配 Unicode 编码单元。但在——例如 Unicode 编码单元 &gt; 0x10000 的这种——不能被一个 UTF-16 编码单元单独表示的情况下，只能匹配 Unicode 代理对的第一个编码单元) 。如果你想要整个代码点的值，使用 codePointAt()。<br>Unicode 编码单元（code points）的范围从 0 到 1,114,111（0x10FFFF）。<br>开头的 128(0-127) 个 Unicode 编码单元和 ASCII 字符编码一样。</p></blockquote><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">str</span>.charCodeAt(<span class="keyword">index</span>)</div></pre></td></tr></table></figure><p>参数index解释：</p><ul><li>index: &gt;=0 &amp;&amp; &lt; st.length</li><li>如果不是一个数值，则默认为0。</li><li>如果是一个超出范围的数值，那么返回NaN。</li></ul><p>返回值：给定索引处字符的 UTF-16 代码单元值的数字</p><h2 id="关于字符编码的相关问题"><a href="#关于字符编码的相关问题" class="headerlink" title="关于字符编码的相关问题"></a>关于字符编码的相关问题</h2><blockquote><p>这是一个很大的话题，可以参考以下几个链接。</p></blockquote><p><a href="https://www.zhihu.com/question/24572900" target="_blank" rel="external">为什么 UTF-8 编码比 UTF-16 编码应用更广泛?</a><br><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">字符编码笔记：ASCII，Unicode和UTF-8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;encodeURIComponent概述&quot;&gt;&lt;a href=&quot;#encodeURIComponent概述&quot; class=&quot;headerlink&quot; title=&quot;encodeURIComponent概述&quot;&gt;&lt;/a&gt;encodeURIComponent概述&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="js" scheme="https://xxxxxmiss.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://xxxxxmiss.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="https://xxxxxmiss.github.io/2017/05/14/flex/"/>
    <id>https://xxxxxmiss.github.io/2017/05/14/flex/</id>
    <published>2017-05-14T03:59:30.000Z</published>
    <updated>2017-10-11T07:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="伸缩性flex"><a href="#伸缩性flex" class="headerlink" title="伸缩性flex"></a>伸缩性flex</h2><blockquote><p>用来控制伸缩容器额外空间如何沿着伸缩容器的布局轴成比例的分配给各个伸缩项目。</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">flex</span>: none;</div><div class="line">等价于</div><div class="line"><span class="attribute">flex-grow</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">flex-shrink</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">flex-basis</span>: auto;</div><div class="line"></div><div class="line"><span class="attribute">flex</span>: <span class="number">0</span> auto;</div><div class="line">或者</div><div class="line"><span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> auto;</div><div class="line">或者</div><div class="line"><span class="attribute">flex</span>: initail;</div><div class="line">等价于(也就是说他们单属性的默认值值分别是)</div><div class="line"><span class="attribute">flex-grow</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">flex-shrink</span>: <span class="number">1</span>;</div><div class="line"><span class="attribute">flex-basis</span>: auto;</div></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">flex</span>: auto;</div><div class="line">等价于</div><div class="line"><span class="attribute">flex-grow</span>: <span class="number">1</span>;</div><div class="line"><span class="attribute">flex-shrink</span>: <span class="number">1</span>;</div><div class="line"><span class="attribute">flex-basis</span>: auto;</div></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">等价于</div><div class="line"><span class="attribute">flex-grow</span>: <span class="number">1</span>;</div><div class="line"><span class="attribute">flex-shrink</span>: <span class="number">1</span>;</div><div class="line"><span class="attribute">flex-basis</span>: <span class="number">0%</span>;</div></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">flex</span>: <span class="number">2</span> <span class="number">100px</span>;</div><div class="line">等价于</div><div class="line"><span class="attribute">flex-grow</span>: <span class="number">2</span>;</div><div class="line"><span class="attribute">flex-shrink</span>: <span class="number">1</span>;</div><div class="line"><span class="attribute">flex-basis</span>: <span class="number">100px</span>;</div><div class="line">`</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;伸缩性flex&quot;&gt;&lt;a href=&quot;#伸缩性flex&quot; class=&quot;headerlink&quot; title=&quot;伸缩性flex&quot;&gt;&lt;/a&gt;伸缩性flex&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用来控制伸缩容器额外空间如何沿着伸缩容器的布局轴成比例的分配给各个伸缩项目
      
    
    </summary>
    
      <category term="css" scheme="https://xxxxxmiss.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://xxxxxmiss.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Framework7</title>
    <link href="https://xxxxxmiss.github.io/2017/04/29/framework7/"/>
    <id>https://xxxxxmiss.github.io/2017/04/29/framework7/</id>
    <published>2017-04-29T08:31:38.000Z</published>
    <updated>2017-05-02T03:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p>由于所有的页面都是通过ajax的形式拉取到主页面中显示，所以必须将启动一个服务器将工程部署到服务器上。<br>framework7默认使用gulp构建项目的，所以可以如下进行本地开发：</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在工程的根路径下安装依赖</span></div><div class="line">npm/yarn install </div><div class="line"></div><div class="line"><span class="comment">// 启动服务</span></div><div class="line">gulp <span class="keyword">server</span></div></pre></td></tr></table></figure><h2 id="视图布局"><a href="#视图布局" class="headerlink" title="视图布局"></a>视图布局</h2><h3 id="单视图布局"><a href="#单视图布局" class="headerlink" title="单视图布局"></a>单视图布局</h3><blockquote><p>使用最广泛的布局，使用单一视图 + 路由 + 头部导航(navbar) + 底部导航(toolbar) + 侧边栏(panel)</p></blockquote><h3 id="tabbar切换"><a href="#tabbar切换" class="headerlink" title="tabbar切换"></a>tabbar切换</h3><blockquote><p>这种方式的视图布局，每个tabbar都有自己独立的“单视图布局”</p></blockquote><h3 id="分屏布局"><a href="#分屏布局" class="headerlink" title="分屏布局"></a>分屏布局</h3><blockquote><p>这种方式一般使用在屏幕比较大的时候，比如<code>ipad</code>，最大优点是可以同时显示多个视图（一般左右两边）</p></blockquote><h3 id="内联页面"><a href="#内联页面" class="headerlink" title="内联页面"></a>内联页面</h3><blockquote><p>这种方式下，页面不需要通过ajax加载过来，其他页面直接写在dom中</p></blockquote><h3 id="内建的模板引擎加载视图"><a href="#内建的模板引擎加载视图" class="headerlink" title="内建的模板引擎加载视图"></a>内建的模板引擎加载视图</h3><blockquote><p>使用f7内置的模板引擎来加载指定的视图</p></blockquote><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><blockquote><p><code>&lt;div class=&quot;view&quot;&gt;</code>, 视图是app独立的可视化部分，每个view都可以有自己的设置,导航，不同的样式，布局等。这种功能可以让你很容易的在app中插入各种各样的视图。</p></blockquote><h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><blockquote><p><code>&lt;div class=&quot;views&quot;&gt;&lt;/div&gt;</code>, 是所有<code>view</code>的容器，也就是app容器，在任何时候该容器都是可见的。<br>一个app当然只能有一个容器，即只允许有一个<code>views</code>。</p></blockquote><h2 id="page"><a href="#page" class="headerlink" title="page"></a>page</h2><blockquote><p><code>&lt;div class=&quot;page&quot;&gt;&lt;/div&gt;</code>, <code>page</code>跟<code>view</code>不同，<code>page</code>没有<code>navbar</code>,<code>tabbar</code>等导航，它主要用来显示页面的内容部分。</p></blockquote><h2 id="Pages"><a href="#Pages" class="headerlink" title="Pages"></a>Pages</h2><blockquote><p><code>&lt;div class=&quot;pages&quot;&gt;</code>, 是<code>page</code>的容器，一个<code>pages</code>可以包含多个<code>page</code>,就相当于一个页面中的内容可以被分成多个部分的内容来显示。<br>所有<code>page</code>的过渡动画都是在<code>pages</code>上实现的。<br>Note: 在主<code>views</code>中，总是应该包含一个<code>view</code>，在这个<code>view</code>中总是应该包含一个<code>pages</code>。</p></blockquote><h3 id="data-page"><a href="#data-page" class="headerlink" title="data-page"></a>data-page</h3><blockquote><p>在每个<code>page</code>上，你都应该指定一个<code>data-page</code>属性，虽然这不是必须的，但是极其推荐都加上他。<br>因为在<code>page events</code>和<code>page callbacks</code>中非常有用，他帮助我们操作去加载指定的页面和操作指定的页面。</p></blockquote><h3 id="page-content"><a href="#page-content" class="headerlink" title="page-content"></a>page-content</h3><blockquote><p>所有可见的内容都应该放在<code>&lt;div class=&quot;page-content&quot;&gt;</code>中，并且将该元素作为<code>&lt;div class=&quot;page&quot; data-page=&quot;index&quot;&gt;</code>的子元素。<br>列表的滚动就是在改元素上实现的。</p></blockquote><p>一个基本的视图骨架<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    ...</div><div class="line">    //这些面板可以理解为全局性的，不管你如何切换视图，他们都是保持不变的</div><div class="line">    // 被覆盖的面板</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-lef panel-reveal"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view view-panel"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    // 覆盖别人的面板</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-right panel-cover"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view view-panel"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- views --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"views"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- main view --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view view-main"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- Navbar --&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- Pages --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">data-page</span>=<span class="string">"home"</span>&gt;</span></div><div class="line">                    ... page contents goes here ...</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- Toolbar --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- other view --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view another-view"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- Navbar --&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- Pages --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">data-page</span>=<span class="string">"home-another"</span>&gt;</span></div><div class="line">                    ... page contents goes here ...</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- Toolbar --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="初始化View"><a href="#初始化View" class="headerlink" title="初始化View"></a>初始化View</h2><blockquote><p><code>views</code>已经在html中准备完毕，那么接下来就需要在js中对其初始化。<br>需要注意的是，并不是所有的<code>views</code>都是需要初始化的，我们应该只初始化那些需要导航的视图。<br>像这些<code>panel</code>,<code>popup</code>等,我们并不需要初始化的，只需要保证一个正确的布局就可以了。</p></blockquote><h2 id="初始化app和view"><a href="#初始化app和view" class="headerlink" title="初始化app和view"></a>初始化app和view</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = <span class="keyword">new</span> <span class="type">Framework7</span>(&#123;</div><div class="line">    <span class="comment">//....</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>这个<code>myApp</code>实例上有一系列的方法让我们来操作app的各个视图，其中初始化视图的方法为：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> view = myApp.addView(<span class="keyword">selector</span>, <span class="keyword">params</span>)</div></pre></td></tr></table></figure></p><ul><li>selecotr: css选择器或者Dom节点</li><li>params: 一个控制视图参数的对象</li><li>return: 返回初始化的视图实例</li></ul><p>对<code>params</code>中的2个选项进行下分析:</p><ul><li>preroute: function(view, options),该选项类似于<code>Vue</code>中路由钩子函数<code>beforeRouteEnter</code>, 允许在进入某个路由的前做一些操作。</li><li>preprocess: function(content, url, next), 该选项类似于<code>Vue</code>中的生命周期函数<code>beforeMount</code>, 允许在视图渲染到dom前做最后的一些操作。</li></ul><p><a href="http://framework7.io/docs/views.html" target="_blank" rel="external">关于<code>params</code>中的其他的选项，可参看官方文档</a></p><h2 id="默认视图url"><a href="#默认视图url" class="headerlink" title="默认视图url"></a>默认视图url</h2><blockquote><p>可以在<code>view</code>元素上设置<code>data-url</code>或则在初始化视图的时候指定<code>url</code>选项来指定默认的视图。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"view"</span> data-url=<span class="string">"index.html"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><h2 id="访问视图实例"><a href="#访问视图实例" class="headerlink" title="访问视图实例"></a>访问视图实例</h2><blockquote><p>myApp.views[name] | myApp[nameView]</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> myApp = new Framework7()</div><div class="line"></div><div class="line">myApp.addView(<span class="string">'.left-view'</span>, &#123;&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 访问视图实例</span></div><div class="line">myApp<span class="selector-class">.views</span><span class="selector-class">.left</span></div><div class="line"><span class="comment">// 或者</span></div><div class="line">myApp.leftView</div></pre></td></tr></table></figure><blockquote><p>需要注意的是，主视图的实例的访问一定是这样的<code>myApp.mainView</code>或者<code>myApp.views.main</code>。<br>即使你初始化视图的时候，指定了其他的名字也是无效的。</p></blockquote><h2 id="通过dom元素来得到指定的视图实例"><a href="#通过dom元素来得到指定的视图实例" class="headerlink" title="通过dom元素来得到指定的视图实例"></a>通过dom元素来得到指定的视图实例</h2><blockquote><p>在视图初始化之后，F7会在<code>&lt;div class=&quot;view&quot;&gt;</code>的元素上增加一个特殊的链接属性，所以我们在js中任何时候都可以这样来获取视图实例：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> viewEl = $$(<span class="string">'.main-view'</span>)[<span class="number">0</span>]</div><div class="line"><span class="selector-tag">var</span> viewInstance = viewEl.f7View</div></pre></td></tr></table></figure><blockquote><p>同时，所有视图的实例都会挂载到app实例的views属性上，而对于主视图又是很特殊，所有我们也可以通过下面的方式来后去主视图：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> views = myApp<span class="selector-class">.views</span></div><div class="line"><span class="function"><span class="title">for</span><span class="params">(var i = <span class="number">0</span>; i &lt; views.length; i++)</span></span>&#123;</div><div class="line">    <span class="selector-tag">var</span> view = views[i]</div><div class="line">    <span class="keyword">if</span>(view.main) myApp.alert(<span class="string">'I found the main view'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h2><blockquote><p>关于页面最重要的部分就是页面事件，通过执行js代码来操作指定的页面。</p></blockquote><p>示例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式一</span></div><div class="line">$$(<span class="built_in">document</span>).on(<span class="string">'page:init'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">// do something here when page loaded and initialized</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 方式二</span></div><div class="line">$$(<span class="built_in">document</span>).on(<span class="string">'page:init'</span>, <span class="string">'.page[data-page="about"]'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">// do something here when page with data-page=about attribute loaded and initialized</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h2 id="page-data"><a href="#page-data" class="headerlink" title="page data"></a>page data</h2><blockquote><p>上面的关于页面事件的使用很简单，但是使用一个事件处理函数来处理页面的加载，那么如何处理页面加载的优先级？这就是page data排上用场的时候了。。。</p></blockquote><p>实例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in page callbacks:</span></div><div class="line">myApp.onPageInit(<span class="string">'about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">    <span class="comment">// "page" variable contains all required information about loaded and initialized page</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// in page events</span></div><div class="line">$$(<span class="built_in">document</span>).on(<span class="string">'page:init'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">// "page" variable contains all required information about loaded and initialized page</span></div><div class="line">    <span class="keyword">var</span> page = e.details.page</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><blockquote><p><code>page</code>是一个对象，关于该对象包含了页面的哪些信息，参看<a href="http://framework7.io/docs/pages.html#page-data" target="_blank" rel="external">官方文档</a></p></blockquote><h2 id="page-callbacks"><a href="#page-callbacks" class="headerlink" title="page callbacks"></a>page callbacks</h2><blockquote><p>为指定的页面执行指定的代码，使用page callbacks更加的方便友好，他比page events有以下几点好处：</p></blockquote><ul><li>page callbacks不是事件，这就意味着更少的内存利用和更少出现内存溢出</li><li>因为不是事件，所以你无需担心需要解绑他们</li><li>使用page callbacks可以更好的组织代码结构</li></ul><p>关于一些page callbacks的说明：</p><ul><li><p>myApp.onPageBeforeInit(pageName, callback(page))</p><blockquote><p>仅仅当F7将含有<code>data-page=pageName</code>的页面插入到DOM中时触发回调，此时仅能保证<code>page</code>元素已经插入到DOM，并不能保证该<code>page</code>中的其他组件插入到DOM中。</p></blockquote></li><li><p>myApp.onPageInit(pageName, callback(page))</p></li></ul><blockquote><p>和<code>onPageBeforeInit</code>的区别是<code>page</code>和<code>page</code>中的其他组件也都插入到DOM中了。</p></blockquote><ul><li>myApp.onPageReInit(pageName, callback(page))</li></ul><blockquote><p>该回调只适用于<strong>开启缓存</strong>的<strong>内联</strong>的模板页面。</p></blockquote><p>Note: 我们可以为<code>page callbacks</code>传入多个以空格分割的<code>pageName</code>和多个<code>callback</code>，还可以为<code>pageName</code>传入通配符.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 因为某些页面可能有一些相同的逻辑</span></div><div class="line">myApp.onPageInit(<span class="string">'about services'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 为同一个页面增加多个回调</span></div><div class="line">myApp.onPageInit(<span class="string">'about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)    </div><div class="line">&#125;)</div><div class="line">myApp.onPageInit(<span class="string">'about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'b'</span>)    </div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 通过通配符为所有页面添加相同的回调</span></div><div class="line">myApp.onPageInit(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'all pages'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><a href="http://framework7.io/docs/page-callbacks.html#callbacks-methods" target="_blank" rel="external">page callbacks具体api可以参看官方文档</a></p><h2 id="路由API"><a href="#路由API" class="headerlink" title="路由API"></a>路由API</h2><blockquote><p>F7中常见的4中路由方式:</p></blockquote><ul><li>ajax加载页面（默认使用的方式）：从其他文件中加载页面</li><li>使用js api创建动态的页面</li><li>使用内联页面，就是这些页面已经存在在DOM中，不需要通过额外的加载。就相当于是静态的页面，只需要控制显示隐藏而已</li><li>使用Template7模板加载页面</li></ul><blockquote><p>在一个app中，你可以灵活的组合使用这些方式。因为视图<code>view</code>是一个app中独立的可视化部分，所以当你使用路由之前，一定要先初始化视图，初始化视图之后，就可以使用视图提供的方法导航到app中的各个部分（<code>pages</code>, <code>popup</code>, <code>panels</code>）等。</p></blockquote><p><a href="http://framework7.io/docs/router-api.html#view-navigation-shortcuts-methods" target="_blank" rel="external">具体的路由方法，参看官方文档</a></p><h2 id="F7中使用ajax加载页面"><a href="#F7中使用ajax加载页面" class="headerlink" title="F7中使用ajax加载页面"></a>F7中使用ajax加载页面</h2><blockquote><p>在F7中，默认情况下所有的链接都使用ajax加载，除了指定了<code>external</code>的链接或则没有正确的href属性的链接（href=”#”或则为空）。<br>这种行为当然是可以改变的，可以通过在初始化app的时候指定<code>ajaxLinks</code>选项来改变这种行为。<br>例子：</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Framework7(&#123;</div><div class="line">    <span class="comment">// 这个属性的值是一个css选择器</span></div><div class="line">    ajaxLinks: <span class="string">'a.ajax'</span> <span class="comment">//含有ajax类名的a链接才会使用ajax加载</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="返回上一步"><a href="#返回上一步" class="headerlink" title="返回上一步"></a>返回上一步</h2><blockquote><p>在F7中，返回上一步只要在指定的a链接上增加一个<code>back</code>类名就可以了。但是关于返回链接有几点需要注意的：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"index.html"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"back"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure><blockquote><p>当导航历史中已经有了记录的时候，<code>href</code>属性的值是被忽略掉的。<br>当导航历史中没有记录的时候，才会使用<code>href</code>属性的值，比如首页的时候。<br>这种行为是不可改变的，因为通常情况下，用户点击返回就是返回上一步，并不需要做一些额外额操作。<br>也就是说，对于回退链接而言，<code>href</code>属性并不是必须的。</p></blockquote><h2 id="IOS主题下的swipeback"><a href="#IOS主题下的swipeback" class="headerlink" title="IOS主题下的swipeback"></a>IOS主题下的swipeback</h2><blockquote><p>在iOS主题下，你可以配置<code>swipeback</code>选项来滑动切换页面，但是有时候你可能需要禁用这种行为，那么可以这样：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在page上增加一个no-swipeback即可</span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page no-swipeback"</span>&gt;</div><div class="line">    </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><h2 id="加载、回退时禁用过渡效果"><a href="#加载、回退时禁用过渡效果" class="headerlink" title="加载、回退时禁用过渡效果"></a>加载、回退时禁用过渡效果</h2><blockquote><p>取消加载，回退时的过渡效果，可以设置全局的<code>noAnimate</code>或者配置<code>animatePages</code>选项。<br>当你想局部禁用或者开启某些页面的过渡效果时，可以这样：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"about.html"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"no-animation"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div><div class="line">&lt;a href=<span class="string">"about.html"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"back no-animation"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure><p>当开启全局禁用，但是想局部开启过渡时：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"about.html"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"with-animation"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div><div class="line">&lt;a href=<span class="string">"about.html"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"back with-animation"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>关于导航还有一些其他的选项，可以通过配置<code>data-</code>前缀来控制，具体参看<a href="http://framework7.io/docs/pages-ajax.html" target="_blank" rel="external">官方文档</a></p><h2 id="动态加载页面"><a href="#动态加载页面" class="headerlink" title="动态加载页面"></a>动态加载页面</h2><blockquote><p>动态加载的页面url遵循如下规则: <code>#content-</code>,这个<code></code>占位符会被导航历史中的索引替换。当然在app初始化的选项中通过<code>dynamicPageUrl</code>来改变默认的规则。</p></blockquote><p>示例：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="xml">// 可以将字符串提取到单独的模板中，方便书写</span></div><div class="line">// <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"contentTpl"</span>&gt;</span><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">var newContent = `</div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            //...</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">`</div><div class="line">mainView.router.loadContent(newContent)</div><div class="line">或者</div><div class="line">mainView.router.load(<span class="template-variable">&#123;</span></div><div class="line">    content: newContent, // $$('#contentTpl').html()</div><div class="line">    animatePages: false</div><div class="line">&#125;<span class="xml">)</span></div></pre></td></tr></table></figure></p><h2 id="内联页面-1"><a href="#内联页面-1" class="headerlink" title="内联页面"></a>内联页面</h2><blockquote><p>使用这一特征，你可以将所有的页面都放在DOM中，这样app一次性加载全部页面。<br>默认情况下，内联页面的行为是禁止的，你可以在初始化view的时候使用<code>domCache: true</code>来激活。</p></blockquote><p>内联页面结构一般如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"views"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view view-main"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 当需要动态的navbar时，这样布局 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- home-navbar --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- data-page属性需要和对应的page一致 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-inner"</span> <span class="attr">data-page</span>=<span class="string">"index"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- about-navbar --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-inner cached"</span> <span class="attr">data-page</span>=<span class="string">"about"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- services-navar --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-inner cached"</span> <span class="attr">data-page</span>=<span class="string">"services"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>services<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 动态navbar的时候，需要navbar-through --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages navbar-through"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- home page --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">data-page</span>=<span class="string">"index"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- about page --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page cached"</span> <span class="attr">data-page</span>=<span class="string">"about"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- services page --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page cached"</span> <span class="attr">data-page</span>=<span class="string">"services"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p><blockquote><p>由上面的结构可以看出，内联页面布局和一般的页面布局没有什么太大的差异，唯一的不同点就是所有需要的页面已经存在于DOM中，非激活页面含有一个<code>cached</code>类名。</p></blockquote><h3 id="关于内联页面的其他配置"><a href="#关于内联页面的其他配置" class="headerlink" title="关于内联页面的其他配置"></a>关于内联页面的其他配置</h3><blockquote><p>ajax加载页面中的选项如返回导航，<code>data-</code>配置等，都可以在内联页面中使用。同时，内联页面也可以通过ajax来加载，内联页面的其他配置不需要做改动，唯一需要改变的就是增加js代码：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mainView</span><span class="selector-class">.router</span><span class="selector-class">.load</span>(&#123;</div><div class="line">    <span class="attribute">pageName</span>: <span class="string">'test'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="通过js来控制内联页面的返回"><a href="#通过js来控制内联页面的返回" class="headerlink" title="通过js来控制内联页面的返回"></a>通过js来控制内联页面的返回</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mainView<span class="selector-class">.router</span><span class="selector-class">.back</span>()</div></pre></td></tr></table></figure><h2 id="Template7模板引擎"><a href="#Template7模板引擎" class="headerlink" title="Template7模板引擎"></a>Template7模板引擎</h2><blockquote><p>F7已经内置了Template7模板引擎，所以你需要额外安装，当然你可以单独的安装Template7。<br>Template7模板引擎的语法类似<code>handlebars</code>模板引擎的语法。<br>Template7模板引擎轻量高效，最慢的地方就是使用<code>Template7.compile()</code>将字符串模板解析为原生的js函数，所以一定要记得缓存编译后的js函数，不要对一个相同的模板多次编译。</p></blockquote><h2 id="F7自动编译Template7模板"><a href="#F7自动编译Template7模板" class="headerlink" title="F7自动编译Template7模板"></a>F7自动编译Template7模板</h2><blockquote><p>在F7中，可以自动编译Template7模板，只需要做如下4件事：<br>1,将模板字符串放在<code>script</code>标签中<br>2,设置<code>type=&quot;text/template7&quot;</code><br>3,给<code>script</code>标签一个唯一的<code>id</code><br>4,初始化app的时候配置选项<code>precompileTemplates: true</code></p></blockquote><hr><blockquote><p>编译后的模板函数都会挂载到<code>Template7.templates</code>和<code>myApp.templates</code>对象上，所以你可以将所需数据传入编译后的函数，调用函数获取html字符串。</p></blockquote><p>实例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 模板</span></div><div class="line">&lt;script type=<span class="string">"text/template7"</span> id=<span class="string">"personTemplate"</span>&gt;</div><div class="line">    &lt;div&gt;hello, my name is &#123;&#123;name&#125;&#125;, <span class="selector-tag">i</span> am &#123;&#123;age&#125;&#125; years old&lt;/div&gt;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line"><span class="comment">// 初始化app</span></div><div class="line"><span class="selector-tag">var</span> myApp = new Framework7(&#123;</div><div class="line">    precompileTemplates: true</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 获取编译函数并调用</span></div><div class="line"><span class="comment">// Template7.templates[id], id为script标签中指定的id</span></div><div class="line"><span class="selector-tag">var</span> personHtml = Tempate7<span class="selector-class">.templates</span><span class="selector-class">.personTemplate</span>(&#123;</div><div class="line">    name: <span class="string">'f7'</span>,</div><div class="line">    age: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h2 id="Template7-pages"><a href="#Template7-pages" class="headerlink" title="Template7 pages"></a>Template7 pages</h2><blockquote><p>F7提供了一系列方式允许我们渲染ajax页面和动态页面作为Template7模板。<br>激活这一功能，必须在初始化app的时候配置<code>template7Pages: true</code>。</p></blockquote><h2 id="F7和Template7的使用"><a href="#F7和Template7的使用" class="headerlink" title="F7和Template7的使用"></a>F7和Template7的使用</h2><blockquote><p>在F7中使用Template7，常用的几种方式如下：</p></blockquote><p>index.html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 首页 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">data-page</span>=<span class="string">"index"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- about页面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-template</span>=<span class="string">"about"</span> <span class="attr">data-context-name</span>=<span class="string">"about"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- services页面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"services.html"</span> <span class="attr">data-context-name</span>=<span class="string">"services"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- cars页面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"cars.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template7"</span> <span class="attr">id</span>=<span class="string">"about"</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-inner"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span> about page <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">data-page</span>=<span class="string">"about"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>My name is <span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml">, i am </span><span class="template-variable">&#123;&#123;age&#125;&#125;</span><span class="xml"> years old!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>cars.html(services.html结构一样，不再列出)<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-inner"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"back link"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-back"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>services page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">data-page</span>=<span class="string">"services"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> this&#125;&#125;</span><span class="xml"></span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="template-variable">&#123;&#123;this&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">        <span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>JS代码：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = <span class="keyword">new</span> Framework7(&#123;</div><div class="line">    animateNavBackIcon: <span class="literal">true</span>, <span class="comment">// 开启返回按钮的icon动画效果</span></div><div class="line">    precompileTemplates: <span class="literal">true</span>, <span class="comment">// 开启自动编译模板    </span></div><div class="line">    template7Pages: <span class="literal">true</span>, <span class="comment">// 开启使用ajax，动态页面作为template7模板</span></div><div class="line">    template7Data: &#123; <span class="comment">// 模板数据</span></div><div class="line">        <span class="string">'url: services.html'</span>: &#123; <span class="comment">// 通过url匹配页面</span></div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'page:cars'</span>: [<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>], <span class="comment">// 通过data-page匹配页面</span></div><div class="line">        about: &#123; <span class="comment">// 简单的数据，页面中需提供data-context-name来指定模板的上下文</span></div><div class="line">            name: <span class="string">'F7'</span>,</div><div class="line">            age: <span class="number">2</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//.... 其他的配置项</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;由于所有的页面都是通过ajax的形式拉取到主页面中显示，所以必须将启动一个服务器将工程部署到服务器上。&lt;br&gt;fr
      
    
    </summary>
    
      <category term="前端框架" scheme="https://xxxxxmiss.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="framework7" scheme="https://xxxxxmiss.github.io/tags/framework7/"/>
    
      <category term="hybrid" scheme="https://xxxxxmiss.github.io/tags/hybrid/"/>
    
  </entry>
  
</feed>
